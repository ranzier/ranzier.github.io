<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringCloud学习笔记</title>
    <link href="/2025/04/04/JAVA/SpringCloud/SpringCloud/"/>
    <url>/2025/04/04/JAVA/SpringCloud/SpringCloud/</url>
    
    <content type="html"><![CDATA[<h1 align="center">SpringCloud微服务学习笔记</h1><h1 id="一-MybatisPlus"><a href="#一-MybatisPlus" class="headerlink" title="一. MybatisPlus"></a>一. MybatisPlus</h1><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h2><p>实现步骤：</p><ul><li>引入MybatisPlus依赖</li><li>定义Mapper</li></ul><h3 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-定义Mapper"><a href="#1-2-定义Mapper" class="headerlink" title="1.2 定义Mapper"></a>1.2 定义Mapper</h3><ul><li>MybatisPlus提供了一个基础的BaseMapper接口</li><li>修改mp-demo中的com.itheima.mp.mapper包下的UserMapper接口，让其继承BaseMapper：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-常见注解"><a href="#2-常见注解" class="headerlink" title="2. 常见注解"></a>2. 常见注解</h2><h3 id="2-1-默认情况"><a href="#2-1-默认情况" class="headerlink" title="2.1 默认情况"></a>2.1 默认情况</h3><p>MybatisPlus就是根据PO实体的信息来推断出表的信息，从而生成SQL的。默认情况下：</p><ul><li>MybatisPlus会把PO实体的类名驼峰转下划线作为表名</li><li>MybatisPlus会把PO实体的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型</li><li>MybatisPlus会把名为id的字段作为主键</li></ul><h3 id="2-2-TableName"><a href="#2-2-TableName" class="headerlink" title="2.2 @TableName"></a>2.2 @TableName</h3><ul><li>描述：表名注解，标识实体类对应的表</li><li>使用位置：实体类</li></ul><h3 id="2-3-TableId"><a href="#2-3-TableId" class="headerlink" title="2.3 @TableId"></a>2.3 @TableId</h3><ul><li>描述：主键注解，标识实体类中的主键字段</li><li>使用位置：实体类的主键字段</li></ul><p>IdType属性的常见值：</p><ul><li>AUTO：利用数据库的id自增长</li><li>INPUT：手动生成id</li><li>ASSIGN_ID：雪花算法生成Long类型的全局唯一id，这是默认的ID策略</li></ul><h3 id="2-4-TableField"><a href="#2-4-TableField" class="headerlink" title="2.4 @TableField"></a>2.4 @TableField</h3><p>普通字段注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableName(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@TableField(is_married&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isMarried;<br>    <span class="hljs-meta">@TableField(&quot;`concat`&quot;)</span><br>    <span class="hljs-keyword">private</span> String concat;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加@TableField注解的一些特殊情况：</p><ul><li>成员变量名与数据库字段名不一致</li><li>成员变量是以isXXX命名，按照JavaBean的规范，MybatisPlus识别字段时会把is去除，这就导致与数据库不符。</li><li>成员变量名与数据库一致，但是与数据库的关键字冲突。使用@TableField注解给字段名添加转义字符：&#96;&#96;</li></ul><h2 id="3-核心功能"><a href="#3-核心功能" class="headerlink" title="3. 核心功能"></a>3. 核心功能</h2><h3 id="3-1-条件构造器"><a href="#3-1-条件构造器" class="headerlink" title="3.1 条件构造器"></a>3.1 条件构造器</h3><p>除了新增以外，修改、删除、查询的SQL语句都需要指定where条件。因此BaseMapper中提供的相关方法除了以id作为where条件以外，还支持更加复杂的where条件。</p><p>Wrapper就是条件构造的抽象类</p><p><img src="/img/blogs/java/springcloud/mp.1.png"></p><h4 id="3-1-1-QueryWrapper"><a href="#3-1-1-QueryWrapper" class="headerlink" title="3.1.1 QueryWrapper"></a>3.1.1 QueryWrapper</h4><p>查询：查询出名字中带o的，存款大于等于1000元的人。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryWrapper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.构建查询条件 where name like &quot;%o%&quot; AND balance &gt;= 1000</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;()<br>            .select(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;balance&quot;</span>)<br>            .like(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>)<br>            .ge(<span class="hljs-string">&quot;balance&quot;</span>, <span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">// 2.查询数据</span><br>    List&lt;User&gt; users = userMapper.selectList(wrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-2-UpdateWrapper"><a href="#3-1-2-UpdateWrapper" class="headerlink" title="3.1.2 UpdateWrapper"></a>3.1.2 UpdateWrapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateWrapper</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Long&gt; ids = List.of(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">4L</span>);<br>    <span class="hljs-comment">// 1.生成SQL</span><br>    UpdateWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;User&gt;()<br>            .setSql(<span class="hljs-string">&quot;balance = balance - 200&quot;</span>) <span class="hljs-comment">// SET balance = balance - 200</span><br>            .in(<span class="hljs-string">&quot;id&quot;</span>, ids); <span class="hljs-comment">// WHERE id in (1, 2, 4)</span><br>        <span class="hljs-comment">// 2.更新，注意第一个参数可以给null，也就是不填更新字段和数据，</span><br>    <span class="hljs-comment">// 而是基于UpdateWrapper中的setSQL来更新</span><br>    userMapper.update(<span class="hljs-literal">null</span>, wrapper);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-3-LambdaQueryWrapper"><a href="#3-1-3-LambdaQueryWrapper" class="headerlink" title="3.1.3 LambdaQueryWrapper"></a>3.1.3 LambdaQueryWrapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testLambdaQueryWrapper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.构建条件 WHERE username LIKE &quot;%o%&quot; AND balance &gt;= 1000</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    wrapper.lambda()<br>            .select(User::getId, User::getUsername, User::getInfo, User::getBalance)<br>            .like(User::getUsername, <span class="hljs-string">&quot;o&quot;</span>)<br>            .ge(User::getBalance, <span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">// 2.查询</span><br>    List&lt;User&gt; users = userMapper.selectList(wrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-自定义SQL"><a href="#3-2-自定义SQL" class="headerlink" title="3.2 自定义SQL"></a>3.2 自定义SQL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testCustomWrapper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.准备自定义查询条件</span><br>    List&lt;Long&gt; ids = List.of(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">4L</span>);<br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().in(<span class="hljs-string">&quot;id&quot;</span>, ids);<br><br>    <span class="hljs-comment">// 2.调用mapper的自定义方法，直接传递Wrapper</span><br>    userMapper.deductBalanceByIds(<span class="hljs-number">200</span>, wrapper);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在UserMapper中自定义SQL：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>    <span class="hljs-meta">@Select(&quot;UPDATE user SET balance = balance - #&#123;money&#125; $&#123;ew.customSqlSegment&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductBalanceByIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;money&quot;)</span> <span class="hljs-type">int</span> money, <span class="hljs-meta">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;User&gt; wrapper)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-Service接口"><a href="#3-3-Service接口" class="headerlink" title="3.3 Service接口"></a>3.3 Service接口</h3><h4 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h4><p>MybatisPlus不仅提供了BaseMapper，还提供了通用的Service接口及默认实现，封装了一些常用的service模板方法。<br><strong>通用接口为IService</strong>，<strong>默认实现为ServiceImpl</strong>，其中封装的方法可以分为以下几类：</p><ul><li>save：新增</li><li>remove：删除</li><li>update：更新</li><li>get：查询单个结果</li><li>list：查询集合结果</li><li>count：计数</li><li>page：分页查询</li></ul><h4 id="3-3-2-基本用法"><a href="#3-3-2-基本用法" class="headerlink" title="3.3.2 基本用法"></a>3.3.2 基本用法</h4><p>自定义Service接口继承IService以拓展方法。同时，让自定义的Service实现类继承ServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br>    <span class="hljs-comment">// 拓展自定义方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编写UserServiceImpl类，继承ServiceImpl，实现UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-3-Lambda"><a href="#3-3-3-Lambda" class="headerlink" title="3.3.3 Lambda"></a>3.3.3 Lambda</h4><p>IService中还提供了Lambda功能来简化我们的复杂查询及更新功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductBalance</span><span class="hljs-params">(Long id, Integer money)</span> &#123;<br>    <span class="hljs-comment">// 1.查询用户</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-comment">// 2.校验用户状态</span><br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || user.getStatus() == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户状态异常！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3.校验余额是否充足</span><br>    <span class="hljs-keyword">if</span> (user.getBalance() &lt; money) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户余额不足！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 4.扣减余额 update tb_user set balance = balance - ?</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">remainBalance</span> <span class="hljs-operator">=</span> user.getBalance() - money;<br>    lambdaUpdate()<br>            .set(User::getBalance, remainBalance) <span class="hljs-comment">// 更新余额</span><br>            .set(remainBalance == <span class="hljs-number">0</span>, User::getStatus, <span class="hljs-number">2</span>) <span class="hljs-comment">// 动态判断，是否更新status</span><br>            .eq(User::getId, id)<br>            .eq(User::getBalance, user.getBalance()) <span class="hljs-comment">// 乐观锁</span><br>            .update();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-扩展功能"><a href="#4-扩展功能" class="headerlink" title="4. 扩展功能"></a>4. 扩展功能</h2><h3 id="4-1-代码生成"><a href="#4-1-代码生成" class="headerlink" title="4.1 代码生成"></a>4.1 代码生成</h3><p>使用MybatisX插件即可</p><p><a href="https://blog.csdn.net/weixin_47025166/article/details/125362323">SpringBoot中MybatisX插件的简单使用教程（超详细！！）</a></p><h3 id="4-2-静态工具"><a href="#4-2-静态工具" class="headerlink" title="4.2 静态工具"></a>4.2 静态工具</h3><p>有的时候<strong>Service之间也会相互调用</strong>，为了避免出现循环依赖问题，MybatisPlus提供一个静态工具类：Db，其中的一些静态方法与IService中方法签名基本一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> UserVO <span class="hljs-title function_">queryUserAndAddressById</span><span class="hljs-params">(Long userId)</span> &#123;<br>    <span class="hljs-comment">// 1.查询用户</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getById(userId);<br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 2.查询收货地址</span><br>    List&lt;Address&gt; addresses = Db.lambdaQuery(Address.class)<br>            .eq(Address::getUserId, userId)<br>            .list();<br>    <span class="hljs-comment">// 3.处理vo</span><br>    <span class="hljs-type">UserVO</span> <span class="hljs-variable">userVO</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(user, UserVO.class);<br>    userVO.setAddresses(BeanUtil.copyToList(addresses, AddressVO.class));<br>    <span class="hljs-keyword">return</span> userVO;<br>&#125;<br></code></pre></td></tr></table></figure><p>在查询地址时，我们采用了Db的静态方法，因此避免了注入AddressService，减少了循环依赖的风险。</p><h3 id="4-3-逻辑删除"><a href="#4-3-逻辑删除" class="headerlink" title="4.3 逻辑删除"></a>4.3 逻辑删除</h3><p>对于一些比较重要的数据，我们不删除数据库中的数据，而是</p><ul><li>在表中添加一个字段标记数据是否被删除</li><li>当删除数据时把标记置为true</li></ul><p>我们要在application.yml中配置逻辑删除字段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">deleted</span> <span class="hljs-comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 逻辑已删除值(默认为 1)</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 逻辑未删除值(默认为 0)</span><br></code></pre></td></tr></table></figure><h3 id="4-4-枚举处理器"><a href="#4-4-枚举处理器" class="headerlink" title="4.4 枚举处理器"></a>4.4 枚举处理器</h3><p>MybatisPlus提供了一个处理枚举的类型转换器，可以帮我们把<strong>枚举类型与数据库类型自动转换</strong></p><h4 id="4-4-1-定义枚举"><a href="#4-4-1-定义枚举" class="headerlink" title="4.4.1 定义枚举"></a>4.4.1 定义枚举</h4><p><img src="/img/blogs/java/springcloud/mp.2.png"></p><h4 id="4-4-2-EnumValue"><a href="#4-4-2-EnumValue" class="headerlink" title="4.4.2 @EnumValue"></a>4.4.2 @EnumValue</h4><p>MybatisPlus提供了@EnumValue注解来标记枚举属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnumValue</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br></code></pre></td></tr></table></figure><p>表示value字段的值是数据库值</p><h4 id="4-4-3-配置枚举处理器"><a href="#4-4-3-配置枚举处理器" class="headerlink" title="4.4.3 配置枚举处理器"></a>4.4.3 配置枚举处理器</h4><p>在application.yaml文件中添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">default-enum-type-handler:</span> <span class="hljs-string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span><br></code></pre></td></tr></table></figure><h3 id="4-5-JSON类型处理器"><a href="#4-5-JSON类型处理器" class="headerlink" title="4.5 JSON类型处理器"></a>4.5 JSON类型处理器</h3><p>数据库的user表中有一个info字段，是JSON类型。而目前User实体类中却是String类型。处理JSON就可以使用JacksonTypeHandler处理器</p><p><strong>使用类型处理器</strong><br>将User类的info字段修改为UserInfo类型，并声明类型处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(typeHandler = JacksonTypeHandler.class)</span><br><span class="hljs-keyword">private</span> UserInfo info;<br></code></pre></td></tr></table></figure><h2 id="5-插件功能-以分页插件为例"><a href="#5-插件功能-以分页插件为例" class="headerlink" title="5. 插件功能(以分页插件为例)"></a>5. 插件功能(以分页插件为例)</h2><p>MybatisPlus提供了很多的插件功能，进一步拓展其功能。</p><ul><li>PaginationInnerInterceptor：自动分页</li><li>TenantLineInnerInterceptor：多租户</li><li>DynamicTableNameInnerInterceptor：动态表名</li><li>OptimisticLockerInnerInterceptor：乐观锁</li><li>IllegalSQLInnerInterceptor：sql 性能规范</li><li>BlockAttackInnerInterceptor：防止全表更新与删除</li></ul><h3 id="5-1-配置分页插件"><a href="#5-1-配置分页插件" class="headerlink" title="5.1 配置分页插件"></a>5.1 配置分页插件</h3><p>在项目中新建一个配置类：MybatisConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 初始化核心插件</span><br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-comment">// 添加分页插件</span><br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-分页查询的测试"><a href="#5-2-分页查询的测试" class="headerlink" title="5.2 分页查询的测试"></a>5.2 分页查询的测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageQuery</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.分页查询，new Page()的两个参数分别是：页码、每页大小</span><br>    Page&lt;User&gt; p = userService.page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>));<br>    <span class="hljs-comment">// 2.总条数</span><br>    System.out.println(<span class="hljs-string">&quot;total = &quot;</span> + p.getTotal());<br>    <span class="hljs-comment">// 3.总页数</span><br>    System.out.println(<span class="hljs-string">&quot;pages = &quot;</span> + p.getPages());<br>    <span class="hljs-comment">// 4.数据</span><br>    List&lt;User&gt; records = p.getRecords();<br>    records.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二-Docker"><a href="#二-Docker" class="headerlink" title="二. Docker"></a>二. Docker</h1><h2 id="1-Docker介绍"><a href="#1-Docker介绍" class="headerlink" title="1. Docker介绍"></a>1. Docker介绍</h2><p>Docker本身包含一个后台服务，我们可以利用Docker命令告诉Docker服务，帮助我们快速部署指定的应用。Docker服务部署应用时，首先要去搜索并下载应用对应的镜像，然后根据镜像创建并允许容器，应用就部署完成了。</p><p><img src="/img/blogs/java/springcloud/docker.1.png"></p><h2 id="2-Docker常见命令"><a href="#2-Docker常见命令" class="headerlink" title="2. Docker常见命令"></a>2. Docker常见命令</h2><h3 id="2-1-常见命令"><a href="#2-1-常见命令" class="headerlink" title="2.1 常见命令"></a>2.1 常见命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker pull</td><td>拉取镜像</td></tr><tr><td>docker push</td><td>推送镜像到 Docker Registry</td></tr><tr><td>docker images</td><td>查看本地镜像</td></tr><tr><td>docker rmi</td><td>删除本地镜像</td></tr><tr><td>docker run</td><td>创建并运行容器（不能重复创建）</td></tr><tr><td>docker stop</td><td>停止指定容器</td></tr><tr><td>docker start</td><td>启动指定容器</td></tr><tr><td>docker restart</td><td>重新启动容器</td></tr><tr><td>docker rm</td><td>删除指定容器</td></tr><tr><td>docker ps</td><td>查看容器</td></tr><tr><td>docker logs</td><td>查看容器运行日志</td></tr><tr><td>docker exec</td><td>进入容器</td></tr><tr><td>docker save</td><td>保存镜像到本地压缩文件</td></tr><tr><td>docker load</td><td>加载本地压缩文件到镜像</td></tr><tr><td>docker inspect</td><td>查看容器详细信息</td></tr></tbody></table><p><img src="/img/blogs/java/springcloud/docker.2.png"></p><h3 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span><br><br><span class="hljs-comment"># 第2步，拉取Nginx镜像</span><br>docker pull nginx<br><br><span class="hljs-comment"># 第3步，查看镜像</span><br>docker images<br><span class="hljs-comment"># 结果如下：</span><br>REPOSITORY   TAG       IMAGE ID       CREATED         SIZE<br>nginx        latest    605c77e624dd   16 months ago   141MB<br>mysql        latest    3218b38490ce   17 months ago   516MB<br><br><span class="hljs-comment"># 第4步，创建并允许Nginx容器</span><br>docker run -d --name nginx -p 80:80 nginx<br><br><span class="hljs-comment"># 第5步，查看运行中容器</span><br>docker ps<br><span class="hljs-comment"># 也可以加格式化方式访问，格式会更加清爽</span><br>docker ps --format <span class="hljs-string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 第6步，访问网页，地址：http://虚拟机地址</span><br><br><span class="hljs-comment"># 第7步，停止容器</span><br>docker stop nginx<br><br><span class="hljs-comment"># 第8步，查看所有容器</span><br>docker ps -a --format <span class="hljs-string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 第9步，再次启动nginx容器</span><br>docker start nginx<br><br><span class="hljs-comment"># 第10步，再次查看容器</span><br>docker ps --format <span class="hljs-string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 第11步，查看容器详细信息</span><br>docker inspect nginx<br><br><span class="hljs-comment"># 第12步，进入容器,查看容器内目录</span><br>docker <span class="hljs-built_in">exec</span> -it nginx bash<br><span class="hljs-comment"># 或者，可以进入MySQL</span><br>docker <span class="hljs-built_in">exec</span> -it mysql mysql -uroot -p<br><br><span class="hljs-comment"># 第13步，删除容器</span><br>docker <span class="hljs-built_in">rm</span> nginx<br><span class="hljs-comment"># 发现无法删除，因为容器运行中，强制删除容器</span><br>docker <span class="hljs-built_in">rm</span> -f nginx<br></code></pre></td></tr></table></figure><h3 id="2-3-命令别名"><a href="#2-3-命令别名" class="headerlink" title="2.3 命令别名"></a>2.3 命令别名</h3><p>给常用Docker命令起别名，方便我们访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改/root/.bashrc文件</span><br>vi /root/.bashrc<br>内容如下：<br><span class="hljs-comment"># .bashrc</span><br><br><span class="hljs-comment"># User specific aliases and functions</span><br><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">rm</span>=<span class="hljs-string">&#x27;rm -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cp</span>=<span class="hljs-string">&#x27;cp -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">mv</span>=<span class="hljs-string">&#x27;mv -i&#x27;</span><br><span class="hljs-built_in">alias</span> dps=<span class="hljs-string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class="hljs-built_in">alias</span> dis=<span class="hljs-string">&#x27;docker images&#x27;</span><br><br><span class="hljs-comment"># Source global definitions</span><br><span class="hljs-keyword">if</span> [ -f /etc/bashrc ]; <span class="hljs-keyword">then</span><br>        . /etc/bashrc<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>执行命令使别名生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /root/.bashrc<br></code></pre></td></tr></table></figure><h2 id="3-数据卷"><a href="#3-数据卷" class="headerlink" title="3. 数据卷"></a>3. 数据卷</h2><h3 id="3-1-数据卷介绍"><a href="#3-1-数据卷介绍" class="headerlink" title="3.1 数据卷介绍"></a>3.1 数据卷介绍</h3><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。<br><strong>数据卷（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁</strong></p><p><img src="/img/blogs/java/springcloud/docker.3.png"></p><ul><li>我们创建了两个数据卷：conf、html</li><li>Nginx容器内部的conf目录和html目录分别与两个数据卷关联。</li><li>而数据卷conf和html分别指向了宿主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;conf&#x2F;_data目录和&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html&#x2F;_data目录<br>这样以来，容器内的conf和html目录就 与宿主机的conf和html目录关联起来，我们称为挂载。此时，我们操作宿主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html&#x2F;_data就是在操作容器内的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;_data目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</li></ul><h3 id="3-2-数据卷命令"><a href="#3-2-数据卷命令" class="headerlink" title="3.2 数据卷命令"></a>3.2 数据卷命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td></tr><tr><td>docker volume ls</td><td>查看所有数据卷</td></tr><tr><td>docker volume rm</td><td>删除指定数据卷</td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td></tr><tr><td>docker volume prune</td><td>清除数据卷</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span><br>docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx<br><br><span class="hljs-comment"># 2.然后查看数据卷</span><br>docker volume <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 结果</span><br>DRIVER    VOLUME NAME<br><span class="hljs-built_in">local</span>     29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f<br><span class="hljs-built_in">local</span>     html<br><br><span class="hljs-comment"># 3.查看数据卷详情</span><br>docker volume inspect html<br><span class="hljs-comment"># 结果</span><br>[<br>    &#123;<br>        <span class="hljs-string">&quot;CreatedAt&quot;</span>: <span class="hljs-string">&quot;2024-05-17T19:57:08+08:00&quot;</span>,<br>        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,<br>        <span class="hljs-string">&quot;Labels&quot;</span>: null,<br>        <span class="hljs-string">&quot;Mountpoint&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,<br>        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;html&quot;</span>,<br>        <span class="hljs-string">&quot;Options&quot;</span>: null,<br>        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;local&quot;</span><br>    &#125;<br>]<br><br><span class="hljs-comment"># 4.查看/var/lib/docker/volumes/html/_data目录</span><br>ll /var/lib/docker/volumes/html/_data<br><span class="hljs-comment"># 可以看到与nginx的html目录内容一样，结果如下：</span><br>总用量 8<br>-rw-r--r--. 1 root root 497 12月 28 2021 50x.html<br>-rw-r--r--. 1 root root 615 12月 28 2021 index.html<br><br><span class="hljs-comment"># 5.进入该目录，并随意修改index.html内容</span><br><span class="hljs-built_in">cd</span> /var/lib/docker/volumes/html/_data<br>vi index.html<br><br><span class="hljs-comment"># 6.打开页面，查看效果</span><br><br><span class="hljs-comment"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span><br>docker <span class="hljs-built_in">exec</span> -it nginx bash<br></code></pre></td></tr></table></figure><h3 id="3-3-挂载本地目录或文件"><a href="#3-3-挂载本地目录或文件" class="headerlink" title="3.3 挂载本地目录或文件"></a>3.3 挂载本地目录或文件</h3><p>数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 挂载本地目录</span><br>-v 本地目录:容器内目录<br><span class="hljs-comment"># 挂载本地文件</span><br>-v 本地文件:容器内文件<br></code></pre></td></tr></table></figure><p>演示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># 1.删除原来的MySQL容器</span><br>docker <span class="hljs-built_in">rm</span> -f mysql<br><br><span class="hljs-comment"># 2.进入root目录</span><br><span class="hljs-built_in">cd</span> ~<br><br><span class="hljs-comment"># 3.创建并运行新mysql容器，挂载本地目录</span><br>docker run -d \<br>  --name mysql \<br>  -p 3306:3306 \<br>  -e TZ=Asia/Shanghai \<br>  -e MYSQL_ROOT_PASSWORD=123 \<br>  -v ./mysql/data:/var/lib/mysql \<br>  -v ./mysql/conf:/etc/mysql/conf.d \<br>  -v ./mysql/init:/docker-entrypoint-initdb.d \<br>  mysql<br><br><span class="hljs-comment"># 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了</span><br><span class="hljs-built_in">ls</span> -l mysql<br><span class="hljs-comment"># 结果：</span><br>总用量 4<br>drwxr-xr-x. 2 root    root   20 5月  19 15:11 conf<br>drwxr-xr-x. 7 polkitd root 4096 5月  19 15:11 data<br>drwxr-xr-x. 2 root    root   23 5月  19 15:11 init<br><br><span class="hljs-comment"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span><br><span class="hljs-built_in">ls</span> -l data<br><br><span class="hljs-comment"># 5.查看MySQL容器内数据</span><br><span class="hljs-comment"># 5.1.进入MySQL</span><br>docker <span class="hljs-built_in">exec</span> -it mysql mysql -uroot -p123<br><span class="hljs-comment"># 5.2.查看编码表</span><br>show variables like <span class="hljs-string">&quot;%char%&quot;</span>;<br><span class="hljs-comment"># 5.3.结果，发现编码是utf8mb4没有问题</span><br>+--------------------------+--------------------------------+<br>| Variable_name            | Value                          |<br>+--------------------------+--------------------------------+<br>| character_set_client     | utf8mb4                        |<br>| character_set_connection | utf8mb4                        |<br>| character_set_database   | utf8mb4                        |<br>| character_set_filesystem | binary                         |<br>| character_set_results    | utf8mb4                        |<br>| character_set_server     | utf8mb4                        |<br>| character_set_system     | utf8mb3                        |<br>| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |<br>+--------------------------+--------------------------------+<br><br><span class="hljs-comment"># 6.查看数据</span><br><span class="hljs-comment"># 6.1.查看数据库</span><br>show databases;<br><span class="hljs-comment"># 结果，hmall是黑马商城数据库</span><br>+--------------------+<br>| Database           |<br>+--------------------+<br>| hmall              |<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>5 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><span class="hljs-comment"># 6.2.切换到hmall数据库</span><br>use hmall;<br><span class="hljs-comment"># 6.3.查看表</span><br>show tables;<br><span class="hljs-comment"># 结果：</span><br>+-----------------+<br>| Tables_in_hmall |<br>+-----------------+<br>| address         |<br>| cart            |<br>| item            |<br>| order           |<br>| order_detail    |<br>| order_logistics |<br>| pay_order       |<br>| user            |<br>+-----------------+<br><span class="hljs-comment"># 6.4.查看address表数据</span><br>+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+<br>| <span class="hljs-built_in">id</span> | user_id | province | city   | town     | mobile      | street        | contact   | is_default | notes |<br>+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+<br>| 59 |       1 | 北京     | 北京   | 朝阳区    | 13900112222 | 金燕龙办公楼   | 李佳诚    | 0          | NULL  |<br>| 60 |       1 | 北京     | 北京   | 朝阳区    | 13700221122 | 修正大厦       | 李佳红    | 0          | NULL  |<br>| 61 |       1 | 上海     | 上海   | 浦东新区  | 13301212233 | 航头镇航头路   | 李佳星    | 1          | NULL  |<br>| 63 |       1 | 广东     | 佛山   | 永春      | 13301212233 | 永春武馆       | 李晓龙    | 0          | NULL  |<br>+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure><h2 id="4-镜像"><a href="#4-镜像" class="headerlink" title="4. 镜像"></a>4. 镜像</h2><h3 id="4-1-构建自己的镜像"><a href="#4-1-构建自己的镜像" class="headerlink" title="4.1 构建自己的镜像"></a>4.1 构建自己的镜像</h3><p>我们打包镜像也是分成这么几步：</p><ul><li>准备Linux运行环境（java项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li><li>安装并配置JDK</li><li>拷贝jar包</li><li>配置启动脚本</li></ul><h3 id="4-2-Dockerfile"><a href="#4-2-Dockerfile" class="headerlink" title="4.2 Dockerfile"></a>4.2 Dockerfile</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td></tr><tr><td>ENV</td><td>设置环境变量，可在后面指令使用</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td></tr><tr><td>RUN</td><td>执行 Linux 的 shell 命令，一般是安装过程的命令</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td></tr></tbody></table><p>有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 基础镜像</span><br>FROM openjdk:11.0-jre-buster<br><span class="hljs-comment"># 设定时区</span><br>ENV TZ=Asia/Shanghai<br>RUN <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TZ</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TZ</span> &gt; /etc/timezone<br><span class="hljs-comment"># 拷贝jar包</span><br>COPY docker-demo.jar /app.jar<br><span class="hljs-comment"># 入口</span><br>ENTRYPOINT [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="5-自定义网络"><a href="#5-自定义网络" class="headerlink" title="5. 自定义网络"></a>5. 自定义网络</h2><p>容器的网络IP其实是一个虚拟的IP，其值<strong>并不固定</strong>与某一个容器绑定</p><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li><li>在同一个自定义网络中的容器，可以通过别名互相访问</li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker network create</td><td>创建一个网络</td></tr><tr><td>docker network ls</td><td>查看所有网络</td></tr><tr><td>docker network rm</td><td>删除指定网络</td></tr><tr><td>docker network prune</td><td>清除未使用的网络</td></tr><tr><td>docker network connect</td><td>使指定容器连接加入某网络</td></tr><tr><td>docker network disconnect</td><td>使指定容器连接离开某网络</td></tr><tr><td>docker network inspect</td><td>查看网络详细信息</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.首先通过命令创建一个网络</span><br>docker network create hmall<br><br><span class="hljs-comment"># 2.然后查看网络</span><br>docker network <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 结果：</span><br>NETWORK ID     NAME      DRIVER    SCOPE<br>639bc44d0a87   bridge    bridge    <span class="hljs-built_in">local</span><br>403f16ec62a2   hmall     bridge    <span class="hljs-built_in">local</span><br>0dc0f72a0fbb   host      host      <span class="hljs-built_in">local</span><br>cd8d3e8df47b   none      null      <span class="hljs-built_in">local</span><br><span class="hljs-comment"># 其中，除了hmall以外，其它都是默认的网络</span><br><br><span class="hljs-comment"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span><br><span class="hljs-comment"># 这样该网络内的其它容器可以用别名互相访问！</span><br><span class="hljs-comment"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span><br>docker network connect hmall mysql --<span class="hljs-built_in">alias</span> db<br><span class="hljs-comment"># 3.2.db容器，也就是我们的java项目</span><br>docker network connect hmall <span class="hljs-built_in">dd</span><br><br><span class="hljs-comment"># 4.进入dd容器，尝试利用别名访问db</span><br><span class="hljs-comment"># 4.1.进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it <span class="hljs-built_in">dd</span> bash<br><span class="hljs-comment"># 4.2.用db别名访问</span><br>ping db<br><span class="hljs-comment"># 结果</span><br>PING db (172.18.0.2) 56(84) bytes of data.<br>64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 <span class="hljs-keyword">time</span>=0.070 ms<br>64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 <span class="hljs-keyword">time</span>=0.056 ms<br><span class="hljs-comment"># 4.3.用容器名访问</span><br>ping mysql<br><span class="hljs-comment"># 结果：</span><br>PING mysql (172.18.0.2) 56(84) bytes of data.<br>64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 <span class="hljs-keyword">time</span>=0.044 ms<br>64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 <span class="hljs-keyword">time</span>=0.054 ms<br></code></pre></td></tr></table></figure><h2 id="6-DockerCompose"><a href="#6-DockerCompose" class="headerlink" title="6. DockerCompose"></a>6. DockerCompose</h2><p>Docker Compose可以帮助我们<strong>实现多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p><p>部署mysql，可以使用docker-compose.yml进行部署</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/data:/var/lib/mysql&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">new</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">new:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">hmall</span><br></code></pre></td></tr></table></figure><p>基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose [OPTIONS] [COMMAND]<br></code></pre></td></tr></table></figure><table>  <thead>    <tr>      <th>类型</th>      <th>参数或指令</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td rowspan="2">Options</td>      <td>-f</td>      <td>指定 compose 文件的路径和名称</td>    </tr>    <tr>      <td>-p</td>      <td>指定 project 名称。project 就是当前 compose 文件中设置的多个 service 的集合，是逻辑概念</td>    </tr>    <tr>     <td rowspan="9">Commands</td>      <td>up</td>      <td>创建并启动所有 service 容器</td>    </tr>    <tr>      <td>down</td>      <td>停止并移除所有容器、网络</td>    </tr>    <tr>      <td>ps</td>      <td>列出所有启动的容器</td>    </tr>    <tr>      <td>logs</td>      <td>查看指定容器的日志</td>    </tr>    <tr>      <td>stop</td>      <td>停止容器</td>    </tr>    <tr>      <td>start</td>      <td>启动容器</td>    </tr>    <tr>      <td>restart</td>      <td>重启容器</td>    </tr>    <tr>      <td>top</td>      <td>查看运行的进程</td>    </tr>    <tr>      <td>exec</td>      <td>在指定的运行中容器中执行命令</td>    </tr>  </tbody></table><h1 id="三-微服务"><a href="#三-微服务" class="headerlink" title="三. 微服务"></a>三. 微服务</h1><h2 id="1-认识微服务"><a href="#1-认识微服务" class="headerlink" title="1. 认识微服务"></a>1. 认识微服务</h2><h3 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1.单体架构"></a>1.1.单体架构</h3><p>单体架构（monolithic structure）：顾名思义，整个项目中<strong>所有功能模块都在一个工程中开发</strong>；项目部署时需要<strong>对所有模块一起编译、打包</strong>；项目的架构设计、开发模式都非常简单。</p><h3 id="1-2-微服务"><a href="#1-2-微服务" class="headerlink" title="1.2 微服务"></a>1.2 微服务</h3><p>微服务架构，首先是服务化，就是<strong>将单体架构中的功能模块从单体应用中拆分出来</strong>，独立部署为多个服务。同时要满足下面的一些特点：</p><ul><li>单一职责：一个微服务负责一部分业务功能，并且其核心数据不依赖于其它模块。</li><li>团队自治：每个微服务都有自己独立的开发、测试、发布、运维人员，团队人员规模不超过10人（2张披萨能喂饱）</li><li>服务自治：<strong>每个微服务都独立打包部署，访问自己独立的数据库</strong>。并且要做好服务隔离，避免对其它服务产生影响</li></ul><p><img src="/img/blogs/java/springcloud/3.1.1.png"></p><h3 id="1-3-SpringCloud"><a href="#1-3-SpringCloud" class="headerlink" title="1.3 SpringCloud"></a>1.3 SpringCloud</h3><p>SpringCloud框架是目前Java领域最全面的微服务组件的集合</p><h2 id="2-微服务拆分"><a href="#2-微服务拆分" class="headerlink" title="2. 微服务拆分"></a>2. 微服务拆分</h2><h3 id="2-1-微服务拆分原则"><a href="#2-1-微服务拆分原则" class="headerlink" title="2.1 微服务拆分原则"></a>2.1 微服务拆分原则</h3><h4 id="2-1-1-什么时候拆"><a href="#2-1-1-什么时候拆" class="headerlink" title="2.1.1 什么时候拆"></a>2.1.1 什么时候拆</h4><ul><li>对于<strong>大多数小型项目来说，一般是先采用单体架构</strong>，随着用户规模扩大、<strong>业务复杂后再逐渐拆分为微服务架构</strong>。这样初期成本会比较低，可以快速试错。但是，这么做的问题就在于后期做服务拆分时，可能会遇到很多代码耦合带来的问题，拆分比较困难（<strong>前易后难</strong>）。</li><li>而<strong>对于一些大型项目</strong>，在立项之初目的就很明确，为了长远考虑，在架构设计时就<strong>直接选择微服务架构</strong>。虽然前期投入较多，但后期就少了拆分服务的烦恼（<strong>前难后易</strong>）。</li></ul><h4 id="2-1-2-怎么拆"><a href="#2-1-2-怎么拆" class="headerlink" title="2.1.2 怎么拆"></a>2.1.2 怎么拆</h4><ul><li>目标：微服务拆分时粒度要小</li><li><strong>高内聚</strong>：每个微服务的职责要尽量单一，包含的业务相互关联度高、完整度高。</li><li><strong>低耦合</strong>：每个微服务的功能要相对独立，尽量减少对其它微服务的依赖，或者依赖接口的稳定性要强。</li></ul><p>我们在做服务拆分时一般有两种方式：</p><ul><li>纵向拆分：<strong>按照项目的功能模块来拆分</strong>。例如黑马商城中，就有用户管理功能、订单管理功能、购物车功能、商品管理功能、支付功能等。那么按照功能模块将他们拆分为一个个服务，就属于纵向拆分。这种拆分模式可以尽可能提高服务的内聚性。</li><li>横向拆分：各个功能模块之间有没有<strong>公共的业务部分，如果有将其抽取出来作为通用服务</strong>。例如用户登录是需要发送消息通知，记录风控数据，下单时也要发送短信，记录风控数据。</li></ul><p>一般微服务项目有两种不同的工程结构：</p><ul><li>完全解耦：每一个微服务都创建为一个独立的工程，甚至可以使用不同的开发语言来开发，项目完全解耦。<ul><li>优点：服务之间耦合度低</li><li>缺点：每个项目都有自己的独立仓库，管理起来比较麻烦</li></ul></li><li>Maven聚合：整个项目为一个Project，然后每个微服务是其中的一个Module<ul><li>优点：项目代码集中，管理和运维方便</li><li>缺点：服务之间耦合，编译时间较长</li></ul></li></ul><h3 id="2-2-黑马商城的拆分"><a href="#2-2-黑马商城的拆分" class="headerlink" title="2.2 黑马商城的拆分"></a>2.2 黑马商城的拆分</h3><p><img src="/img/blogs/java/springcloud/3.2.1.png"></p><p><img src="/img/blogs/java/springcloud/3.2.2.png"></p><p><img src="/img/blogs/java/springcloud/3.2.3.png"></p><h2 id="3-服务注册和发现-与-OpenFeign"><a href="#3-服务注册和发现-与-OpenFeign" class="headerlink" title="3. 服务注册和发现 与 OpenFeign"></a>3. 服务注册和发现 与 OpenFeign</h2><h3 id="3-1-注册中心原理"><a href="#3-1-注册中心原理" class="headerlink" title="3.1 注册中心原理"></a>3.1 注册中心原理</h3><p>在微服务<strong>远程调用</strong>的过程中，包括两个角色：</p><ul><li><strong>服务提供者</strong>：提供接口供其它微服务访问，比如item-service</li><li><strong>服务消费者</strong>：调用其它微服务提供的接口，比如cart-service</li></ul><p>在大型微服务项目中，服务提供者的数量会非常多，为了管理这些服务就引入了注册中心的概念。注册中心、服务提供者、服务消费者三者间关系如下：</p><p><img src="/img/blogs/java/springcloud/3.3.1.png"></p><p>流程如下：</p><ol><li>服务启动时就会<strong>注册自己的服务信息</strong>（服务名、IP、端口）到注册中心</li><li>调用者可以从注册中心订阅想要的服务，获取服务对应的实例列表（1个服务可能多实例部署）</li><li>调用者自己对实例列表负载均衡，<strong>挑选一个实例</strong></li><li>调用者向该实例发起远程调用</li></ol><h3 id="3-2-Nacos注册中心"><a href="#3-2-Nacos注册中心" class="headerlink" title="3.2 Nacos注册中心"></a>3.2 Nacos注册中心</h3><p>Nacos: Alibaba公司出品，目前被集成在SpringCloudAlibaba中，一般用于Java应用</p><h3 id="3-3-服务注册"><a href="#3-3-服务注册" class="headerlink" title="3.3 服务注册"></a>3.3 服务注册</h3><p>把项目注册到Nacos, 步骤如下：</p><ul><li>引入依赖</li><li>配置Nacos地址</li><li>重启</li></ul><h4 id="3-3-1-添加依赖"><a href="#3-3-1-添加依赖" class="headerlink" title="3.3.1 添加依赖"></a>3.3.1 添加依赖</h4><p>pom.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos 服务注册发现--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2-配置Nacos"><a href="#3-3-2-配置Nacos" class="headerlink" title="3.3.2 配置Nacos"></a>3.3.2 配置Nacos</h4><p>application.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">item-service</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><span class="hljs-string">:8848</span> <span class="hljs-comment"># nacos地址</span><br></code></pre></td></tr></table></figure><h3 id="3-4-服务发现"><a href="#3-4-服务发现" class="headerlink" title="3.4 服务发现"></a>3.4 服务发现</h3><p>服务的消费者要去nacos订阅服务，这个过程就是服务发现，步骤如下：</p><ul><li>引入依赖</li><li>配置Nacos地址</li><li>发现并调用服务</li></ul><h3 id="3-5-OpenFeign"><a href="#3-5-OpenFeign" class="headerlink" title="3.5 OpenFeign"></a>3.5 OpenFeign</h3><p>其实远程调用的关键点就在于四个：</p><ul><li>请求方式</li><li>请求路径</li><li>请求参数</li><li>返回值类型<br>所以，OpenFeign就利用SpringMVC的相关注解来声明上述4个参数，然后基于动态代理帮我们生成远程调用的代码，而无需我们手动再编写，非常方便。</li></ul><h3 id="3-6-抽取微服务"><a href="#3-6-抽取微服务" class="headerlink" title="3.6 抽取微服务"></a>3.6 抽取微服务</h3><p>避免重复编码的办法就是抽取。这里有两种抽取思路：</p><ul><li>思路1：抽取到微服务之外的公共module</li><li>思路2：每个微服务自己抽取一个module</li></ul><p><img src="/img/blogs/java/springcloud/3.3.2.png"></p><p>方案1抽取更加简单，工程结构也比较清晰，但缺点是整个项目耦合度偏高。<br>方案2抽取相对麻烦，工程结构相对更复杂，但服务之间耦合度降低。</p><h2 id="4-网关"><a href="#4-网关" class="headerlink" title="4. 网关"></a>4. 网关</h2><h3 id="4-1-认识网关"><a href="#4-1-认识网关" class="headerlink" title="4.1 认识网关"></a>4.1 认识网关</h3><p>网关就是网络的关口。数据在网络间传输，从一个网络传输到另一网络时就需要经过<strong>网关来做数据的路由和转发以及数据安全的校验。</strong></p><p><img src="/img/blogs/java/springcloud/3.4.1.png"></p><p>前端请求不能直接访问微服务，而是要请求网关：</p><ul><li>网关可以做安全控制，也就是<strong>登录身份校验</strong>，校验通过才放行</li><li>通过认证后，网关再根据请求判断应该访问哪个微服务，将请求转发过去</li></ul><h3 id="4-2-网关路由快速入门"><a href="#4-2-网关路由快速入门" class="headerlink" title="4.2 网关路由快速入门"></a>4.2 网关路由快速入门</h3><p>步骤如下：</p><ul><li>创建网关微服务</li><li>引入SpringCloudGateway、NacosDiscovery依赖</li><li>编写启动类</li><li>配置网关路由</li></ul><p>在hm-gateway模块的resources目录新建一个application.yaml文件,配置网关路由：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><span class="hljs-string">:8848</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">item</span> <span class="hljs-comment"># 路由规则id，自定义，唯一</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://item-service</span> <span class="hljs-comment"># 路由的目标服务，lb代表负载均衡，会从注册中心拉取服务列表</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment"># 路由断言，判断当前请求是否符合当前规则，符合则路由到目标服务</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/items/**,/search/**</span> <span class="hljs-comment"># 这里是以请求路径作为判断规则</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">cart</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cart-service</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/carts/**</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://user-service</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/users/**,/addresses/**</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">trade</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://trade-service</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/orders/**</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">pay</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://pay-service</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/pay-orders/**</span><br></code></pre></td></tr></table></figure><h3 id="4-3-路由过滤"><a href="#4-3-路由过滤" class="headerlink" title="4.3 路由过滤"></a>4.3 路由过滤</h3><p>路由规则：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">item</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://item-service</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/items/**,/search/**</span><br></code></pre></td></tr></table></figure><p>四个属性含义如下：</p><ul><li>id：路由的唯一标示</li><li>predicates：路由断言，其实就是<strong>匹配条件</strong></li><li>filters：<strong>路由过滤</strong>条件</li><li>uri：<strong>路由目标地址</strong>，lb:&#x2F;&#x2F;代表负载均衡，从注册中心获取目标微服务的实例列表，并且负载均衡选择一个访问。</li></ul><ul><li>predicates，路由断言的类型:</li></ul><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td></tr><tr><td>Cookie</td><td>请求必须包含某些 cookie</td></tr><tr><td>Header</td><td>请求必须包含某些 header</td></tr><tr><td>Host</td><td>请求必须是访问某个 host（域名）</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td></tr><tr><td>RemoteAddr</td><td>请求者的 IP 必须是指定范围</td></tr><tr><td>weight</td><td>权重处理</td></tr></tbody></table><h3 id="4-4-网关登录校验"><a href="#4-4-网关登录校验" class="headerlink" title="4.4 网关登录校验"></a>4.4 网关登录校验</h3><p>既然网关是所有微服务的入口，一切请求都需要先经过网关。我们完全<strong>可以把登录校验的工作放到网关去做</strong>，这样之前说的问题就解决了：</p><ul><li>只需要<strong>在网关和用户服务保存秘钥</strong></li><li>只需要<strong>在网关开发登录校验功能</strong></li></ul><p><img src="/img/blogs/java/springcloud/4.4.1.png"></p><h4 id="4-4-1-网关过滤器"><a href="#4-4-1-网关过滤器" class="headerlink" title="4.4.1 网关过滤器"></a>4.4.1 网关过滤器</h4><p><img src="/img/blogs/java/springcloud/4.4.2.png"></p><ol><li>客户端请求进入网关后由HandlerMapping对请求做判断，找到与当前请求匹配的路由规则（Route），然后将请求交给WebHandler去处理。</li><li>WebHandler则会加载当前路由下需要执行的过滤器链（Filter chain），然后按照顺序逐一执行过滤器（后面称为Filter）。</li><li>图中Filter被虚线分为左右两部分，是因为Filter内部的逻辑分为pre和post两部分，分别会在请求路由到微服务之前和之后被执行。</li><li>只有所有Filter的pre逻辑都依次顺序执行通过后，请求才会被路由到微服务。</li><li>微服务返回结果后，再倒序执行Filter的post逻辑。</li><li>最终把响应结果返回</li></ol><p>网关过滤器链中的过滤器有两种：</p><ul><li><strong>GatewayFilter</strong>：<strong>路由过滤器</strong>，作用范围比较灵活，可以是任意指定的路由Route. </li><li><strong>GlobalFilter</strong>：<strong>全局过滤器</strong>，作用范围是所有路由，不可配置。</li></ul><h4 id="4-4-2-自定义过滤器"><a href="#4-4-2-自定义过滤器" class="headerlink" title="4.4.2 自定义过滤器"></a>4.4.2 自定义过滤器</h4><p>自定义GlobalFilter则简单很多，直接实现GlobalFilter即可，而且也无法设置动态参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintAnyGlobalFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">// 编写过滤器逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;未登录，无法访问&quot;</span>);<br>        <span class="hljs-comment">// 放行</span><br>        <span class="hljs-comment">// return chain.filter(exchange);</span><br><br>        <span class="hljs-comment">// 拦截</span><br>        <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();<br>        response.setRawStatusCode(<span class="hljs-number">401</span>);<br>        <span class="hljs-keyword">return</span> response.setComplete();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 过滤器执行顺序，值越小，优先级越高</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-3-微服务获取用户"><a href="#4-4-3-微服务获取用户" class="headerlink" title="4.4.3 微服务获取用户"></a>4.4.3 微服务获取用户</h4><p>由于网关发送请求到微服务依然采用的是Http请求，因此我们可以将用户信息以请求头的方式传递到下游微服务。然后微服务可以<strong>从请求头中获取登录用户信息</strong>。考虑到微服务内部可能很多地方都需要用到登录用户信息，因此我们可以利用SpringMVC的拦截器来实现登录用户信息获取，并存入ThreadLocal，方便后续使用。</p><p><img src="/img/blogs/java/springcloud/4.4.3.png"></p><ul><li>改造网关过滤器，在获取用户信息后保存到请求头，转发到下游微服务</li><li>编写微服务拦截器，拦截请求获取用户信息，保存到ThreadLocal后放行</li></ul><h4 id="4-4-4-OpenFeign传递用户"><a href="#4-4-4-OpenFeign传递用户" class="headerlink" title="4.4.4 OpenFeign传递用户"></a>4.4.4 OpenFeign传递用户</h4><p>前端发起的请求都会经过网关再到微服务，由于我们之前编写的过滤器和拦截器功能，微服务可以轻松获取登录用户信息。</p><p>由于微服务获取用户信息是通过拦截器在请求头中读取，因此要想实现微服务之间的用户信息传递，就必须在微服务发起调用时把用户信息存入请求头。</p><p>微服务之间调用是基于OpenFeign来实现的，并不是我们自己发送的请求。我们如何才能让每一个由OpenFeign发起的请求自动携带登录用户信息呢？<br>这里要借助Feign中提供的一个拦截器接口：feign.RequestInterceptor</p><h2 id="5-配置管理"><a href="#5-配置管理" class="headerlink" title="5. 配置管理"></a>5. 配置管理</h2><p>Nacos不仅仅具备注册中心功能，也具备配置管理的功能</p><p><img src="/img/blogs/java/springcloud/4.5.1.png"></p><p><strong>微服务共享的配置可以统一交给Nacos保存和管理</strong>，在Nacos控制台修改配置后，Nacos会将配置变更推送给相关的微服务，并且<strong>无需重启即可生效</strong>，实现<strong>配置热更新</strong>。<br>网关的路由同样是配置，因此同样可以基于这个功能实现动态路由功能，无需重启网关即可修改路由配置。</p><h3 id="5-1-配置共享"><a href="#5-1-配置共享" class="headerlink" title="5.1 配置共享"></a>5.1 配置共享</h3><p>把微服务共享的配置抽取到Nacos中统一管理，这样就不需要每个微服务都重复配置了。分为两步：</p><ul><li><strong>在Nacos中添加共享配置</strong></li><li><strong>微服务拉取配置</strong></li></ul><p>SpringCloud在初始化上下文的时候会先读取一个名为bootstrap.yaml(或者bootstrap.properties)的文件，如果我们将nacos地址配置到bootstrap.yaml中，那么在项目引导阶段就可以读取nacos中的配置了。</p><p><img src="/img/blogs/java/springcloud/4.5.2.png"></p><h3 id="5-2-动态路由"><a href="#5-2-动态路由" class="headerlink" title="5.2 动态路由"></a>5.2 动态路由</h3><p>如果希望 Nacos 推送配置变更，可以使用 Nacos 动态监听配置接口来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addListener</span><span class="hljs-params">(String dataId, String group, Listener listener)</span><br></code></pre></td></tr></table></figure><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">serverAddr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;serverAddr&#125;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">dataId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;dataId&#125;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;group&#125;&quot;</span>;<br><span class="hljs-comment">// 1.创建ConfigService，连接Nacos</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.put(<span class="hljs-string">&quot;serverAddr&quot;</span>, serverAddr);<br><span class="hljs-type">ConfigService</span> <span class="hljs-variable">configService</span> <span class="hljs-operator">=</span> NacosFactory.createConfigService(properties);<br><span class="hljs-comment">// 2.读取配置</span><br><span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> configService.getConfig(dataId, group, <span class="hljs-number">5000</span>);<br><span class="hljs-comment">// 3.添加配置监听器</span><br>configService.addListener(dataId, group, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Listener</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveConfigInfo</span><span class="hljs-params">(String configInfo)</span> &#123;<br>        <span class="hljs-comment">// 配置变更的通知处理</span><br>                System.out.println(<span class="hljs-string">&quot;recieve1:&quot;</span> + configInfo);<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">getExecutor</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>核心的步骤有2步：</p><ul><li>创建ConfigService，目的是连接到Nacos</li><li>添加配置监听器，编写配置变更的通知处理逻辑</li></ul><h1 id="四-服务保护和分布式事务"><a href="#四-服务保护和分布式事务" class="headerlink" title="四. 服务保护和分布式事务"></a>四. 服务保护和分布式事务</h1><h2 id="1-雪崩问题"><a href="#1-雪崩问题" class="headerlink" title="1. 雪崩问题"></a>1. 雪崩问题</h2><p>雪崩问题指的是<strong>某个服务不可用或响应变慢，导致依赖该服务的其他服务也无法正常工作，进而引发连锁反应，最终导致整个系统崩溃</strong>。这种现象类似于雪崩，由一个小问题逐步扩散，最终影响整个系统的稳定性。</p><p><img src="/img/blogs/java/springcloud/4.1.1.png"></p><p>雪崩问题产生的原因：</p><ul><li>微服务相互调用,<strong>服务提供者出现故障或阻塞</strong>。</li><li><strong>服务调用者</strong>没有做好异常处理,导致<strong>自身故障</strong>。</li><li>调用链中的所有服务级联失败,导致整个集群故障</li></ul><p>解决问题的思路：</p><ul><li>尽量避免服务出现故障或阻塞</li><li>保证代码的健壮性</li><li>保证网络畅通</li><li>能应对较高的并发请求</li></ul><h2 id="2-微服务保护"><a href="#2-微服务保护" class="headerlink" title="2. 微服务保护"></a>2. 微服务保护</h2><h3 id="2-1-微服务保护方案"><a href="#2-1-微服务保护方案" class="headerlink" title="2.1 微服务保护方案"></a>2.1 微服务保护方案</h3><ul><li><strong>请求限流</strong></li><li><strong>线程隔离</strong></li><li><strong>服务熔断</strong></li></ul><h4 id="2-1-1-请求限流"><a href="#2-1-1-请求限流" class="headerlink" title="2.1.1 请求限流"></a>2.1.1 请求限流</h4><p>服务故障最重要原因，就是<strong>并发太高！因此请求限流</strong>，就是<strong>限制或控制接口访问的并发流量</strong>，避免服务因流量激增而出现故障。</p><p><img src="/img/blogs/java/springcloud/4.2.1.png"></p><h4 id="2-1-2-线程隔离"><a href="#2-1-2-线程隔离" class="headerlink" title="2.1.2 线程隔离"></a>2.1.2 线程隔离</h4><p>当一个业务接口响应时间长，而且并发高时，就可能耗尽服务器的线程资源，导致服务内的其它接口受到影响。所以我们必须把这种影响降低，或者缩减影响的范围。<br>为了避免某个接口故障或压力过大导致整个服务不可用，我们可以<strong>限定每个接口可以使用的资源范围</strong>，也就是将其“隔离”起来。</p><p><img src="/img/blogs/java/springcloud/4.2.2.png"></p><h4 id="2-1-3-服务熔断"><a href="#2-1-3-服务熔断" class="headerlink" title="2.1.3 服务熔断"></a>2.1.3 服务熔断</h4><p>统计服务提供方的<strong>异常比例，当比例过高</strong>表明该接口会影响到其它服务，<strong>应该拒绝调用该接口</strong>，而是直接走降级逻辑。<br>服务调用失败后的处理逻辑，根据业务场景，<strong>可以抛出异常，也可以返回友好提示或默认数据</strong>。</p><p><img src="/img/blogs/java/springcloud/4.2.3.png"></p><h4 id="2-1-4-解决雪崩问题的常见方案"><a href="#2-1-4-解决雪崩问题的常见方案" class="headerlink" title="2.1.4 解决雪崩问题的常见方案"></a>2.1.4 解决雪崩问题的常见方案</h4><ul><li>请求限流:<strong>限制流量</strong>在服务可以处理的范围,避免因突发流量而故障</li><li>线程隔离:<strong>控制业务可用的线程数量</strong>,将故障隔离在一定范围</li><li>服务熔断:<strong>将异常比例过高的接口断开</strong>,拒绝所有请求,直接走fallback</li><li>失败处理:<strong>定义fallback逻辑</strong>,让业务失败时不再抛出异常,而是<strong>返回默认数据或友好提示</strong></li></ul><h3 id="2-2-Sentinel-微服务保护技术"><a href="#2-2-Sentinel-微服务保护技术" class="headerlink" title="2.2 Sentinel(微服务保护技术)"></a>2.2 Sentinel(微服务保护技术)</h3><h4 id="2-2-1-Sentinel下载安装和运行"><a href="#2-2-1-Sentinel下载安装和运行" class="headerlink" title="2.2.1 Sentinel下载安装和运行"></a>2.2.1 Sentinel下载安装和运行</h4><p><a href="https://sentinelguard.io/zh-cn/">sentinel官网</a></p><p>在目录文件夹中cmd打开控制台运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -Dserver.port=8090 -Dcsp.sentinel.dashboard.server=localhost:8090 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar<br></code></pre></td></tr></table></figure><p>访问<code>http://localhost:8090</code>页面，就可以看到sentinel的控制台了</p><h4 id="2-2-2-请求限流"><a href="#2-2-2-请求限流" class="headerlink" title="2.2.2 请求限流"></a>2.2.2 请求限流</h4><p>在sentinel配置：</p><p><img src="/img/blogs/java/springcloud/4.2.4.png"></p><h4 id="2-2-3-线程隔离"><a href="#2-2-3-线程隔离" class="headerlink" title="2.2.3 线程隔离"></a>2.2.3 线程隔离</h4><p><strong>修改tomcat连接</strong>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">threads:</span><br>      <span class="hljs-attr">max:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 允许的最大线程数</span><br>    <span class="hljs-attr">accept-count:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 最大排队等待数量</span><br>    <span class="hljs-attr">max-connections:</span> <span class="hljs-number">100</span> <span class="hljs-comment"># 允许的最大连接</span><br></code></pre></td></tr></table></figure><p><img src="/img/blogs/java/springcloud/4.2.5.png"></p><h4 id="2-2-4-服务熔断"><a href="#2-2-4-服务熔断" class="headerlink" title="2.2.4 服务熔断"></a>2.2.4 服务熔断</h4><h5 id="2-2-4-1-Fallback"><a href="#2-2-4-1-Fallback" class="headerlink" title="2.2.4.1 Fallback"></a>2.2.4.1 Fallback</h5><p>超出的QPS上限的请求就只能抛出异常，从而导致购物车的查询失败。但从业务角度来说，即便没有查询到最新的商品信息，购物车也应该展示给用户，用户体验更好。也就是给查询失败设置一个降级处理逻辑。<br>触发限流或熔断后的请求<strong>不一定要直接报错，也可以返回一些默认数据或者友好提示</strong>，用户体验会更好。</p><ul><li>定义降级处理类，实现FallbackFactory:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemClientFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;ItemClient&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ItemClient <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ItemClient</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> List&lt;ItemDTO&gt; <span class="hljs-title function_">queryItemByIds</span><span class="hljs-params">(Collection&lt;Long&gt; ids)</span> &#123;<br>                log.error(<span class="hljs-string">&quot;远程调用ItemClient#queryItemByIds方法出现异常，参数：&#123;&#125;&quot;</span>, ids, cause);<br>                <span class="hljs-comment">// 查询购物车允许失败，查询失败，返回空集合</span><br>                <span class="hljs-keyword">return</span> CollUtils.emptyList();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductStock</span><span class="hljs-params">(List&lt;OrderDetailDTO&gt; items)</span> &#123;<br>                <span class="hljs-comment">// 库存扣减业务需要触发事务回滚，查询失败，抛出异常</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizIllegalException</span>(cause);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-4-2-服务熔断"><a href="#2-2-4-2-服务熔断" class="headerlink" title="2.2.4.2 服务熔断"></a>2.2.4.2 服务熔断</h5><p>Sentinel中的断路器不仅可以统计某个接口的<strong>慢请求比例</strong>，还可以统计<strong>异常请求比例</strong>。当这些比例超出阈值时，就会熔断该接口，即<strong>拦截访问该接口的一切请求</strong>，降级处理；当该接口<strong>恢复正常时，再放行</strong>对于该接口的请求。<br>断路器的工作状态切换有一个状态机来控制：</p><p><img src="/img/blogs/java/springcloud/4.2.6.png"></p><ul><li>closed：<strong>关闭状态，断路器放行所有请求</strong>，并开始统计异常比例、慢请求比例。超过阈值则切换到open状态</li><li>open：<strong>打开状态，服务调用被熔断</strong>，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open状态持续一段时间后会进入half-open状态</li><li>half-open：<strong>半开状态，放行一次请求</strong>，根据执行结果来判断接下来的操作。 <ul><li>请求成功：则切换到closed状态</li><li>请求失败：则切换到open状态</li></ul></li></ul><p><img src="/img/blogs/java/springcloud/4.2.7.png"></p><h2 id="3-分布式事务"><a href="#3-分布式事务" class="headerlink" title="3. 分布式事务"></a>3. 分布式事务</h2><p><strong>每个微服务的本地事务，也可以称为分支事务</strong>。<strong>多个有关联的分支事务一起就组成了全局事务</strong>。我们必须保证整个全局事务同时成功或失败。满足ACID特性。</p><h3 id="3-1-Seata"><a href="#3-1-Seata" class="headerlink" title="3.1 Seata"></a>3.1 Seata</h3><p>Seata是阿里巴巴的开源分布式事务框架<br>解决分布式事务的方法是<strong>找一个统一的事务协调者，与多个分支事务通信，检测每个分支事务的执行状态</strong>，<strong>保证全局事务下的每一个分支事务同时成功或失败</strong>即可。</p><p>在Seata的事务管理中有三个重要的角色：</p><ul><li><strong>TC</strong> (Transaction Coordinator) - <strong>事务协调者</strong>：<strong>维护全局和分支事务的状态</strong>，协调<strong>全局事务提交或回滚</strong>。 </li><li><strong>TM</strong> (Transaction Manager) - <strong>事务管理器</strong>：<strong>定义全局事务的范围</strong>、开始全局事务、提交或回滚全局事务。 </li><li><strong>RM</strong> (Resource Manager) - <strong>资源管理器</strong>：<strong>管理分支事务</strong>，与TC交谈以注册分支事务和报告分支事务的状态，并<strong>驱动分支事务提交或回滚</strong>。</li></ul><p><img src="/img/blogs/java/springcloud/4.3.1.png"></p><ul><li><strong>TC服务则是事务协调中心，是一个独立的微服务，需要单独部署</strong></li><li>TM和RM就会协助微服务，<strong>实现本地分支事务与TC之间交互</strong>，实现事务的提交或回滚。</li></ul><h3 id="3-2-部署TC服务"><a href="#3-2-部署TC服务" class="headerlink" title="3.2 部署TC服务"></a>3.2 部署TC服务</h3><p>维护全局和分支事务的状态，协调全局事务提交或回滚。 </p><h3 id="3-3-微服务集成Seata"><a href="#3-3-微服务集成Seata" class="headerlink" title="3.3 微服务集成Seata"></a>3.3 微服务集成Seata</h3><h4 id="3-3-1-引入依赖"><a href="#3-3-1-引入依赖" class="headerlink" title="3.3.1 引入依赖"></a>3.3.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--统一配置管理--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--读取bootstrap文件--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--seata--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2-配置seata"><a href="#3-3-2-配置seata" class="headerlink" title="3.3.2 配置seata"></a>3.3.2 配置seata</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">registry:</span> <span class="hljs-comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span> <span class="hljs-comment"># 注册中心类型 nacos</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><span class="hljs-string">:8848</span> <span class="hljs-comment"># nacos地址</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># namespace，默认为空</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span> <span class="hljs-comment"># 分组，默认是DEFAULT_GROUP</span><br>      <span class="hljs-attr">application:</span> <span class="hljs-string">seata-server</span> <span class="hljs-comment"># seata服务名称</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>  <span class="hljs-attr">tx-service-group:</span> <span class="hljs-string">hmall</span> <span class="hljs-comment"># 事务组名称</span><br>  <span class="hljs-attr">service:</span><br>    <span class="hljs-attr">vgroup-mapping:</span> <span class="hljs-comment"># 事务组与tc集群的映射关系</span><br>      <span class="hljs-attr">hmall:</span> <span class="hljs-string">&quot;default&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-XA模式"><a href="#3-4-XA模式" class="headerlink" title="3.4 XA模式"></a>3.4 XA模式</h3><p>Seata支持<strong>四种不同的分布式事务解决方案</strong>：</p><ul><li>XA</li><li>TCC</li><li>AT</li><li>SAGA</li></ul><p><img src="/img/blogs/java/springcloud/4.3.2.png"></p><p>RM一阶段的工作：</p><ol><li>注册分支事务到TC</li><li>执行分支业务sql但不提交</li><li>报告执行状态到TC</li></ol><p>TC二阶段的工作：</p><ul><li>TC检测各分支事务执行状态<ol><li>如果都成功，通知所有RM提交事务</li><li>如果有失败，通知所有RM回滚事务</li></ol></li></ul><p>RM二阶段的工作：</p><ul><li>接收TC指令，提交或回滚事务</li></ul><p><strong>优缺点</strong><br>XA模式的优点是什么？</p><ul><li>事务的<strong>强一致性</strong>，满足ACID原则</li><li>常用数据库都支持，实现简单，并且没有代码侵入</li></ul><p>XA模式的缺点是什么？</p><ul><li>因为<strong>一阶段需要锁定数据库资源，等待二阶段结束才释放，性能较差</strong></li><li>依赖关系型数据库实现事务</li></ul><h3 id="3-5-AT模式"><a href="#3-5-AT模式" class="headerlink" title="3.5 AT模式"></a>3.5 AT模式</h3><p>AT模式同样是分阶段提交的事务模型，不过缺弥补了XA模型中资源锁定周期过长的缺陷。</p><p><img src="/img/blogs/java/springcloud/4.3.3.png"></p><p>阶段一RM的工作：</p><ul><li>注册分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态<br>阶段二提交时RM的工作：</li><li>删除undo-log即可<br>阶段二回滚时RM的工作：</li><li>根据undo-log恢复数据到更新前</li></ul><p><img src="/img/blogs/java/springcloud/4.3.4.png"></p><p><strong>AT与XA的区别</strong></p><ul><li>XA模式一阶段不提交事务，锁定资源；AT模式一阶段直接提交，不锁定资源。</li><li>XA模式依赖数据库机制实现回滚；AT模式利用数据快照实现数据回滚。</li><li>XA模式强一致；AT模式最终一致</li></ul><p>可见，AT模式使用起来更加简单，无业务侵入，性能更好。因此企业90%的分布式事务都可以用AT模式来解决。</p><h1 id="五-MQ"><a href="#五-MQ" class="headerlink" title="五. MQ"></a>五. MQ</h1><h2 id="1-认识MQ"><a href="#1-认识MQ" class="headerlink" title="1. 认识MQ"></a>1. 认识MQ</h2><h3 id="1-1-同步调用"><a href="#1-1-同步调用" class="headerlink" title="1.1 同步调用"></a>1.1 同步调用</h3><p>在微服务架构中，同步调用（Synchronous Invocation）通常<strong>指一个服务调用另一个服务时，调用方必须等待被调用方处理完请求并返回响应后，才能继续执行后续逻辑</strong>。</p><p><img src="/img/blogs/java/springcloud/mq.1.png"></p><p><strong>特点</strong>：</p><ul><li><strong>阻塞执行</strong>：调用方在等待返回结果时无法执行其他任务。</li><li>执行顺序严格：<strong>必须按顺序等待上一个任务完成后才能继续下一个任务</strong>。</li><li><strong>适用于短时间执行的任务</strong>：如果被调用的方法执行时间较长，会影响系统的响应速度和并发能力。</li></ul><p><strong>存在的问题</strong>：</p><ul><li>拓展性差：每次有新的需求，现有支付逻辑都要跟着变化，代码经常变动，不符合开闭原则，拓展性不好。</li><li>性能下降：每次远程调用，调用者都是阻塞等待状态。最终整个业务的响应时长就是每次远程调用的执行时长之和</li><li>级联失败(雪崩问题)：当交易服务、通知服务出现故障时，整个事务都会回滚，交易失败。</li></ul><h3 id="1-2-异步调用"><a href="#1-2-异步调用" class="headerlink" title="1.2 异步调用"></a>1.2 异步调用</h3><p>在微服务架构中，异步调用（Asynchronous Invocation）指的是<strong>调用方在调用某个服务时，不需要等待其完成，而是立即返回并继续执行其他任务</strong>。<strong>被调用方在完成处理后</strong>，可以通过回调、轮询、<strong>消息队列</strong>等方式通知调用方。</p><p>异步调用方式其实就是基于消息通知的方式，一般包含三个角色：</p><ul><li>消息发送者：投递消息的人，就是原来的调用方</li><li>消息Broker：管理、暂存、转发消息，你可以把它理解成微信服务器</li><li>消息接收者：接收和处理消息的人，就是原来的服务提供方</li></ul><p><img src="/img/blogs/java/springcloud/mq.2.png"></p><p>在异步调用中，发送者不再直接同步调用接收者的业务接口，而是发送一条消息投递给消息Broker。然后接收者根据自己的需求从消息Broker那里订阅消息。每当发送方发送消息后，接受者都能获取消息并处理。</p><p><img src="/img/blogs/java/springcloud/mq.3.png"></p><p>异步调用的优势包括：</p><ul><li>耦合度更低</li><li>性能更好</li><li>业务拓展性强</li><li>故障隔离，避免级联失败</li></ul><p>异步通信存在下列缺点：</p><ul><li>完全依赖于Broker的可靠性、安全性和性能</li><li>架构复杂，后期维护和调试麻烦</li></ul><h3 id="1-3-常见MQ技术对比"><a href="#1-3-常见MQ技术对比" class="headerlink" title="1.3 常见MQ技术对比"></a>1.3 常见MQ技术对比</h3><table><thead><tr><th>常见MQ</th><th>RabbitMQ</th><th>ActiveMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td><strong>公司&#x2F;社区</strong></td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td><strong>开发语言</strong></td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td><strong>协议支持</strong></td><td>AMQP, XMPP, SMTP, STOMP</td><td>OpenWire, STOMP, REST, XMPP, AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td><strong>可用性</strong></td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td><strong>单机吞吐量</strong></td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td><strong>消息延迟</strong></td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td><strong>消息可靠性</strong></td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><h2 id="2-RabbitMQ"><a href="#2-RabbitMQ" class="headerlink" title="2. RabbitMQ"></a>2. RabbitMQ</h2><h3 id="2-1-RabbitMQ架构"><a href="#2-1-RabbitMQ架构" class="headerlink" title="2.1 RabbitMQ架构"></a>2.1 RabbitMQ架构</h3><ul><li>publisher：<strong>生产者</strong>，也就是发送消息的一方</li><li>consumer：<strong>消费者</strong>，也就是消费消息的一方</li><li>queue：<strong>队列，存储消息</strong>。生产者投递的消息会暂存在消息队列中，等待消费者处理</li><li>exchange：<strong>交换机，负责消息路由</strong>。生产者发送的消息由交换机决定投递到哪个队列。</li><li>virtual host：<strong>虚拟主机，起到数据隔离的作用</strong>。每个虚拟主机相互独立，有各自的exchange、queue</li></ul><p><img src="/img/blogs/java/springcloud/mq.4.png"></p><p>生产者发送到交换机的消息，只会路由到与其绑定的队列，因此仅仅创建队列是不够的，我们还需要将其与交换机绑定</p><h3 id="2-2-数据隔离"><a href="#2-2-数据隔离" class="headerlink" title="2.2 数据隔离"></a>2.2 数据隔离</h3><ul><li>给每个项目创建不同的virtual host，将每个项目的数据隔离。</li><li>给每个项目创建独立的运维账号，将管理权限分离。</li></ul><h2 id="3-SpringAMQP"><a href="#3-SpringAMQP" class="headerlink" title="3. SpringAMQP"></a>3. SpringAMQP</h2><h3 id="3-1-入门案例"><a href="#3-1-入门案例" class="headerlink" title="3.1 入门案例"></a>3.1 入门案例</h3><h4 id="3-1-1-引入依赖"><a href="#3-1-1-引入依赖" class="headerlink" title="3.1.1 引入依赖"></a>3.1.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2-添加配置"><a href="#3-1-2-添加配置" class="headerlink" title="3.1.2 添加配置"></a>3.1.2 添加配置</h4><p>在publisher服务的application.yml中添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span> <span class="hljs-comment"># 你的虚拟机IP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/hmall</span> <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">hmall</span> <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><h4 id="3-1-3-发送消息"><a href="#3-1-3-发送消息" class="headerlink" title="3.1.3 发送消息"></a>3.1.3 发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 队列名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        <span class="hljs-comment">// 消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, spring amqp!&quot;</span>;<br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(queueName, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-4-接收消息"><a href="#3-1-4-接收消息" class="headerlink" title="3.1.4 接收消息"></a>3.1.4 接收消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br>    <span class="hljs-comment">// 利用RabbitListener来声明要监听的队列信息</span><br>    <span class="hljs-comment">// 将来一旦监听的队列中有了消息，就会推送给当前服务，调用当前方法，处理消息。</span><br>    <span class="hljs-comment">// 可以看到方法体中接收的就是消息体的内容</span><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueueMessage</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-WorkQueues模型"><a href="#3-2-WorkQueues模型" class="headerlink" title="3.2 WorkQueues模型"></a>3.2 WorkQueues模型</h3><p>让多个消费者绑定到一个队列，共同消费队列中的消息。可以使用WorkQueues模型，多个消费者共同处理消息处理，消息处理的速度就能大大提高了。</p><p><img src="/img/blogs/java/springcloud/mq.5.png"></p><h4 id="3-2-1-消息发送"><a href="#3-2-1-消息发送" class="headerlink" title="3.2.1 消息发送"></a>3.2.1 消息发送</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * workQueue</span><br><span class="hljs-comment">     * 向队列中不停发送消息，模拟消息堆积。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWorkQueue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, message_&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>        <span class="hljs-comment">// 发送消息，每20毫秒发送一次，相当于每秒发送50条消息</span><br>        rabbitTemplate.convertAndSend(queueName, message + i);<br>        Thread.sleep(<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-消息接收"><a href="#3-2-2-消息接收" class="headerlink" title="3.2.2 消息接收"></a>3.2.2 消息接收</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;work.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWorkQueue1</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">20</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;work.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWorkQueue2</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.err.println(<span class="hljs-string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>消费者1 sleep了20毫秒，相当于每秒钟处理50个消息</li><li>消费者2 sleep了200毫秒，相当于每秒处理5个消息</li></ul><h4 id="3-2-3-测试结果"><a href="#3-2-3-测试结果" class="headerlink" title="3.2.3 测试结果"></a>3.2.3 测试结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">消费者<span class="hljs-number">1</span>接收到消息：【hello, message_0】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00.869555300</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_1】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00.884518</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_2】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00.907454400</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_4】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00.953332100</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_6】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00.997867300</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_8】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.042178700</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_3】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.086478800</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_10】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.087476600</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_12】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.132578300</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_14】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.175851200</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_16】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.218533400</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_18】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.261322900</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_5】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.287003700</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_20】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.304412400</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_22】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.349950100</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_24】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.394533900</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_26】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.439876500</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_28】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.482937800</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_7】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.488977100</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_30】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.526409300</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_32】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.572148</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_34】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.618264800</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_36】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.660780600</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_9】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.689189300</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_38】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.705261</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_40】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.746927300</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_42】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.789835</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_44】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.834393100</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_46】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.875312100</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_11】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.889969500</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_48】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.920702500</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_13】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">02.090725900</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_15】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">02.293060600</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_17】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">02.493748</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_19】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">02.696635100</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_21】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">02.896809700</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_23】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">03.099533400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_25】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">03.301446400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_27】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">03.504999100</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_29】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">03.705702500</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_31】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">03.906601200</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_33】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">04.108118500</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_35】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">04.308945400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_37】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">04.511547700</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_39】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">04.714038400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_41】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">04.916192700</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_43】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">05.116286400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_45】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">05.318055100</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_47】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">05.520656400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_49】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">05.723106700</span><br></code></pre></td></tr></table></figure><p>可以看到消费者1和消费者2竟然每人消费了25条消息：</p><ul><li>消费者1很快完成了自己的25条消息</li><li>消费者2却在缓慢的处理自己的25条消息。<br>也就是说<strong>消息是平均分配给每个消费者</strong>，并没有考虑到消费者的处理能力。导致1个消费者空闲，另一个消费者忙的不可开交。</li></ul><h4 id="3-2-4-能者多劳配置"><a href="#3-2-4-能者多劳配置" class="headerlink" title="3.2.4 能者多劳配置"></a>3.2.4 能者多劳配置</h4><p>修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span><br></code></pre></td></tr></table></figure><p>再次测试发现，由于消费者1处理速度较快，所以处理了更多的消息；消费者2处理速度较慢，只处理了6条消息。而最终总的执行耗时也在1秒左右，大大提升。<br>正所谓能者多劳，这样充分利用了每一个消费者的处理能力，可以有效避免消息积压问题。</p><h4 id="3-2-5-Work模型总结"><a href="#3-2-5-Work模型总结" class="headerlink" title="3.2.5 Work模型总结"></a>3.2.5 Work模型总结</h4><ul><li><strong>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</strong></li><li>通过设置prefetch来控制消费者预取的消息数量</li></ul><h3 id="3-3-交换机"><a href="#3-3-交换机" class="headerlink" title="3.3 交换机"></a>3.3 交换机</h3><p>交换机的类型：</p><ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列。我们最早在控制台使用的正是Fanout交换机</li><li>Direct：订阅，基于RoutingKey（路由key）发送给订阅了消息的队列</li><li>Topic：通配符订阅，与Direct类似，只不过RoutingKey可以使用通配符</li></ul><h4 id="3-3-1-Fanout交换机"><a href="#3-3-1-Fanout交换机" class="headerlink" title="3.3.1 Fanout交换机"></a>3.3.1 Fanout交换机</h4><p><strong>广播</strong>交换机，交换机把消息发送给绑定过的所有队列，每个队列的消费者都能收到消息</p><p><img src="/img/blogs/java/springcloud/mq.6.png"></p><ol><li>消息发送</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFanoutExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hmall.fanout&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, everyone!&quot;</span>;<br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>消息接收</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFanoutExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hmall.fanout&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, everyone!&quot;</span>;<br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><h4 id="3-3-2-Direct交换机"><a href="#3-3-2-Direct交换机" class="headerlink" title="3.3.2 Direct交换机"></a>3.3.2 Direct交换机</h4><p>Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要<strong>指定一个RoutingKey（路由key）</strong></li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 RoutingKey。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的Routing Key进行判断，<strong>只有队列的Routingkey与消息的 Routing key完全一致</strong>，才会接收到消息</li></ul><p><img src="/img/blogs/java/springcloud/mq.7.png"></p><h5 id="3-3-2-1-消息接收"><a href="#3-3-2-1-消息接收" class="headerlink" title="3.3.2.1 消息接收"></a>3.3.2.1 消息接收</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;direct.queue1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue1</span><span class="hljs-params">(String msg)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;direct.queue2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue2</span><span class="hljs-params">(String msg)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-2-2-消息发送"><a href="#3-3-2-2-消息发送" class="headerlink" title="3.3.2.2 消息发送"></a>3.3.2.2 消息发送</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendDirectExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hmall.direct&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;最新报道，哥斯拉是居民自治巨型气球，虚惊一场！&quot;</span>;<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;blue&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时只有<code>blue</code>的消费者才会收到消息，也就是消费者1</p><h5 id="3-3-2-3-总结"><a href="#3-3-2-3-总结" class="headerlink" title="3.3.2.3 总结"></a>3.3.2.3 总结</h5><p>Direct交换机与Fanout交换机的差异？</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li></ul><h4 id="3-3-3-Topic交换机"><a href="#3-3-3-Topic交换机" class="headerlink" title="3.3.3 Topic交换机"></a>3.3.3 Topic交换机</h4><p>Topic类型的Exchange与Direct相比，都是可以<strong>根据RoutingKey把消息路由到不同的队列</strong>。<br>只不过Topic类型Exchange<strong>可以</strong>让队列在绑定BindingKey 的时候<strong>使用通配符</strong>！</p><p>通配符规则：</p><ul><li>#：匹配一个或多个词</li><li>*：匹配不多不少恰好1个词</li></ul><p>举例：</p><ul><li>item.#：能够匹配item.spu.insert 或者 item.spu</li><li>item.*：只能匹配item.spu</li></ul><p><img src="/img/blogs/java/springcloud/mq.8.png"></p><ol><li>消息发送</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * topicExchange</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendTopicExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hmall.topic&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;china.news&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>消息接收</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;topic.queue1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;topic.queue2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Direct交换机与Topic交换机的差异</li></ol><ul><li>Topic交换机接收的消息RoutingKey必须是多个单词，以 . 分割</li><li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li><li>#：代表0个或多个词</li><li>*：代表1个词</li></ul><h3 id="3-4-声明队列和交换机"><a href="#3-4-声明队列和交换机" class="headerlink" title="3.4 声明队列和交换机"></a>3.4 声明队列和交换机</h3><p>Spring提供了基于注解方式来声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-消息转换器-JSON转换器"><a href="#3-5-消息转换器-JSON转换器" class="headerlink" title="3.5 消息转换器(JSON转换器)"></a>3.5 消息转换器(JSON转换器)</h3><p>默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>因此可以使用JSON方式来做序列化和反序列化。</p><h4 id="3-5-1-引入依赖"><a href="#3-5-1-引入依赖" class="headerlink" title="3.5.1 引入依赖"></a>3.5.1 引入依赖</h4><p>在publisher和consumer两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-5-2-配置消息转换器"><a href="#3-5-2-配置消息转换器" class="headerlink" title="3.5.2 配置消息转换器"></a>3.5.2 配置消息转换器</h4><p>在publisher和consumer两个服务的启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">messageConverter</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 1.定义消息转换器</span><br>    <span class="hljs-type">Jackson2JsonMessageConverter</span> <span class="hljs-variable">jackson2JsonMessageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>    <span class="hljs-comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span><br>    jackson2JsonMessageConverter.setCreateMessageIds(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> jackson2JsonMessageConverter;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-3-接收消息"><a href="#3-5-3-接收消息" class="headerlink" title="3.5.3 接收消息"></a>3.5.3 接收消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;object.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueueMessage</span><span class="hljs-params">(Map&lt;String, Object&gt; msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到object.queue消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-MQ消息的可靠性"><a href="#4-MQ消息的可靠性" class="headerlink" title="4. MQ消息的可靠性"></a>4. MQ消息的可靠性</h2><p>在微服务架构中，消息队列（MQ）的可靠性指的是<strong>消息在生产、传输和消费的过程中不会丢失、不会重复、不被篡改，并且能够按预期被正确消费</strong>。确保 MQ 可靠性对于保证业务数据一致性、提高系统稳定性至关重要。</p><p>消息从生产者到消费者的每一步都可能导致消息丢失：</p><ul><li><strong>发送消息时丢失</strong>：<ul><li>生产者发送消息时连接MQ失败</li><li>生产者发送消息到达MQ后未找到Exchange</li><li>生产者发送消息到达MQ的Exchange后，未找到合适的Queue</li><li>消息到达MQ后，处理消息的进程发生异常</li></ul></li><li><strong>MQ导致消息丢失</strong>：<ul><li>消息到达MQ，保存到队列后，尚未消费就突然宕机</li></ul></li><li><strong>消费者处理消息时</strong>：<ul><li>消息接收后尚未处理突然宕机</li><li>消息接收后处理过程中抛出异常</li></ul></li></ul><h3 id="4-1-发送者的可靠性"><a href="#4-1-发送者的可靠性" class="headerlink" title="4.1 发送者的可靠性"></a>4.1 发送者的可靠性</h3><h4 id="4-1-1-生产者重试机制"><a href="#4-1-1-生产者重试机制" class="headerlink" title="4.1.1 生产者重试机制"></a>4.1.1 生产者重试机制</h4><p>生产者发送消息时，出现了网络故障，导致与MQ的连接中断。<br>为了解决这个问题，SpringAMQP提供的消息发送时的<strong>重试机制。即：当RabbitTemplate与MQ连接超时后，多次重试</strong>。</p><p>修改publisher模块的application.yaml文件，添加下面的内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">connection-timeout:</span> <span class="hljs-string">1s</span> <span class="hljs-comment"># 设置MQ的连接超时时间</span><br>    <span class="hljs-attr">template:</span><br>      <span class="hljs-attr">retry:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启超时重试机制</span><br>        <span class="hljs-attr">initial-interval:</span> <span class="hljs-string">1000ms</span> <span class="hljs-comment"># 失败后的初始等待时间</span><br>        <span class="hljs-attr">multiplier:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 失败后下次的等待时长倍数，下次等待时长 = initial-interval * multiplier</span><br>        <span class="hljs-attr">max-attempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 最大重试次数</span><br></code></pre></td></tr></table></figure><p>注意：当网络不稳定的时候，利用重试机制可以有效提高消息发送的成功率。不过SpringAMQP提供的<strong>重试机制是阻塞式的重试</strong>，也就是说多次重试等待的过程中，当前线程是被阻塞的。<br>如果对于业务性能有要求，建议禁用重试机制。如果一定要使用，请合理配置等待时长和重试次数，当然也可以考虑使用异步线程来执行发送消息的代码。</p><h4 id="4-1-2-生产者确认机制-一般情况下不建议开启"><a href="#4-1-2-生产者确认机制-一般情况下不建议开启" class="headerlink" title="4.1.2 生产者确认机制(一般情况下不建议开启)"></a>4.1.2 生产者确认机制(一般情况下不建议开启)</h4><p>RabbitMQ提供了生产者消息确认机制，包括Publisher Confirm和Publisher Return两种。在开启确认机制的情况下，当生产者发送消息给MQ后，MQ会根据消息处理的情况返回不同的回执。</p><p><img src="/img/blogs/java/springcloud/mq.9.png"></p><p>总结：</p><ul><li>当消息投递到MQ，但是路由失败时，通过Publisher Return返回异常信息，同时返回ack的确认信息，代表投递成功</li><li>临时消息投递到了MQ，并且入队成功，返回ACK，告知投递成功</li><li>持久消息投递到了MQ，并且入队完成持久化，返回ACK ，告知投递成功</li><li>其它情况都会返回NACK，告知投递失败</li></ul><h5 id="4-1-2-1-开启生产者确认"><a href="#4-1-2-1-开启生产者确认" class="headerlink" title="4.1.2.1 开启生产者确认"></a>4.1.2.1 开启生产者确认</h5><p>在publisher模块的application.yaml中添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">correlated</span> <span class="hljs-comment"># 开启publisher confirm机制，并设置confirm类型</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启publisher return机制</span><br></code></pre></td></tr></table></figure><p>这里publisher-confirm-type有三种模式可选：</p><ul><li>none：关闭confirm机制</li><li>simple：同步阻塞等待MQ的回执</li><li>correlated：MQ异步回调返回回执(推荐)</li></ul><h5 id="4-1-2-2-定义ReturnCallback"><a href="#4-1-2-2-定义ReturnCallback" class="headerlink" title="4.1.2.2 定义ReturnCallback"></a>4.1.2.2 定义ReturnCallback</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        rabbitTemplate.setReturnsCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RabbitTemplate</span>.ReturnsCallback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(ReturnedMessage returned)</span> &#123;<br>                log.error(<span class="hljs-string">&quot;触发return callback,&quot;</span>);<br>                log.debug(<span class="hljs-string">&quot;exchange: &#123;&#125;&quot;</span>, returned.getExchange());<br>                log.debug(<span class="hljs-string">&quot;routingKey: &#123;&#125;&quot;</span>, returned.getRoutingKey());<br>                log.debug(<span class="hljs-string">&quot;message: &#123;&#125;&quot;</span>, returned.getMessage());<br>                log.debug(<span class="hljs-string">&quot;replyCode: &#123;&#125;&quot;</span>, returned.getReplyCode());<br>                log.debug(<span class="hljs-string">&quot;replyText: &#123;&#125;&quot;</span>, returned.getReplyText());<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-1-2-3-定义ConfirmCallback"><a href="#4-1-2-3-定义ConfirmCallback" class="headerlink" title="4.1.2.3 定义ConfirmCallback"></a>4.1.2.3 定义ConfirmCallback</h5><p>CorrelationData中包含两个核心的东西：</p><ul><li>id：消息的唯一标示，MQ对不同的消息的回执以此做判断，避免混淆</li><li>SettableListenableFuture：回执结果的Future对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPublisherConfirm</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.创建CorrelationData</span><br>    <span class="hljs-type">CorrelationData</span> <span class="hljs-variable">cd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>();<br>    <span class="hljs-comment">// 2.给Future添加ConfirmCallback</span><br>    cd.getFuture().addCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ListenableFutureCallback</span>&lt;CorrelationData.Confirm&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailure</span><span class="hljs-params">(Throwable ex)</span> &#123;<br>            <span class="hljs-comment">// 2.1.Future发生异常时的处理逻辑，基本不会触发</span><br>            log.error(<span class="hljs-string">&quot;send message fail&quot;</span>, ex);<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(CorrelationData.Confirm result)</span> &#123;<br>            <span class="hljs-comment">// 2.2.Future接收到回执的处理逻辑，参数中的result就是回执内容</span><br>            <span class="hljs-keyword">if</span>(result.isAck())&#123; <span class="hljs-comment">// result.isAck()，boolean类型，true代表ack回执，false 代表 nack回执</span><br>                log.debug(<span class="hljs-string">&quot;发送消息成功，收到 ack!&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// result.getReason()，String类型，返回nack时的异常描述</span><br>                log.error(<span class="hljs-string">&quot;发送消息失败，收到 nack, reason : &#123;&#125;&quot;</span>, result.getReason());<br>            &#125;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 3.发送消息</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;hmall.direct&quot;</span>, <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>, cd);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-MQ的可靠性"><a href="#4-2-MQ的可靠性" class="headerlink" title="4.2 MQ的可靠性"></a>4.2 MQ的可靠性</h3><p>消息到达MQ以后，因为<strong>MQ是基于内存存储的，如果内存空间被消息占满，如果MQ不能及时保存，也会导致消息丢失</strong><br>有两种解决方法：</p><ul><li>数据持久化</li><li>LazyQueue(推荐)</li></ul><h4 id="4-2-1-数据持久化"><a href="#4-2-1-数据持久化" class="headerlink" title="4.2.1 数据持久化"></a>4.2.1 数据持久化</h4><p>为了提升性能，默认情况下MQ的数据都是在内存存储的临时数据，重启后就会消失。为了保证数据的可靠性，必须配置数据持久化，包括：</p><ul><li><strong>交换机持久化</strong></li><li><strong>队列持久化</strong></li><li><strong>消息持久化</strong></li></ul><p>在控制台配置相关的持久化模式，即可开启数据持久化</p><h4 id="4-2-2-LazyQueue惰性队列"><a href="#4-2-2-LazyQueue惰性队列" class="headerlink" title="4.2.2 LazyQueue惰性队列"></a>4.2.2 LazyQueue惰性队列</h4><p>从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的模式，也就是惰性队列。惰性队列的特征如下：</p><ul><li><strong>接收到消息后直接存入磁盘而非内存</strong></li><li>消费者要<strong>消费消息时才会从磁盘中读取并加载到内存</strong>（也就是懒加载）</li><li>支持数百万条的消息存储</li></ul><p>而在3.12版本之后，LazyQueue已经成为所有队列的默认格式。因此官方推荐升级MQ为3.12版本或者所有队列都设置为LazyQueue模式。</p><h3 id="4-3-消费者的可靠性"><a href="#4-3-消费者的可靠性" class="headerlink" title="4.3 消费者的可靠性"></a>4.3 消费者的可靠性</h3><p>消息投递给消费者并不代表就一定被正确消费了，可能出现的故障有很多，比如：</p><ul><li>消息投递的过程中出现了<strong>网络故障</strong></li><li><strong>消费者</strong>接收到消息后突然<strong>宕机</strong></li><li>消费者接收到消息后，<strong>因处理不当导致异常</strong></li></ul><h4 id="4-3-1-消费者确认机制"><a href="#4-3-1-消费者确认机制" class="headerlink" title="4.3.1 消费者确认机制"></a>4.3.1 消费者确认机制</h4><p>消费者处理消息结束后，应该向RabbitMQ发送一个回执，告知RabbitMQ自己消息处理状态。回执有三种可选值：</p><ul><li>ack：<strong>成功处理消息</strong>，RabbitMQ<strong>从队列中删除该消息</strong></li><li>nack：<strong>消息处理失败</strong>，RabbitMQ需要<strong>再次投递消息</strong></li><li>reject：消息处理失败并拒绝该消息，RabbitMQ从队列中删除该消息</li></ul><p><img src="/img/blogs/java/springcloud/mq.10.png"></p><p>SpringAMQP帮我们实现了消息确认。并允许我们通过配置文件设置ACK处理方式，有三种模式：</p><ul><li>none：不处理。即消息投递给消费者后立刻ack，消息会立刻从MQ删除。非常不安全，不建议使用</li><li>manual：手动模式。需要自己在业务代码中调用api，发送ack或reject，存在业务入侵，但更灵活</li><li>auto：自动模式。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回ack.  当业务出现异常时，根据异常判断返回不同结果：<ul><li>如果是业务异常，会自动返回nack；</li><li>如果是消息处理或校验异常，自动返回reject;</li></ul></li></ul><p>修改SpringAMQP的ACK处理方式:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">none</span> <span class="hljs-comment"># 不做处理</span><br></code></pre></td></tr></table></figure><h4 id="4-3-2-失败重试机制"><a href="#4-3-2-失败重试机制" class="headerlink" title="4.3.2 失败重试机制"></a>4.3.2 失败重试机制</h4><p>当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者。如果消费者再次执行依然出错，消息会再次requeue到队列，再次投递，直到消息处理成功为止。<br>极端情况就是消费者一直无法执行成功，那么<strong>消息requeue就会无限循环</strong>，导致mq的消息处理飙升，带来不必要的压力。</p><p>修改consumer服务的application.yml文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">retry:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启消费者失败重试</span><br>          <span class="hljs-attr">initial-interval:</span> <span class="hljs-string">1000ms</span> <span class="hljs-comment"># 初识的失败等待时长为1秒</span><br>          <span class="hljs-attr">multiplier:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span><br>          <span class="hljs-attr">max-attempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 最大重试次数</span><br>          <span class="hljs-attr">stateless:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span><br></code></pre></td></tr></table></figure><ul><li><strong>重试达到最大次数后，Spring会返回reject，消息会被丢弃</strong></li></ul><h4 id="4-3-3-失败处理策略"><a href="#4-3-3-失败处理策略" class="headerlink" title="4.3.3 失败处理策略"></a>4.3.3 失败处理策略</h4><p>Spring允许我们自定义重试次数耗尽后的消息处理策略，这个策略是由MessageRecovery接口来定义的，它有3个不同实现：</p><ul><li>RejectAndDontRequeueRecoverer：<strong>重试耗尽后，直接reject，丢弃消息</strong>。默认就是这种方式 </li><li>ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队 </li><li>RepublishMessageRecoverer：<strong>重试耗尽后，将失败消息投递到指定的交换机</strong> (推荐)</li></ul><ul><li>RepublishMessageRecoverer: 失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</li></ul><p>在consumer服务中定义处理失败消息的交换机和队列,定义一个RepublishMessageRecoverer，关联队列和交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnProperty(name = &quot;spring.rabbitmq.listener.simple.retry.enabled&quot;, havingValue = &quot;true&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorMessageConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">errorMessageExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(<span class="hljs-string">&quot;error.direct&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">errorQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;error.queue&quot;</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">errorBinding</span><span class="hljs-params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageRecoverer <span class="hljs-title function_">republishMessageRecoverer</span><span class="hljs-params">(RabbitTemplate rabbitTemplate)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="hljs-string">&quot;error.direct&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-业务幂等性"><a href="#4-4-业务幂等性" class="headerlink" title="4.4 业务幂等性"></a>4.4 业务幂等性</h3><p>在程序开发中，则是指<strong>同一个业务，执行一次或多次对业务状态的影响是一致的</strong>。例如：</p><ul><li>根据id删除数据</li><li>查询数据</li><li>新增数据</li></ul><p>数据的更新往往不是幂等的，如果<strong>重复执行可能造成不一样的后果</strong>。比如：</p><ul><li>取消订单，恢复库存的业务。如果多次恢复就会出现库存重复增加的情况</li><li>退款业务。重复退款对商家而言会有经济损失。</li></ul><p>所以，<strong>我们要尽可能避免业务被重复执行</strong>。</p><h4 id="4-4-1-唯一消息ID"><a href="#4-4-1-唯一消息ID" class="headerlink" title="4.4.1 唯一消息ID"></a>4.4.1 唯一消息ID</h4><ol><li>每一条消息都生成一个唯一的id，与消息一起投递给消费者。</li><li>消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库</li><li><strong>如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理</strong>。</li></ol><p>SpringAMQP的MessageConverter自带了MessageID的功能，我们只要开启这个功能即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">messageConverter</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 1.定义消息转换器</span><br>    <span class="hljs-type">Jackson2JsonMessageConverter</span> <span class="hljs-variable">jjmc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>    <span class="hljs-comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span><br>    jjmc.setCreateMessageIds(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> jjmc;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-2-业务判断"><a href="#4-4-2-业务判断" class="headerlink" title="4.4.2 业务判断"></a>4.4.2 业务判断</h4><p>业务判断就是基于业务本身的逻辑或状态来判断是否是重复的请求或消息。<br>当前案例中，处理消息的业务逻辑是把订单状态从未支付修改为已支付。因此我们就可以<strong>在执行业务时判断订单状态是否是未支付</strong>，如果不是则证明订单已经被处理过，无需重复处理。</p><p><img src="/img/blogs/java/springcloud/mq.11.png"></p><p>以支付修改订单的业务为例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">markOrderPaySuccess</span><span class="hljs-params">(Long orderId)</span> &#123;<br>    <span class="hljs-comment">// 1.查询订单</span><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">old</span> <span class="hljs-operator">=</span> getById(orderId);<br>    <span class="hljs-comment">// 2.判断订单状态</span><br>    <span class="hljs-keyword">if</span> (old == <span class="hljs-literal">null</span> || old.getStatus() != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 订单不存在或者订单状态不是1，放弃处理</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 3.尝试更新订单</span><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>    order.setId(orderId);<br>    order.setStatus(<span class="hljs-number">2</span>);<br>    order.setPayTime(LocalDateTime.now());<br>    updateById(order);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-兜底方案"><a href="#4-5-兜底方案" class="headerlink" title="4.5 兜底方案"></a>4.5 兜底方案</h3><p>虽然我们利用各种机制尽可能增加了消息的可靠性，但也不好说能保证消息100%的可靠。万一真的MQ通知失败该怎么办呢？有没有其它兜底方案，能够确保订单的支付状态一致呢？</p><p>既然MQ通知不一定发送到交易服务，那么<strong>交易服务就必须自己主动去查询支付状态</strong>。这样即便支付服务的MQ通知失败，我们依然能<strong>通过主动查询来保证订单状态的一致</strong>。</p><p><img src="/img/blogs/java/springcloud/mq.12.png"></p><p>通常我们采取的措施就是利用<strong>定时任务定期查询</strong>，例如每隔20秒就查询一次，<strong>并判断支付状态</strong>。如果发现订单已经支付，则立刻更新订单状态为已支付即可。</p><h3 id="4-6-支付服务与交易服务之间的订单状态一致性是如何保证的？"><a href="#4-6-支付服务与交易服务之间的订单状态一致性是如何保证的？" class="headerlink" title="4.6 支付服务与交易服务之间的订单状态一致性是如何保证的？"></a>4.6 支付服务与交易服务之间的订单状态一致性是如何保证的？</h3><ul><li>首先，支付服务会正在用户支付成功以后利用MQ消息通知交易服务，完成订单状态同步。</li><li>其次，为了保证MQ消息的可靠性，我们采用了生产者确认机制、消费者确认、消费者失败重试等策略，确保消息投递的可靠性</li><li>最后，我们还在交易服务设置了定时任务，定期查询订单支付状态。这样即便MQ通知失败，还可以利用定时任务作为兜底方案，确保订单支付状态的最终一致性。</li></ul><h2 id="5-延迟消息"><a href="#5-延迟消息" class="headerlink" title="5. 延迟消息"></a>5. 延迟消息</h2><p>对于超过一定时间未支付的订单，应该立刻取消订单并释放占用的库存。像这种<strong>在一段时间以后才执行的任务，我们称之为延迟任务</strong>，而要实现延迟任务，最简单的方案就是利用MQ的延迟消息了。</p><p>在RabbitMQ中实现延迟消息也有两种方案：</p><ul><li>死信交换机+TTL</li><li>延迟消息插件(推荐)</li></ul><h3 id="5-1-死信交换机"><a href="#5-1-死信交换机" class="headerlink" title="5.1 死信交换机"></a>5.1 死信交换机</h3><p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p><ul><li>消费者使用basic.reject或 basic.nack声明消费失败，并且消息的requeue参数设置为false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息满了，无法投递</li></ul><p><img src="/img/blogs/java/springcloud/mq.13.png"></p><ul><li>利用 TTL 让消息在普通队列中延迟一段时间。</li><li>超时后，消息进入死信交换机，再转发到真正的目标队列。</li><li>消费者监听目标队列，延迟时间一到，才会收到消息。</li></ul><h3 id="5-2-DelayExchange插件-推荐"><a href="#5-2-DelayExchange插件-推荐" class="headerlink" title="5.2 DelayExchange插件(推荐)"></a>5.2 DelayExchange插件(推荐)</h3><p>RabbitMQ社区提供了一个延迟消息插件来实现相同的效果</p><p><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange">插件下载地址</a></p><p><strong>声明延迟交换机</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        value = @Queue(name = &quot;delay.queue&quot;, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        exchange = @Exchange(name = &quot;delay.direct&quot;, delayed = &quot;true&quot;),</span><br><span class="hljs-meta">        key = &quot;delay&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDelayMessage</span><span class="hljs-params">(String msg)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;接收到delay.queue的延迟消息：&#123;&#125;&quot;</span>, msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>发送延迟消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPublisherDelayMessage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.创建消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, delayed message&quot;</span>;<br>    <span class="hljs-comment">// 2.发送消息，利用消息后置处理器添加消息头</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;delay.direct&quot;</span>, <span class="hljs-string">&quot;delay&quot;</span>, message, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessagePostProcessor</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Message <span class="hljs-title function_">postProcessMessage</span><span class="hljs-params">(Message message)</span> <span class="hljs-keyword">throws</span> AmqpException &#123;<br>            <span class="hljs-comment">// 添加延迟消息属性</span><br>            message.getMessageProperties().setDelay(<span class="hljs-number">5000</span>);<br>            <span class="hljs-keyword">return</span> message;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>如果消息的延迟时间设置较长，可能会导致堆积的延迟消息非常多，会带来较大的CPU开销，不建议设置延迟时间过长的延迟消息。</li></ul><h3 id="5-3-超时订单问题"><a href="#5-3-超时订单问题" class="headerlink" title="5.3 超时订单问题"></a>5.3 超时订单问题</h3><p>用户下单完成后,发送15分钟延迟消息,在15分钟后接收消息,检查支付状态:</p><ul><li>已支付:更新订单状态为已支付</li><li>未支付:更新订单状态为关闭订单,恢复商品库存</li></ul><p><img src="/img/blogs/java/springcloud/mq.14.png"></p><h1 id="六-Elasticsearch"><a href="#六-Elasticsearch" class="headerlink" title="六. Elasticsearch"></a>六. Elasticsearch</h1><h2 id="1-Elasticsearch"><a href="#1-Elasticsearch" class="headerlink" title="1. Elasticsearch"></a>1. Elasticsearch</h2><p>Elasticsearch是由elastic公司开发的一套搜索引擎技术</p><h3 id="1-1-倒排索引"><a href="#1-1-倒排索引" class="headerlink" title="1.1 倒排索引"></a>1.1 倒排索引</h3><p>倒排索引的概念是基于MySQL这样的正向索引而言的</p><h4 id="1-1-1-正向索引"><a href="#1-1-1-正向索引" class="headerlink" title="1.1.1 正向索引"></a>1.1.1 正向索引</h4><ul><li>正向索引（Forward Index）通常指的是数据库索引按照字段的自然顺序进行存储和查找的索引方式。在 MySQL 中，常见的正向索引主要是B+ 树索引。</li><li>当搜索条件为<strong>模糊匹配时，由于索引无法生效</strong>，导致<strong>从索引查询退化为全表扫描</strong>，效率很差。</li></ul><h4 id="1-1-2-倒排索引"><a href="#1-1-2-倒排索引" class="headerlink" title="1.1.2 倒排索引"></a>1.1.2 倒排索引</h4><p>两个概念：</p><ul><li>文档（Document）：用来搜索的数据，其中的<strong>每一条数据就是一个文档</strong>。例如一个网页、一个商品信息</li><li>词条（Term）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li></ul><p><strong>创建倒排索引</strong>:</p><p><img src="/img/blogs/java/springcloud/es.1.png"></p><p>倒排索引的<strong>搜索流程</strong>:</p><p><img src="/img/blogs/java/springcloud/es.2.png"></p><p>流程描述：</p><ol><li>用户输入条件”华为手机”进行搜索。</li><li>对用户输入条件分词，得到词条：华为、手机。</li><li>拿着词条在倒排索引中查找（由于词条有索引，查询效率很高），即可得到包含词条的文档id：1、2、3。</li><li>拿着文档id到正向索引中查找具体文档即可（由于id也有索引，查询效率也很高）。</li></ol><h4 id="1-1-3-正向和倒排"><a href="#1-1-3-正向和倒排" class="headerlink" title="1.1.3 正向和倒排"></a>1.1.3 正向和倒排</h4><ul><li>正向索引是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。 </li><li>而倒排索引则相反，是<strong>先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档</strong>。是根据词条找文档的过程。</li></ul><h3 id="1-2-IK分词器"><a href="#1-2-IK分词器" class="headerlink" title="1.2 IK分词器"></a>1.2 IK分词器</h3><p>地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>IK分词器包含两种模式：</p><ul><li>ik_smart：智能语义切分 </li><li>ik_max_word：最细粒度切分</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员学习java太棒了&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;程序员&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;学习&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ENGLISH&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;太棒了&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>拓展词典</strong>:</p><ol><li>打开IK分词器config目录</li><li>在IKAnalyzer.cfg.xml配置文件内容添加</li><li>在IK分词器的config目录新建一个 ext.dic，可以参考config目录下复制一个配置文件进行修改</li><li>重启elasticsearch</li></ol><h3 id="1-3-ES基础概念"><a href="#1-3-ES基础概念" class="headerlink" title="1.3 ES基础概念"></a>1.3 ES基础概念</h3><p>elasticsearch是<strong>面向文档（Document）存储</strong>的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中</p><p><img src="/img/blogs/java/springcloud/es.3.png"></p><p>将类型相同的文档集中在一起管理，称为索引（Index）</p><p><img src="/img/blogs/java/springcloud/es.4.png"></p><p><strong>MySQL和ES的对比</strong>：</p><p><img src="/img/blogs/java/springcloud/es.5.png"></p><ul><li>Mysql：擅长事务类型操作，可以确保数据的安全和一致性 </li><li>Elasticsearch：擅长海量数据的搜索、分析、计算<br>两者结合使用：</li><li>对安全性要求较高的写操作，使用mysql实现</li><li>对查询性能要求较高的搜索需求，使用elasticsearch实现</li><li>两者再基于某种方式，实现数据的同步，保证一致性</li></ul><h2 id="2-索引库操作"><a href="#2-索引库操作" class="headerlink" title="2. 索引库操作"></a>2. 索引库操作</h2><p>Index就类似数据库表，Mapping映射就类似表的结构。我们要向es中存储数据，必须先创建Index和Mapping</p><h3 id="2-1-Mapping映射属性"><a href="#2-1-Mapping映射属性" class="headerlink" title="2.1 Mapping映射属性"></a>2.1 Mapping映射属性</h3><p>Mapping是对索引库中文档的约束，常见的Mapping属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有： <ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</li><li>数值：long、integer、short、byte、double、float、</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul><h3 id="2-2-索引库的增删改查"><a href="#2-2-索引库的增删改查" class="headerlink" title="2.2 索引库的增删改查"></a>2.2 索引库的增删改查</h3><p>Elasticsearch采用的是Restful风格的API，而且请求参数也都采用JSON风格</p><table><thead><tr><th>接口类型</th><th>请求方式</th><th>请求路径</th><th>请求参数</th></tr></thead><tbody><tr><td>查询用户</td><td>GET</td><td>&#x2F;users&#x2F;{id}</td><td>路径中的 id</td></tr><tr><td>新增用户</td><td>POST</td><td>&#x2F;users</td><td>json 格式 user 对象</td></tr><tr><td>修改用户</td><td>PUT</td><td>&#x2F;users&#x2F;{id}</td><td>路径中的 id<br>json 格式对象</td></tr><tr><td>删除用户</td><td>DELETE</td><td>&#x2F;users&#x2F;{id}</td><td>路径中的 id</td></tr></tbody></table><h4 id="2-2-1-创建索引库"><a href="#2-2-1-创建索引库" class="headerlink" title="2.2.1 创建索引库"></a>2.2.1 创建索引库</h4><p>基本语法：</p><ul><li>请求方式：PUT</li><li>请求路径：&#x2F;索引库名，可以自定义</li><li>请求参数：mapping映射</li></ul><p><strong>格式</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名称<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;字段名2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;字段名3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;子字段&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// ...略</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"># PUT /heima<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-查询、删除索引库"><a href="#2-2-2-查询、删除索引库" class="headerlink" title="2.2.2 查询、删除索引库"></a>2.2.2 查询、删除索引库</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /索引库名<br>DELETE /索引库名<br></code></pre></td></tr></table></figure><h4 id="2-2-3-修改索引库"><a href="#2-2-3-修改索引库" class="headerlink" title="2.2.3 修改索引库"></a>2.2.3 修改索引库</h4><p>索引库一旦创建，无法修改mapping。但是却允许添加新的字段到mapping中</p><p>语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;新字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /heima/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-文档操作"><a href="#3-文档操作" class="headerlink" title="3. 文档操作"></a>3. 文档操作</h2><p>有了索引库，接下来就可以向索引库的文档中添加数据了。</p><h3 id="3-1-新增文档"><a href="#3-1-新增文档" class="headerlink" title="3.1 新增文档"></a>3.1 新增文档</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /索引库名/_doc/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;字段1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;子属性1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;子属性2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值4&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-查询文档"><a href="#3-2-查询文档" class="headerlink" title="3.2 查询文档"></a>3.2 查询文档</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名称<span class="hljs-punctuation">&#125;</span>/_doc/<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-删除文档"><a href="#3-3-删除文档" class="headerlink" title="3.3 删除文档"></a>3.3 删除文档</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_doc/id值<br></code></pre></td></tr></table></figure><h3 id="3-4-修改文档"><a href="#3-4-修改文档" class="headerlink" title="3.4 修改文档"></a>3.4 修改文档</h3><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档</li><li>局部修改：修改文档中的部分字段</li></ul><h4 id="3-4-1-全量修改"><a href="#3-4-1-全量修改" class="headerlink" title="3.4.1 全量修改"></a>3.4.1 全量修改</h4><p>全量修改是覆盖原来的文档，其本质是两步操作：</p><ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_doc/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;字段1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// ... 略</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-4-2-局部修改"><a href="#3-4-2-局部修改" class="headerlink" title="3.4.2 局部修改"></a>3.4.2 局部修改</h4><p>局部修改是只修改指定id匹配的文档中的部分字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_update/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>         <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;新的值&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-5-批处理"><a href="#3-5-批处理" class="headerlink" title="3.5 批处理"></a>3.5 批处理</h3><p>批处理采用POST请求，基本语法如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _bulk<br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;field1&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value1&quot;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;delete&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;create&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;field1&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value3&quot;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;update&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;doc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;field2&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value2&quot;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>index代表新增操作<ul><li>_index：指定索引库名</li><li>_id指定要操作的文档id</li><li>{ “field1” : “value1” }：则是要新增的文档内容</li></ul></li><li>delete代表删除操作<ul><li>_index：指定索引库名</li><li>_id指定要操作的文档id</li></ul></li><li>update代表更新操作<ul><li>_index：指定索引库名</li><li>_id指定要操作的文档id</li><li>{ “doc” : {“field2” : “value2”} }：要更新的文档字段</li></ul></li></ul><h3 id="3-6-案例"><a href="#3-6-案例" class="headerlink" title="3.6 案例"></a>3.6 案例</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs json"># 新增文档<br>POST /heima/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员Java讲师&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zy@itcast.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 查询文档<br>GET /heima/_doc/<span class="hljs-number">1</span><br><br># 删除文档<br>DELETE /heima/_doc/<span class="hljs-number">1</span><br><br># 全量修改文档<br>PUT /heima/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员高级Java讲师&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zy@itcast.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 局部修改文档<br>POST /heima/_update/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ZhaoYun@itcast.cn&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 批量新增文档<br>POST /_bulk<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;heima&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员C++讲师&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ww@itcast.cn&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;五&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;王&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;heima&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员前端讲师&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhangsan@itcast.cn&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;三&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;张&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br># 批量删除文档<br>POST /_bulk<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;delete&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;heima&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;delete&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;heima&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-JavaRestClient"><a href="#4-JavaRestClient" class="headerlink" title="4. JavaRestClient"></a>4. JavaRestClient</h2><h3 id="4-1-客户端初始化RestClient"><a href="#4-1-客户端初始化RestClient" class="headerlink" title="4.1 客户端初始化RestClient"></a>4.1 客户端初始化RestClient</h3><ol><li>在item-service模块中引入es的RestHighLevelClient依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>因为SpringBoot默认的ES版本是7.17.10，所以我们需要覆盖默认的ES版本：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>初始化RestHighLevelClient：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RestHighLevelClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>        HttpHost.create(<span class="hljs-string">&quot;http://192.168.150.101:9200&quot;</span>)<br>));<br></code></pre></td></tr></table></figure><h3 id="4-2-创建索引库"><a href="#4-2-创建索引库" class="headerlink" title="4.2 创建索引库"></a>4.2 创建索引库</h3><p>要实现对商品搜索，所以我们需要将商品添加到Elasticsearch中，不过需要根据搜索业务的需求来设定索引库结构，而不是一股脑的把MySQL数据写入Elasticsearch.</p><h4 id="4-2-1-商品Mapping映射"><a href="#4-2-1-商品Mapping映射" class="headerlink" title="4.2.1 商品Mapping映射"></a>4.2.1 商品Mapping映射</h4><p>结合数据库表结构，字段对应的mapping映射属性如下：</p><p><img src="/img/blogs/java/springcloud/es.6.png"></p><p>索引库文档结构:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /items<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;stock&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sold&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commentCount&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;isAD&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;boolean&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-2-在java中创建索引库"><a href="#4-2-2-在java中创建索引库" class="headerlink" title="4.2.2 在java中创建索引库"></a>4.2.2 在java中创建索引库</h4><ol><li>创建Request对象。<br>  因为是创建索引库的操作，因此Request是CreateIndexRequest。</li><li>添加请求参数<br>  其实就是Json格式的Mapping映射参数。因为json字符串很长，这里是定义了静态字符串常量MAPPING_TEMPLATE，让代码看起来更加优雅。</li><li>发送请求<br>  client.indices()方法的返回值是IndicesClient类型，封装了所有与索引库操作有关的方法。例如创建索引、删除索引、判断索引是否存在等</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">CreateIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateIndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    request.source(MAPPING_TEMPLATE, XContentType.JSON);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.indices().create(request, RequestOptions.DEFAULT);<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MAPPING_TEMPLATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;stock\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;image\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;category\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;sold\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;commentCount\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;isAD\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;boolean\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;updateTime\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;date\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="4-3-在java中删除和查询索引库"><a href="#4-3-在java中删除和查询索引库" class="headerlink" title="4.3 在java中删除和查询索引库"></a>4.3 在java中删除和查询索引库</h3><h4 id="4-3-1-删除索引库"><a href="#4-3-1-删除索引库" class="headerlink" title="4.3.1 删除索引库"></a>4.3.1 删除索引库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">DeleteIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteIndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    client.indices().delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-2-查询索引库"><a href="#4-3-2-查询索引库" class="headerlink" title="4.3.2 查询索引库"></a>4.3.2 查询索引库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testExistsIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">GetIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetIndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 3.输出</span><br>    System.err.println(exists ? <span class="hljs-string">&quot;索引库已经存在！&quot;</span> : <span class="hljs-string">&quot;索引库不存在！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-文档操作"><a href="#4-4-文档操作" class="headerlink" title="4.4 文档操作"></a>4.4 文档操作</h3><h4 id="4-4-1-新增文档"><a href="#4-4-1-新增文档" class="headerlink" title="4.4.1 新增文档"></a>4.4.1 新增文档</h4><ol><li>创建Request对象，这里是IndexRequest，因为添加文档就是创建倒排索引的过程</li><li>准备请求参数，本例中就是Json文档</li><li>发送请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.根据id查询商品数据</span><br>    <span class="hljs-type">Item</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> itemService.getById(<span class="hljs-number">100002644680L</span>);<br>    <span class="hljs-comment">// 2.转换为文档类型</span><br>    <span class="hljs-type">ItemDoc</span> <span class="hljs-variable">itemDoc</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(item, ItemDoc.class);<br>    <span class="hljs-comment">// 3.将ItemDTO转json</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> JSONUtil.toJsonStr(itemDoc);<br><br>    <span class="hljs-comment">// 1.准备Request对象</span><br>    <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>).id(itemDoc.getId());<br>    <span class="hljs-comment">// 2.准备Json文档</span><br>    request.source(doc, XContentType.JSON);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.index(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-2-查询文档"><a href="#4-4-2-查询文档" class="headerlink" title="4.4.2 查询文档"></a>4.4.2 查询文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetDocumentById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request对象</span><br>    <span class="hljs-type">GetRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetRequest</span>(<span class="hljs-string">&quot;items&quot;</span>).id(<span class="hljs-string">&quot;100002644680&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    <span class="hljs-type">GetResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.get(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 3.获取响应结果中的source</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> response.getSourceAsString();<br>    <br>    <span class="hljs-type">ItemDoc</span> <span class="hljs-variable">itemDoc</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, ItemDoc.class);<br>    System.out.println(<span class="hljs-string">&quot;itemDoc= &quot;</span> + ItemDoc);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-3-删除文档"><a href="#4-4-3-删除文档" class="headerlink" title="4.4.3 删除文档"></a>4.4.3 删除文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request，两个参数，第一个是索引库名，第二个是文档id</span><br>    <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(<span class="hljs-string">&quot;item&quot;</span>, <span class="hljs-string">&quot;100002644680&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    client.delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-4-修改文档"><a href="#4-4-4-修改文档" class="headerlink" title="4.4.4 修改文档"></a>4.4.4 修改文档</h4><ul><li>全量修改：本质是先根据id删除，再新增</li><li>局部修改：修改文档中的指定字段值</li></ul><p>我们主要关注局部修改的API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">UpdateRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateRequest</span>(<span class="hljs-string">&quot;items&quot;</span>, <span class="hljs-string">&quot;100002644680&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    request.doc(<br>            <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-number">58800</span>,<br>            <span class="hljs-string">&quot;commentCount&quot;</span>, <span class="hljs-number">1</span><br>    );<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.update(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-5-批量导入文档"><a href="#4-4-5-批量导入文档" class="headerlink" title="4.4.5 批量导入文档"></a>4.4.5 批量导入文档</h4><p>Bulk中添加了多个IndexRequest，就是批量新增功能:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBulk</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>();<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    request.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>).id(<span class="hljs-string">&quot;1&quot;</span>).source(<span class="hljs-string">&quot;json doc1&quot;</span>, XContentType.JSON));<br>    request.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>).id(<span class="hljs-string">&quot;2&quot;</span>).source(<span class="hljs-string">&quot;json doc2&quot;</span>, XContentType.JSON));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.bulk(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><p>采用循环遍历方式，每次导入1000条左右的数据:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testLoadItemDocs</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 分页查询商品数据</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">pageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        Page&lt;Item&gt; page = itemService.lambdaQuery().eq(Item::getStatus, <span class="hljs-number">1</span>).page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;Item&gt;(pageNo, size));<br>        <span class="hljs-comment">// 非空校验</span><br>        List&lt;Item&gt; items = page.getRecords();<br>        <span class="hljs-keyword">if</span> (CollUtils.isEmpty(items)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;加载第&#123;&#125;页数据，共&#123;&#125;条&quot;</span>, pageNo, items.size());<br>        <span class="hljs-comment">// 1.创建Request</span><br>        <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>        <span class="hljs-comment">// 2.准备参数，添加多个新增的Request</span><br>        <span class="hljs-keyword">for</span> (Item item : items) &#123;<br>            <span class="hljs-comment">// 2.1.转换为文档类型ItemDTO</span><br>            <span class="hljs-type">ItemDoc</span> <span class="hljs-variable">itemDoc</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(item, ItemDoc.class);<br>            <span class="hljs-comment">// 2.2.创建新增文档的Request对象</span><br>            request.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>()<br>                            .id(itemDoc.getId())<br>                            .source(JSONUtil.toJsonStr(itemDoc), XContentType.JSON));<br>        &#125;<br>        <span class="hljs-comment">// 3.发送请求</span><br>        client.bulk(request, RequestOptions.DEFAULT);<br><br>        <span class="hljs-comment">// 翻页</span><br>        pageNo++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-DSL查询"><a href="#5-DSL查询" class="headerlink" title="5. DSL查询"></a>5. DSL查询</h2><p>Elasticsearch的查询可以分为两大类：</p><ul><li>叶子查询（Leaf query clauses）：一般是在特定的字段里查询特定值，属于简单查询，很少单独使用。</li><li>复合查询（Compound query clauses）：以逻辑方式组合多个叶子查询或者更改叶子查询的行为方式。</li></ul><h3 id="5-1-叶子查询"><a href="#5-1-叶子查询" class="headerlink" title="5.1 叶子查询"></a>5.1 叶子查询</h3><p>叶子查询的类型：</p><ul><li>全文检索查询（Full Text Queries）：利用分词器对用户输入搜索条件先分词，得到词条，然后再利用倒排索引搜索词条。例如：<ul><li>match：</li><li>multi_match</li></ul></li><li>精确查询（Term-level queries）：不对用户输入搜索条件分词，根据字段内容精确值匹配。但只能查找keyword、数值、日期、boolean类型的字段。例如：<ul><li>ids</li><li>term</li><li>range</li></ul></li><li>地理坐标查询：用于搜索地理位置，搜索方式很多，例如：<ul><li>geo_bounding_box：按矩形搜索</li><li>geo_distance：按点和半径搜索</li></ul></li></ul><h4 id="5-1-1-全文检索查询"><a href="#5-1-1-全文检索查询" class="headerlink" title="5.1.1 全文检索查询"></a>5.1.1 全文检索查询</h4><p>match语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搜索条件&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>multi_match语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;multi_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搜索条件&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;字段1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;字段2&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;multi_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-1-2-精确查询"><a href="#5-1-2-精确查询" class="headerlink" title="5.1.2 精确查询"></a>5.1.2 精确查询</h4><p>词条级别的查询；作为一个词条，与搜索的字段内容精确值匹配。因此推荐查找keyword、数值、日期、boolean类型的字段。</p><p>term查询:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搜索条件&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>range查询:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>最小值<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>最大值<span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-复合查询"><a href="#5-2-复合查询" class="headerlink" title="5.2 复合查询"></a>5.2 复合查询</h3><ul><li>第一类：基于逻辑运算组合叶子查询，实现组合条件，例如<ul><li>bool</li></ul></li><li>第二类：基于某种算法修改查询时的文档相关性算分，从而改变文档排名。例如：<ul><li>function_score</li><li>dis_max</li></ul></li></ul><h4 id="bool查询"><a href="#bool查询" class="headerlink" title="bool查询"></a>bool查询</h4><p>bool查询，即布尔查询。就是利用逻辑运算来组合一个或多个查询子句的组合。bool查询支持的逻辑运算有：</p><ul><li>must：必须匹配每个子查询，类似“与”</li><li>should：选择性匹配子查询，类似“或”</li><li>must_not：必须不匹配，不参与算分，类似“非”</li><li>filter：必须匹配，不参与算分</li></ul><p>语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手机&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vivo&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;must_not&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2500</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>搜索手机，但品牌必须是华为，价格必须是900~1599：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手机&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">90000</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">159900</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-排序"><a href="#5-3-排序" class="headerlink" title="5.3 排序"></a>5.3 排序</h3><p>elasticsearch默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索结果排序。不过分词字段无法排序，<strong>能参与排序字段类型有：keyword类型、数值类型、地理坐标类型、日期类型</strong>等。</p><p>语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;排序字段&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;排序方式asc和desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>按照商品价格排序:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="5-4-分页"><a href="#5-4-分页" class="headerlink" title="5.4 分页"></a>5.4 分页</h3><p>elasticsearch 默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了</p><h4 id="5-4-1-基础分页"><a href="#5-4-1-基础分页" class="headerlink" title="5.4.1 基础分页"></a>5.4.1 基础分页</h4><p>elasticsearch中通过修改from、size参数来控制要返回的分页结果：</p><ul><li>from：从第几个文档开始</li><li>size：总共查询几个文档</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 分页开始的位置，默认为0</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 每页文档数量，默认10</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-4-2-深度分页"><a href="#5-4-2-深度分页" class="headerlink" title="5.4.2 深度分页"></a>5.4.2 深度分页</h4><p>elasticsearch的数据一般会采用分片存储，也就是把一个索引中的数据分成N份，存储到不同节点上。这种存储方式比较有利于数据扩展，但给分页带来了一些麻烦。<br>试想一下，假如我们现在要查询的是第999页数据呢，是不是要找第9990~10000的数据，那岂不是需要把每个分片中的前10000名数据都查询出来，汇总在一起，在内存中排序？如果查询的分页深度更深呢，需要一次检索的数据岂不是更多？</p><p><img src="/img/blogs/java/springcloud/es.7.png"></p><p>针对深度分页，elasticsearch提供了解决方案：</p><ul><li>search after：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</li></ul><h3 id="5-5-高亮"><a href="#5-5-高亮" class="headerlink" title="5.5 高亮"></a>5.5 高亮</h3><p>词条的高亮标签肯定是由服务端提供数据的时候已经加上的。</p><p>实现高亮的思路就是：</p><ul><li>用户输入搜索关键字搜索数据</li><li>服务端根据搜索关键字到elasticsearch搜索，并给搜索结果中的关键字词条添加html标签</li><li>前端提前给约定好的html标签添加CSS样式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;搜索字段&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搜索关键字&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;高亮字段名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pre_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;em&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;post_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;/em&gt;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="6-JavaRestClient查询"><a href="#6-JavaRestClient查询" class="headerlink" title="6. JavaRestClient查询"></a>6. JavaRestClient查询</h2><h3 id="6-1-文档搜索的基本步骤"><a href="#6-1-文档搜索的基本步骤" class="headerlink" title="6.1 文档搜索的基本步骤"></a>6.1 文档搜索的基本步骤</h3><ol><li>创建SearchRequest对象</li><li>准备request.source()，也就是DSL。</li><li>QueryBuilders来构建查询条件</li><li>传入request.source() 的 query() 方法</li><li>发送请求，得到结果</li><li>解析结果（参考JSON结果，从外到内，逐层解析）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatchAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    request.source().query(QueryBuilders.matchAllQuery());<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">searchHits</span> <span class="hljs-operator">=</span> response.getHits();<br>    <span class="hljs-comment">// 1.获取总条数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> searchHits.getTotalHits().value;<br>    System.out.println(<span class="hljs-string">&quot;共搜索到&quot;</span> + total + <span class="hljs-string">&quot;条数据&quot;</span>);<br>    <span class="hljs-comment">// 2.遍历结果数组</span><br>    SearchHit[] hits = searchHits.getHits();<br>    <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>        <span class="hljs-comment">// 3.得到_source，也就是原始json文档</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>        <span class="hljs-comment">// 4.反序列化并打印</span><br>        <span class="hljs-type">ItemDoc</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> JSONUtil.toBean(source, ItemDoc.class);<br>        System.out.println(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-叶子查询"><a href="#6-2-叶子查询" class="headerlink" title="6.2 叶子查询"></a>6.2 叶子查询</h3><p>match查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;脱脂牛奶&quot;</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>multi_match查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMultiMatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    request.source().query(QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;脱脂牛奶&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;category&quot;</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>range查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testRange</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    request.source().query(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">10000</span>).lte(<span class="hljs-number">30000</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>term查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testTerm</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    request.source().query(QueryBuilders.termQuery(<span class="hljs-string">&quot;brand&quot;</span>, <span class="hljs-string">&quot;华为&quot;</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-复合查询"><a href="#6-3-复合查询" class="headerlink" title="6.3 复合查询"></a>6.3 复合查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBool</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    <span class="hljs-comment">// 2.1.准备bool查询</span><br>    <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">bool</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>    <span class="hljs-comment">// 2.2.关键字搜索</span><br>    bool.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;脱脂牛奶&quot;</span>));<br>    <span class="hljs-comment">// 2.3.品牌过滤</span><br>    bool.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;brand&quot;</span>, <span class="hljs-string">&quot;德亚&quot;</span>));<br>    <span class="hljs-comment">// 2.4.价格过滤</span><br>    bool.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).lte(<span class="hljs-number">30000</span>));<br>    request.source().query(bool);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-4-排序和分页"><a href="#6-4-排序和分页" class="headerlink" title="6.4 排序和分页"></a>6.4 排序和分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageAndSort</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, pageSize = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    <span class="hljs-comment">// 2.1.搜索条件参数</span><br>    request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;脱脂牛奶&quot;</span>));<br>    <span class="hljs-comment">// 2.2.排序参数</span><br>    request.source().sort(<span class="hljs-string">&quot;price&quot;</span>, SortOrder.ASC);<br>    <span class="hljs-comment">// 2.3.分页参数</span><br>    request.source().from((pageNo - <span class="hljs-number">1</span>) * pageSize).size(pageSize);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-5-高亮"><a href="#6-5-高亮" class="headerlink" title="6.5 高亮"></a>6.5 高亮</h3><ul><li>条件同样是在request.source()中指定，只不过高亮条件要基于HighlightBuilder来构造</li><li>高亮响应结果与搜索的文档结果不在一起，需要单独解析</li></ul><p>查询:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testHighlight</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    <span class="hljs-comment">// 2.1.query条件</span><br>    request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;脱脂牛奶&quot;</span>));<br>    <span class="hljs-comment">// 2.2.高亮条件</span><br>    request.source().highlighter(<br>            SearchSourceBuilder.highlight()<br>                    .field(<span class="hljs-string">&quot;name&quot;</span>)<br>                    .preTags(<span class="hljs-string">&quot;&lt;em&gt;&quot;</span>)<br>                    .postTags(<span class="hljs-string">&quot;&lt;/em&gt;&quot;</span>)<br>    );<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>解析数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">searchHits</span> <span class="hljs-operator">=</span> response.getHits();<br>    <span class="hljs-comment">// 1.获取总条数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> searchHits.getTotalHits().value;<br>    System.out.println(<span class="hljs-string">&quot;共搜索到&quot;</span> + total + <span class="hljs-string">&quot;条数据&quot;</span>);<br>    <span class="hljs-comment">// 2.遍历结果数组</span><br>    SearchHit[] hits = searchHits.getHits();<br>    <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>        <span class="hljs-comment">// 3.得到_source，也就是原始json文档</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>        <span class="hljs-comment">// 4.反序列化</span><br>        <span class="hljs-type">ItemDoc</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> JSONUtil.toBean(source, ItemDoc.class);<br>        <span class="hljs-comment">// 5.获取高亮结果</span><br>        Map&lt;String, HighlightField&gt; hfs = hit.getHighlightFields();<br>        <span class="hljs-keyword">if</span> (CollUtils.isNotEmpty(hfs)) &#123;<br>            <span class="hljs-comment">// 5.1.有高亮结果，获取name的高亮结果</span><br>            <span class="hljs-type">HighlightField</span> <span class="hljs-variable">hf</span> <span class="hljs-operator">=</span> hfs.get(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-keyword">if</span> (hf != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 5.2.获取第一个高亮结果片段，就是商品名称的高亮值</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">hfName</span> <span class="hljs-operator">=</span> hf.getFragments()[<span class="hljs-number">0</span>].string();<br>                item.setName(hfName);<br>            &#125;<br>        &#125;<br>        System.out.println(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-数据聚合"><a href="#7-数据聚合" class="headerlink" title="7. 数据聚合"></a>7. 数据聚合</h2><h3 id="7-1-聚合的概念"><a href="#7-1-聚合的概念" class="headerlink" title="7.1 聚合的概念"></a>7.1 聚合的概念</h3><p>聚合（aggregations）可以让我们极其方便的实现对数据的统计、分析、运算</p><p>聚合常见的有三类：</p><ul><li>桶（Bucket）聚合：用来对文档做分组 </li><li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组</li><li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li><li>度量（Metric）聚合：用以计算一些值，比如：最大值、最小值、平均值等 </li><li>Avg：求平均值</li><li>Max：求最大值</li><li>Min：求最小值</li><li>Stats：同时求max、min、avg、sum等</li><li>管道（pipeline）聚合：其它聚合的结果为基础做进一步运算</li></ul><p><strong>注意</strong>：参加聚合的<strong>字段必须是keyword、日期、数值、布尔类型</strong></p><h3 id="7-2-DSL实现聚合"><a href="#7-2-DSL实现聚合" class="headerlink" title="7.2 DSL实现聚合"></a>7.2 DSL实现聚合</h3><h4 id="7-2-1-Bucket聚合"><a href="#7-2-1-Bucket聚合" class="headerlink" title="7.2.1 Bucket聚合"></a>7.2.1 Bucket聚合</h4><p>我们要统计所有商品中共有哪些商品分类，其实就是以分类（category）字段对数据分组</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;category_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;category&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>size：设置size为0，就是每页查0条，则结果中就不包含文档，只包含聚合</li><li>aggs：定义聚合<ul><li>category_agg：聚合名称，自定义，但不能重复<ul><li>terms：聚合的类型，按分类聚合，所以用term<ul><li>field：参与聚合的字段名称</li><li>size：希望返回的聚合结果的最大数量</li></ul></li></ul></li></ul></li></ul><h4 id="7-2-2-带条件聚合"><a href="#7-2-2-带条件聚合" class="headerlink" title="7.2.2 带条件聚合"></a>7.2.2 带条件聚合</h4><p>价格高于3000元的手机品牌有哪些</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手机&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">300000</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brand_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="7-2-3-Metric聚合"><a href="#7-2-3-Metric聚合" class="headerlink" title="7.2.3 Metric聚合"></a>7.2.3 Metric聚合</h4><p>我们需要对桶内的商品做运算，获取每个品牌价格的最小值、最大值、平均值。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手机&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">300000</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brand_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;stats_meric&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>stats_meric：聚合名称<ul><li>stats：聚合类型，stats是metric聚合的一种<ul><li>field：聚合字段，这里选择price，统计价格</li></ul></li></ul></li></ul><h3 id="7-3-JavaRestClient实现聚合"><a href="#7-3-JavaRestClient实现聚合" class="headerlink" title="7.3 JavaRestClient实现聚合"></a>7.3 JavaRestClient实现聚合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testAgg</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">bool</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery()<br>            .filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-string">&quot;手机&quot;</span>))<br>            .filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">300000</span>));<br>    request.source().query(bool).size(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 3.聚合参数</span><br>    request.source().aggregation(<br>            AggregationBuilders.terms(<span class="hljs-string">&quot;brand_agg&quot;</span>).field(<span class="hljs-string">&quot;brand&quot;</span>).size(<span class="hljs-number">5</span>)<br>    );<br>    <span class="hljs-comment">// 4.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br><br><br>    <span class="hljs-comment">// 5.解析聚合结果</span><br>    <span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> response.getAggregations();<br>    <span class="hljs-comment">// 5.1.获取品牌聚合</span><br>    <span class="hljs-type">Terms</span> <span class="hljs-variable">brandTerms</span> <span class="hljs-operator">=</span> aggregations.get(<span class="hljs-string">&quot;brand_agg&quot;</span>);<br>    <span class="hljs-comment">// 5.2.获取聚合中的桶</span><br>    List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();<br>    <span class="hljs-comment">// 5.3.遍历桶内数据</span><br>    <span class="hljs-keyword">for</span> (Terms.Bucket bucket : buckets) &#123;<br>        <span class="hljs-comment">// 5.4.获取桶内key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> bucket.getKeyAsString();<br>        System.out.print(<span class="hljs-string">&quot;brand = &quot;</span> + brand);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> bucket.getDocCount();<br>        System.out.println(<span class="hljs-string">&quot;; count = &quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="七-微服务面试篇"><a href="#七-微服务面试篇" class="headerlink" title="七. 微服务面试篇"></a>七. 微服务面试篇</h1><h2 id="1-分布式事务"><a href="#1-分布式事务" class="headerlink" title="1. 分布式事务"></a>1. 分布式事务</h2><h3 id="1-1-CAP定理"><a href="#1-1-CAP定理" class="headerlink" title="1.1 CAP定理"></a>1.1 CAP定理</h3><p>加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标：</p><ul><li>Consistency（一致性）</li><li>Availability（可用性）</li><li>Partition tolerance （分区容错性）<br>它们的第一个字母分别是 C、A、P。Eric Brewer认为任何分布式系统架构方案都不可能同时满足这3个目标，这个结论就叫做 CAP 定理。</li></ul><h4 id="1-1-1-一致性"><a href="#1-1-1-一致性" class="headerlink" title="1.1.1.一致性"></a>1.1.1.一致性</h4><p>Consistency（一致性）：用户访问分布式系统中的任意节点，得到的数据必须一致。</p><p><img src="/img/blogs/java/springcloud/7.1.1.png"></p><h4 id="1-1-2-可用性"><a href="#1-1-2-可用性" class="headerlink" title="1.1.2.可用性"></a>1.1.2.可用性</h4><p>Availability （可用性）：用户访问分布式系统时，读或写操作总能成功。<br>只能读不能写，或者只能写不能读，或者两者都不能执行，就说明系统弱可用或不可用。</p><p><img src="/img/blogs/java/springcloud/7.1.2.png"></p><h4 id="1-1-3-分区容错性"><a href="#1-1-3-分区容错性" class="headerlink" title="1.1.3 分区容错性"></a>1.1.3 分区容错性</h4><ul><li>Partition（分区）：因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区。</li><li>Tolerance（容错）：系统要能容忍网络分区现象，出现分区时，整个系统也要持续对外提供服务<ul><li>如果此时只允许读，不允许写，满足所有节点一致性。但是牺牲了可用性。符合CP</li><li>如果此时允许任意读写，满足了可用性。但由于node3无法同步，导致数据不一致，牺牲了一致性。符合AP</li></ul></li></ul><p><img src="/img/blogs/java/springcloud/7.1.3.png"></p><h3 id="1-2-BASE理论"><a href="#1-2-BASE理论" class="headerlink" title="1.2 BASE理论"></a>1.2 BASE理论</h3><p>BASE理论是对CAP的一种解决思路，包含三个思想：</p><ul><li>Basically Available （<strong>基本可用</strong>）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li>Soft State（<strong>软状态</strong>）：在一定时间内，允许出现中间状态，比如临时的不一致状态。</li><li>Eventually Consistent（<strong>最终一致性</strong>）：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li></ul><p>而分布式事务最大的问题是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论：</p><ul><li><strong>CP模式</strong>：各个子事务执行后互相等待，同时提交，同时回滚，达成<strong>强一致</strong>。但事务等待过程中，处于弱可用状态。例如XA模式</li><li><strong>AP模式</strong>：各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致。例如AT模式就是如此</li></ul><h3 id="1-3-AT模式的脏写问题"><a href="#1-3-AT模式的脏写问题" class="headerlink" title="1.3 AT模式的脏写问题"></a>1.3 AT模式的脏写问题</h3><p>AT模式也分为两个阶段：第一阶段是记录数据快照，执行并提交事务：</p><p><img src="/img/blogs/java/springcloud/7.1.4.png"></p><p>第二阶段根据阶段一的结果来判断：</p><ul><li>如果每一个分支事务都成功，则事务已经结束（因为阶段一已经提交），因此删除阶段一的快照即可</li><li>如果有任意分支事务失败，则需要根据快照恢复到更新前数据。然后删除快照</li></ul><p><img src="/img/blogs/java/springcloud/7.1.5.png"></p><p>这种模式在大多数情况下（99%）并不会有什么问题，不过在极端情况下，特别是多线程并发访问AT模式的分布式事务时，有可能出现脏写问题，如图：</p><p><img src="/img/blogs/java/springcloud/7.1.6.png"></p><p>解决思路就是引入了全局锁的概念。在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。</p><p><img src="/img/blogs/java/springcloud/7.1.7.png"></p><h3 id="1-4-TCC模式"><a href="#1-4-TCC模式" class="headerlink" title="1.4 TCC模式"></a>1.4 TCC模式</h3><p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：</p><ul><li>try：资源的检测和预留； </li><li>confirm：完成资源操作业务；要求 try 成功 confirm 一定要能成功。 </li><li>cancel：预留资源释放，可以理解为try的反向操作。</li></ul><p>举例:</p><p><img src="/img/blogs/java/springcloud/7.1.8.png"></p><p>TCC工作模型图：</p><p><img src="/img/blogs/java/springcloud/7.1.9.png"></p><ul><li>假如一个分布式事务中包含两个分支事务，try阶段，一个分支成功执行，另一个分支事务阻塞</li><li>如果阻塞时间太长，可能导致全局事务超时而触发二阶段的cancel操作。两个分支事务都会执行cancel操作</li><li>要知道，其中一个分支是未执行try操作的，直接执行了cancel操作，反而会导致数据错误。因此，这种情况下，尽管cancel方法要执行，但其中不能做任何回滚操作，这就是空回滚</li><li>对于整个空回滚的分支事务，将来try方法阻塞结束依然会执行。但是整个全局事务其实已经结束了，因此永远不会再有confirm或cancel，也就是说这个事务执行了一半，处于悬挂状态，这就是业务悬挂问题</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>TCC模式的每个阶段是做什么的？</p><ul><li>Try：资源检查和预留</li><li>Confirm：业务执行和提交</li><li>Cancel：预留资源的释放</li></ul><p>TCC的优点是什么？</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能好</li><li>相比AT模型，无需生成快照，无需使用全局锁，性能最强</li><li>不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库</li></ul><p>TCC的缺点是什么？</p><ul><li>有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦</li><li>软状态，事务是最终一致</li><li>需要考虑Confirm和Cancel的失败情况，做好幂等处理、事务悬挂和空回滚处理</li></ul><h3 id="1-5-最大努力通知"><a href="#1-5-最大努力通知" class="headerlink" title="1.5 最大努力通知"></a>1.5 最大努力通知</h3><p>最大努力通知是一种最终一致性的分布式事务解决方案。顾明思议，就是通过消息通知的方式来通知事务参与者完成业务执行，如果执行失败会多次通知。无需任何分布式事务组件介入。</p><p><img src="/img/blogs/java/springcloud/7.1.10.png"></p><h2 id="2-注册中心"><a href="#2-注册中心" class="headerlink" title="2. 注册中心"></a>2. 注册中心</h2><h3 id="2-1-环境隔离"><a href="#2-1-环境隔离" class="headerlink" title="2.1 环境隔离"></a>2.1 环境隔离</h3><p>企业实际开发中，往往会搭建多个运行环境，例如：开发环境、测试环境、发布环境。不同环境之间需要隔离。或者不同项目使用了一套Nacos，不同项目之间要做环境隔离。</p><p><img src="/img/blogs/java/springcloud/7.2.1.png"></p><ul><li>Nacos中可以配置多个namespace，相互之间完全隔离。默认的namespace名为public</li><li>namespace下还可以继续分组，也就是group ，相互隔离。 默认的group是DEFAULT_GROUP</li><li>group之下就是服务和配置了</li></ul><h3 id="2-2-分级模型"><a href="#2-2-分级模型" class="headerlink" title="2.2 分级模型"></a>2.2 分级模型</h3><p>在一些大型应用中，同一个服务可以部署很多实例。而这些实例可能分布在全国各地的不同机房。由于存在地域差异，网络传输的速度会有很大不同，因此在做服务治理时需要区分不同机房的实例。</p><p>Nacos中提供了集群（cluster）的概念，来对应不同机房。也就是说，一个服务（service）下可以有很多集群（cluster），而一个集群（cluster）中下又可以包含很多实例（instance）。</p><p><img src="/img/blogs/java/springcloud/7.2.2.png"></p><p>任何一个微服务的实例在注册到Nacos时，都会生成以下几个信息，用来确认当前实例的身份，从外到内依次是：</p><ul><li><p>namespace：命名空间</p></li><li><p>group：分组</p></li><li><p>service：服务名</p></li><li><p>cluster：集群</p></li><li><p>instance：实例，包含ip和端口<br>这就是nacos中的服务分级模型。</p></li><li><p>在Nacos内部会有一个服务实例的注册表，是基于Map实现的，其结构与分级模型的对应关系如下：</p></li></ul><p><img src="/img/blogs/java/springcloud/7.2.3.png"></p><h2 id="3-远程调用"><a href="#3-远程调用" class="headerlink" title="3. 远程调用"></a>3. 远程调用</h2><h3 id="3-1-负载均衡原理"><a href="#3-1-负载均衡原理" class="headerlink" title="3.1 负载均衡原理"></a>3.1 负载均衡原理</h3><p>OpenFeign在整合SpringCloudLoadBalancer时，与我们手动服务发现、复杂均衡的流程类似。</p><ol><li>获取serviceId，也就是服务名称</li><li>根据serviceId拉取服务列表</li><li>利用负载均衡算法选择一个服务</li><li>重构请求的URL路径，发起远程调用</li></ol><p><strong>负载均衡原理</strong>：</p><p><img src="/img/blogs/java/springcloud/7.3.1.png"></p><h4 id="切换负载均衡策略"><a href="#切换负载均衡策略" class="headerlink" title="切换负载均衡策略"></a>切换负载均衡策略</h4><h2 id="4-服务保护"><a href="#4-服务保护" class="headerlink" title="4. 服务保护"></a>4. 服务保护</h2><h3 id="4-1-线程隔离"><a href="#4-1-线程隔离" class="headerlink" title="4.1 线程隔离"></a>4.1 线程隔离</h3><p>线程隔离有两种方式实现：</p><ul><li>线程池隔离(Hystix默认采用)：给每个服务调用业务分配一个线程池，利用线程池本身实现隔离效果</li><li>信号量隔离(Sentinel默认使用)：不创建线程池，而是计数器模式，记录业务使用的线程数量，达到信号量上限时，禁止新的请求</li></ul><p><img src="/img/blogs/java/springcloud/7.4.1.png"></p><p><strong>Sentinel的线程隔离与Hystix的线程隔离有什么差别?</strong></p><ul><li>问题说明：考察对线程隔离方案的掌握情况</li><li>难易程度：一般</li><li>参考话术：<ul><li>答：线程隔离可以采用线程池隔离或者信号量隔离。<ul><li>Hystix默认是基于线程池实现的线程隔离，每一个被隔离的业务都要创建一个独立的线程池，线程过多会带来额外的CPU开销，性能一般，但是隔离性更强。</li><li>Sentinel则是基于信号量隔离的原理，这种方式不用创建线程池，性能较好，但是隔离性一般。</li></ul></li></ul></li></ul><h3 id="4-2-滑动窗口算法"><a href="#4-2-滑动窗口算法" class="headerlink" title="4.2 滑动窗口算法"></a>4.2 滑动窗口算法</h3><p>在熔断功能中，需要统计异常请求或慢请求比例，也就是计数。在限流的时候，要统计每秒钟的QPS，同样是计数。可见计数算法在熔断限流中的应用非常多。sentinel中采用的计数器算法就是滑动窗口计数算法。</p><h4 id="4-2-1-固定窗口计数"><a href="#4-2-1-固定窗口计数" class="headerlink" title="4.2.1 固定窗口计数"></a>4.2.1 固定窗口计数</h4><p>固定窗口计数器算法概念如下：</p><ul><li>将时间划分为多个窗口，窗口时间跨度称为Interval，本例中为1000ms；</li><li>每个窗口分别计数统计，每有一次请求就将计数器加一，限流就是设置计数器阈值，本例为3</li><li>如果计数器超过了限流阈值，则超出阈值的请求都被丢弃。</li></ul><p><img src="/img/blogs/java/springcloud/7.4.2.png"></p><h4 id="4-2-2-滑动窗口算法"><a href="#4-2-2-滑动窗口算法" class="headerlink" title="4.2.2 滑动窗口算法"></a>4.2.2 滑动窗口算法</h4><p>固定时间窗口算法中窗口有很多，其跨度和位置是与时间区间绑定，因此是很多固定不动的窗口。而滑动时间窗口算法中只包含1个固定跨度的窗口，但窗口是可移动动的，与时间区间无关。</p><p>滑动窗口计数器算法会将一个窗口划分为n个更小的区间，例如</p><ul><li>窗口时间跨度Interval为1秒；区间数量 n &#x3D; 2 ，则每个小区间时间跨度为500ms，每个区间都有计数器</li><li>限流阈值依然为3，时间窗口（1秒）内请求超过阈值时，超出的请求被限流</li><li>窗口会根据当前请求所在时间（currentTime）移动，窗口范围是从（currentTime-Interval）之后的第一个时区开始，到currentTime所在时区结束。</li></ul><p><img src="/img/blogs/java/springcloud/7.4.3.png"></p><h3 id="4-3-漏桶算法"><a href="#4-3-漏桶算法" class="headerlink" title="4.3 漏桶算法"></a>4.3 漏桶算法</h3><p>漏桶算法说明：</p><ul><li>将每个请求视作”水滴”放入”漏桶”进行存储；</li><li>“漏桶”以固定速率向外”漏”出请求来执行，如果”漏桶”空了则停止”漏水”；</li><li>如果”漏桶”满了则多余的”水滴”会被直接丢弃。</li><li>可以理解成请求在桶内排队等待</li></ul><p><img src="/img/blogs/java/springcloud/7.4.4.png"></p><p>Sentinel内部基于漏桶算法实现了排队等待效果，桶的容量取决限流的QPS阈值以及允许等待的最大超时时间：<br>例如：限流QPS&#x3D;5，队列超时时间为2000ms。我们让所有请求进入一个队列中，如同进入漏桶中。由于漏桶是固定频率执行，因此QPS为5就是每200ms执行一个请求。那第N个请求的预期的执行时间 是第(N - 1) * 200ms。如果请求预期的执行时间超出最大时长2000ms，说明“桶满了”，新的请求则会被拒绝。</p><h3 id="4-4-令牌桶算法"><a href="#4-4-令牌桶算法" class="headerlink" title="4.4 令牌桶算法"></a>4.4 令牌桶算法</h3><p>限流的另一种常见算法是令牌桶算法。Sentinel中的热点参数限流正是基于令牌桶算法实现的。</p><p>令牌桶算法说明：</p><ul><li>以固定的速率生成令牌，存入令牌桶中，如果令牌桶满了以后，停止生成</li><li>请求进入后，必须先尝试从桶中获取令牌，获取到令牌后才可以被处理</li><li>如果令牌桶中没有令牌，则请求等待或丢弃</li></ul><p><img src="/img/blogs/java/springcloud/7.4.5.png"></p><p>基于令牌桶算法，每秒产生的令牌数量基本就是QPS上限。<br>当然也有例外情况，例如：</p><ul><li>某一秒令牌桶中产生了很多令牌，达到令牌桶上限N，缓存在令牌桶中，但是这一秒没有请求进入。</li><li>下一秒的前半秒涌入了超过2N个请求，之前缓存的令牌桶的令牌耗尽，同时这一秒又生成了N个令牌，于是总共放行了2N个请求。超出了我们设定的QPS阈值。<br>因此，在使用令牌桶算法时，尽量不要将令牌上限设定到服务能承受的QPS上限。而是预留一定的波动空间，这样我们才能应对突发流量。</li></ul><h3 id="4-5-Sentinel的限流与Gateway的限流有什么差别？"><a href="#4-5-Sentinel的限流与Gateway的限流有什么差别？" class="headerlink" title="4.5 Sentinel的限流与Gateway的限流有什么差别？"></a>4.5 Sentinel的限流与Gateway的限流有什么差别？</h3><p>问题说明：考察对限流算法的掌握情况<br>难易程度：难<br>参考话术：</p><ul><li>限流算法常见的有三种实现：滑动时间窗口、令牌桶算法、漏桶算法。Gateway则采用了基于Redis实现的令牌桶算法</li><li>而Sentinel内部却比较复杂：<ul><li>默认限流模式是基于滑动时间窗口算法，另外Sentinel中断路器的计数也是基于滑动时间窗口算法</li><li>限流后可以快速失败和排队等待，其中排队等待基于漏桶算法</li><li>而热点参数限流则是基于令牌桶算法</li></ul></li></ul><p>引用：<a href="https://b11et3un53m.feishu.cn/wiki/FYNkwb1i6i0qwCk7lF2caEq5nRe">https://b11et3un53m.feishu.cn/wiki/FYNkwb1i6i0qwCk7lF2caEq5nRe</a></p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>JAVA</tag>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch学习笔记</title>
    <link href="/2025/03/08/JAVA/SpringCloud/Elasticsearch/"/>
    <url>/2025/03/08/JAVA/SpringCloud/Elasticsearch/</url>
    
    <content type="html"><![CDATA[<h1 align="center">Elasticsearch学习笔记</h1><h2 id="1-Elasticsearch"><a href="#1-Elasticsearch" class="headerlink" title="1. Elasticsearch"></a>1. Elasticsearch</h2><p>Elasticsearch是由elastic公司开发的一套搜索引擎技术</p><h3 id="1-1-倒排索引"><a href="#1-1-倒排索引" class="headerlink" title="1.1 倒排索引"></a>1.1 倒排索引</h3><p>倒排索引的概念是基于MySQL这样的正向索引而言的</p><h4 id="1-1-1-正向索引"><a href="#1-1-1-正向索引" class="headerlink" title="1.1.1 正向索引"></a>1.1.1 正向索引</h4><ul><li>正向索引（Forward Index）通常指的是数据库索引按照字段的自然顺序进行存储和查找的索引方式。在 MySQL 中，常见的正向索引主要是B+ 树索引。</li><li>当搜索条件为<strong>模糊匹配时，由于索引无法生效</strong>，导致<strong>从索引查询退化为全表扫描</strong>，效率很差。</li></ul><h4 id="1-1-2-倒排索引"><a href="#1-1-2-倒排索引" class="headerlink" title="1.1.2 倒排索引"></a>1.1.2 倒排索引</h4><p>两个概念：</p><ul><li>文档（Document）：用来搜索的数据，其中的<strong>每一条数据就是一个文档</strong>。例如一个网页、一个商品信息</li><li>词条（Term）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li></ul><p><strong>创建倒排索引</strong>:</p><p><img src="/img/blogs/java/springcloud/es.1.png"></p><p>倒排索引的<strong>搜索流程</strong>:</p><p><img src="/img/blogs/java/springcloud/es.2.png"></p><p>流程描述：</p><ol><li>用户输入条件”华为手机”进行搜索。</li><li>对用户输入条件分词，得到词条：华为、手机。</li><li>拿着词条在倒排索引中查找（由于词条有索引，查询效率很高），即可得到包含词条的文档id：1、2、3。</li><li>拿着文档id到正向索引中查找具体文档即可（由于id也有索引，查询效率也很高）。</li></ol><h4 id="1-1-3-正向和倒排"><a href="#1-1-3-正向和倒排" class="headerlink" title="1.1.3 正向和倒排"></a>1.1.3 正向和倒排</h4><ul><li>正向索引是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。 </li><li>而倒排索引则相反，是<strong>先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档</strong>。是根据词条找文档的过程。</li></ul><h3 id="1-2-IK分词器"><a href="#1-2-IK分词器" class="headerlink" title="1.2 IK分词器"></a>1.2 IK分词器</h3><p>地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>IK分词器包含两种模式：</p><ul><li>ik_smart：智能语义切分 </li><li>ik_max_word：最细粒度切分</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员学习java太棒了&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;程序员&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;学习&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ENGLISH&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;太棒了&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">14</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>拓展词典</strong>:</p><ol><li>打开IK分词器config目录</li><li>在IKAnalyzer.cfg.xml配置文件内容添加</li><li>在IK分词器的config目录新建一个 ext.dic，可以参考config目录下复制一个配置文件进行修改</li><li>重启elasticsearch</li></ol><h3 id="1-3-ES基础概念"><a href="#1-3-ES基础概念" class="headerlink" title="1.3 ES基础概念"></a>1.3 ES基础概念</h3><p>elasticsearch是<strong>面向文档（Document）存储</strong>的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中</p><p><img src="/img/blogs/java/springcloud/es.3.png"></p><p>将类型相同的文档集中在一起管理，称为索引（Index）</p><p><img src="/img/blogs/java/springcloud/es.4.png"></p><p><strong>MySQL和ES的对比</strong>：</p><p><img src="/img/blogs/java/springcloud/es.5.png"></p><ul><li>Mysql：擅长事务类型操作，可以确保数据的安全和一致性 </li><li>Elasticsearch：擅长海量数据的搜索、分析、计算<br>两者结合使用：</li><li>对安全性要求较高的写操作，使用mysql实现</li><li>对查询性能要求较高的搜索需求，使用elasticsearch实现</li><li>两者再基于某种方式，实现数据的同步，保证一致性</li></ul><h2 id="2-索引库操作"><a href="#2-索引库操作" class="headerlink" title="2. 索引库操作"></a>2. 索引库操作</h2><p>Index就类似数据库表，Mapping映射就类似表的结构。我们要向es中存储数据，必须先创建Index和Mapping</p><h3 id="2-1-Mapping映射属性"><a href="#2-1-Mapping映射属性" class="headerlink" title="2.1 Mapping映射属性"></a>2.1 Mapping映射属性</h3><p>Mapping是对索引库中文档的约束，常见的Mapping属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有： <ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</li><li>数值：long、integer、short、byte、double、float、</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul><h3 id="2-2-索引库的增删改查"><a href="#2-2-索引库的增删改查" class="headerlink" title="2.2 索引库的增删改查"></a>2.2 索引库的增删改查</h3><p>Elasticsearch采用的是Restful风格的API，而且请求参数也都采用JSON风格</p><table><thead><tr><th>接口类型</th><th>请求方式</th><th>请求路径</th><th>请求参数</th></tr></thead><tbody><tr><td>查询用户</td><td>GET</td><td>&#x2F;users&#x2F;{id}</td><td>路径中的 id</td></tr><tr><td>新增用户</td><td>POST</td><td>&#x2F;users</td><td>json 格式 user 对象</td></tr><tr><td>修改用户</td><td>PUT</td><td>&#x2F;users&#x2F;{id}</td><td>路径中的 id<br>json 格式对象</td></tr><tr><td>删除用户</td><td>DELETE</td><td>&#x2F;users&#x2F;{id}</td><td>路径中的 id</td></tr></tbody></table><h4 id="2-2-1-创建索引库"><a href="#2-2-1-创建索引库" class="headerlink" title="2.2.1 创建索引库"></a>2.2.1 创建索引库</h4><p>基本语法：</p><ul><li>请求方式：PUT</li><li>请求路径：&#x2F;索引库名，可以自定义</li><li>请求参数：mapping映射</li></ul><p><strong>格式</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名称<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;字段名2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;字段名3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;子字段&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// ...略</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"># PUT /heima<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-查询、删除索引库"><a href="#2-2-2-查询、删除索引库" class="headerlink" title="2.2.2 查询、删除索引库"></a>2.2.2 查询、删除索引库</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /索引库名<br>DELETE /索引库名<br></code></pre></td></tr></table></figure><h4 id="2-2-3-修改索引库"><a href="#2-2-3-修改索引库" class="headerlink" title="2.2.3 修改索引库"></a>2.2.3 修改索引库</h4><p>索引库一旦创建，无法修改mapping。但是却允许添加新的字段到mapping中</p><p>语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;新字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /heima/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-文档操作"><a href="#3-文档操作" class="headerlink" title="3. 文档操作"></a>3. 文档操作</h2><p>有了索引库，接下来就可以向索引库的文档中添加数据了。</p><h3 id="3-1-新增文档"><a href="#3-1-新增文档" class="headerlink" title="3.1 新增文档"></a>3.1 新增文档</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /索引库名/_doc/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;字段1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;子属性1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;子属性2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值4&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-查询文档"><a href="#3-2-查询文档" class="headerlink" title="3.2 查询文档"></a>3.2 查询文档</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名称<span class="hljs-punctuation">&#125;</span>/_doc/<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-删除文档"><a href="#3-3-删除文档" class="headerlink" title="3.3 删除文档"></a>3.3 删除文档</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_doc/id值<br></code></pre></td></tr></table></figure><h3 id="3-4-修改文档"><a href="#3-4-修改文档" class="headerlink" title="3.4 修改文档"></a>3.4 修改文档</h3><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档</li><li>局部修改：修改文档中的部分字段</li></ul><h4 id="3-4-1-全量修改"><a href="#3-4-1-全量修改" class="headerlink" title="3.4.1 全量修改"></a>3.4.1 全量修改</h4><p>全量修改是覆盖原来的文档，其本质是两步操作：</p><ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_doc/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;字段1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// ... 略</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-4-2-局部修改"><a href="#3-4-2-局部修改" class="headerlink" title="3.4.2 局部修改"></a>3.4.2 局部修改</h4><p>局部修改是只修改指定id匹配的文档中的部分字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_update/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>         <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;新的值&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-5-批处理"><a href="#3-5-批处理" class="headerlink" title="3.5 批处理"></a>3.5 批处理</h3><p>批处理采用POST请求，基本语法如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _bulk<br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;field1&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value1&quot;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;delete&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;create&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;field1&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value3&quot;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;update&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;doc&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;field2&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value2&quot;</span><span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>index代表新增操作<ul><li>_index：指定索引库名</li><li>_id指定要操作的文档id</li><li>{ “field1” : “value1” }：则是要新增的文档内容</li></ul></li><li>delete代表删除操作<ul><li>_index：指定索引库名</li><li>_id指定要操作的文档id</li></ul></li><li>update代表更新操作<ul><li>_index：指定索引库名</li><li>_id指定要操作的文档id</li><li>{ “doc” : {“field2” : “value2”} }：要更新的文档字段</li></ul></li></ul><h3 id="3-6-案例"><a href="#3-6-案例" class="headerlink" title="3.6 案例"></a>3.6 案例</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs json"># 新增文档<br>POST /heima/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员Java讲师&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zy@itcast.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 查询文档<br>GET /heima/_doc/<span class="hljs-number">1</span><br><br># 删除文档<br>DELETE /heima/_doc/<span class="hljs-number">1</span><br><br># 全量修改文档<br>PUT /heima/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员高级Java讲师&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zy@itcast.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 局部修改文档<br>POST /heima/_update/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ZhaoYun@itcast.cn&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 批量新增文档<br>POST /_bulk<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;heima&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员C++讲师&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ww@itcast.cn&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;五&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;王&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;heima&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员前端讲师&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhangsan@itcast.cn&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;三&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;张&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br># 批量删除文档<br>POST /_bulk<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;delete&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;heima&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;delete&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;heima&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-JavaRestClient"><a href="#4-JavaRestClient" class="headerlink" title="4. JavaRestClient"></a>4. JavaRestClient</h2><h3 id="4-1-客户端初始化RestClient"><a href="#4-1-客户端初始化RestClient" class="headerlink" title="4.1 客户端初始化RestClient"></a>4.1 客户端初始化RestClient</h3><ol><li>在item-service模块中引入es的RestHighLevelClient依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>因为SpringBoot默认的ES版本是7.17.10，所以我们需要覆盖默认的ES版本：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>初始化RestHighLevelClient：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RestHighLevelClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>        HttpHost.create(<span class="hljs-string">&quot;http://192.168.150.101:9200&quot;</span>)<br>));<br></code></pre></td></tr></table></figure><h3 id="4-2-创建索引库"><a href="#4-2-创建索引库" class="headerlink" title="4.2 创建索引库"></a>4.2 创建索引库</h3><p>要实现对商品搜索，所以我们需要将商品添加到Elasticsearch中，不过需要根据搜索业务的需求来设定索引库结构，而不是一股脑的把MySQL数据写入Elasticsearch.</p><h4 id="4-2-1-商品Mapping映射"><a href="#4-2-1-商品Mapping映射" class="headerlink" title="4.2.1 商品Mapping映射"></a>4.2.1 商品Mapping映射</h4><p>结合数据库表结构，字段对应的mapping映射属性如下：</p><p><img src="/img/blogs/java/springcloud/es.6.png"></p><p>索引库文档结构:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /items<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;stock&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sold&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commentCount&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;isAD&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;boolean&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-2-在java中创建索引库"><a href="#4-2-2-在java中创建索引库" class="headerlink" title="4.2.2 在java中创建索引库"></a>4.2.2 在java中创建索引库</h4><ol><li>创建Request对象。<br>  因为是创建索引库的操作，因此Request是CreateIndexRequest。</li><li>添加请求参数<br>  其实就是Json格式的Mapping映射参数。因为json字符串很长，这里是定义了静态字符串常量MAPPING_TEMPLATE，让代码看起来更加优雅。</li><li>发送请求<br>  client.indices()方法的返回值是IndicesClient类型，封装了所有与索引库操作有关的方法。例如创建索引、删除索引、判断索引是否存在等</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">CreateIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateIndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    request.source(MAPPING_TEMPLATE, XContentType.JSON);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.indices().create(request, RequestOptions.DEFAULT);<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MAPPING_TEMPLATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;stock\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;image\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;category\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;sold\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;commentCount\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;isAD\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;boolean\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;updateTime\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;date\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="4-3-在java中删除和查询索引库"><a href="#4-3-在java中删除和查询索引库" class="headerlink" title="4.3 在java中删除和查询索引库"></a>4.3 在java中删除和查询索引库</h3><h4 id="4-3-1-删除索引库"><a href="#4-3-1-删除索引库" class="headerlink" title="4.3.1 删除索引库"></a>4.3.1 删除索引库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">DeleteIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteIndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    client.indices().delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-2-查询索引库"><a href="#4-3-2-查询索引库" class="headerlink" title="4.3.2 查询索引库"></a>4.3.2 查询索引库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testExistsIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">GetIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetIndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 3.输出</span><br>    System.err.println(exists ? <span class="hljs-string">&quot;索引库已经存在！&quot;</span> : <span class="hljs-string">&quot;索引库不存在！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-文档操作"><a href="#4-4-文档操作" class="headerlink" title="4.4 文档操作"></a>4.4 文档操作</h3><h4 id="4-4-1-新增文档"><a href="#4-4-1-新增文档" class="headerlink" title="4.4.1 新增文档"></a>4.4.1 新增文档</h4><ol><li>创建Request对象，这里是IndexRequest，因为添加文档就是创建倒排索引的过程</li><li>准备请求参数，本例中就是Json文档</li><li>发送请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.根据id查询商品数据</span><br>    <span class="hljs-type">Item</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> itemService.getById(<span class="hljs-number">100002644680L</span>);<br>    <span class="hljs-comment">// 2.转换为文档类型</span><br>    <span class="hljs-type">ItemDoc</span> <span class="hljs-variable">itemDoc</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(item, ItemDoc.class);<br>    <span class="hljs-comment">// 3.将ItemDTO转json</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> JSONUtil.toJsonStr(itemDoc);<br><br>    <span class="hljs-comment">// 1.准备Request对象</span><br>    <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>).id(itemDoc.getId());<br>    <span class="hljs-comment">// 2.准备Json文档</span><br>    request.source(doc, XContentType.JSON);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.index(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-2-查询文档"><a href="#4-4-2-查询文档" class="headerlink" title="4.4.2 查询文档"></a>4.4.2 查询文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetDocumentById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request对象</span><br>    <span class="hljs-type">GetRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetRequest</span>(<span class="hljs-string">&quot;items&quot;</span>).id(<span class="hljs-string">&quot;100002644680&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    <span class="hljs-type">GetResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.get(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 3.获取响应结果中的source</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> response.getSourceAsString();<br>    <br>    <span class="hljs-type">ItemDoc</span> <span class="hljs-variable">itemDoc</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, ItemDoc.class);<br>    System.out.println(<span class="hljs-string">&quot;itemDoc= &quot;</span> + ItemDoc);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-3-删除文档"><a href="#4-4-3-删除文档" class="headerlink" title="4.4.3 删除文档"></a>4.4.3 删除文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request，两个参数，第一个是索引库名，第二个是文档id</span><br>    <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(<span class="hljs-string">&quot;item&quot;</span>, <span class="hljs-string">&quot;100002644680&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    client.delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-4-修改文档"><a href="#4-4-4-修改文档" class="headerlink" title="4.4.4 修改文档"></a>4.4.4 修改文档</h4><ul><li>全量修改：本质是先根据id删除，再新增</li><li>局部修改：修改文档中的指定字段值</li></ul><p>我们主要关注局部修改的API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">UpdateRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateRequest</span>(<span class="hljs-string">&quot;items&quot;</span>, <span class="hljs-string">&quot;100002644680&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    request.doc(<br>            <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-number">58800</span>,<br>            <span class="hljs-string">&quot;commentCount&quot;</span>, <span class="hljs-number">1</span><br>    );<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.update(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-5-批量导入文档"><a href="#4-4-5-批量导入文档" class="headerlink" title="4.4.5 批量导入文档"></a>4.4.5 批量导入文档</h4><p>Bulk中添加了多个IndexRequest，就是批量新增功能:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBulk</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>();<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    request.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>).id(<span class="hljs-string">&quot;1&quot;</span>).source(<span class="hljs-string">&quot;json doc1&quot;</span>, XContentType.JSON));<br>    request.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;items&quot;</span>).id(<span class="hljs-string">&quot;2&quot;</span>).source(<span class="hljs-string">&quot;json doc2&quot;</span>, XContentType.JSON));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.bulk(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><p>采用循环遍历方式，每次导入1000条左右的数据:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testLoadItemDocs</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 分页查询商品数据</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">pageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        Page&lt;Item&gt; page = itemService.lambdaQuery().eq(Item::getStatus, <span class="hljs-number">1</span>).page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;Item&gt;(pageNo, size));<br>        <span class="hljs-comment">// 非空校验</span><br>        List&lt;Item&gt; items = page.getRecords();<br>        <span class="hljs-keyword">if</span> (CollUtils.isEmpty(items)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;加载第&#123;&#125;页数据，共&#123;&#125;条&quot;</span>, pageNo, items.size());<br>        <span class="hljs-comment">// 1.创建Request</span><br>        <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>        <span class="hljs-comment">// 2.准备参数，添加多个新增的Request</span><br>        <span class="hljs-keyword">for</span> (Item item : items) &#123;<br>            <span class="hljs-comment">// 2.1.转换为文档类型ItemDTO</span><br>            <span class="hljs-type">ItemDoc</span> <span class="hljs-variable">itemDoc</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(item, ItemDoc.class);<br>            <span class="hljs-comment">// 2.2.创建新增文档的Request对象</span><br>            request.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>()<br>                            .id(itemDoc.getId())<br>                            .source(JSONUtil.toJsonStr(itemDoc), XContentType.JSON));<br>        &#125;<br>        <span class="hljs-comment">// 3.发送请求</span><br>        client.bulk(request, RequestOptions.DEFAULT);<br><br>        <span class="hljs-comment">// 翻页</span><br>        pageNo++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-DSL查询"><a href="#5-DSL查询" class="headerlink" title="5. DSL查询"></a>5. DSL查询</h2><p>Elasticsearch的查询可以分为两大类：</p><ul><li>叶子查询（Leaf query clauses）：一般是在特定的字段里查询特定值，属于简单查询，很少单独使用。</li><li>复合查询（Compound query clauses）：以逻辑方式组合多个叶子查询或者更改叶子查询的行为方式。</li></ul><h3 id="5-1-叶子查询"><a href="#5-1-叶子查询" class="headerlink" title="5.1 叶子查询"></a>5.1 叶子查询</h3><p>叶子查询的类型：</p><ul><li>全文检索查询（Full Text Queries）：利用分词器对用户输入搜索条件先分词，得到词条，然后再利用倒排索引搜索词条。例如：<ul><li>match：</li><li>multi_match</li></ul></li><li>精确查询（Term-level queries）：不对用户输入搜索条件分词，根据字段内容精确值匹配。但只能查找keyword、数值、日期、boolean类型的字段。例如：<ul><li>ids</li><li>term</li><li>range</li></ul></li><li>地理坐标查询：用于搜索地理位置，搜索方式很多，例如：<ul><li>geo_bounding_box：按矩形搜索</li><li>geo_distance：按点和半径搜索</li></ul></li></ul><h4 id="5-1-1-全文检索查询"><a href="#5-1-1-全文检索查询" class="headerlink" title="5.1.1 全文检索查询"></a>5.1.1 全文检索查询</h4><p>match语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搜索条件&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>multi_match语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;multi_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搜索条件&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;字段1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;字段2&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;multi_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-1-2-精确查询"><a href="#5-1-2-精确查询" class="headerlink" title="5.1.2 精确查询"></a>5.1.2 精确查询</h4><p>词条级别的查询；作为一个词条，与搜索的字段内容精确值匹配。因此推荐查找keyword、数值、日期、boolean类型的字段。</p><p>term查询:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搜索条件&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>range查询:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>最小值<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>最大值<span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-复合查询"><a href="#5-2-复合查询" class="headerlink" title="5.2 复合查询"></a>5.2 复合查询</h3><ul><li>第一类：基于逻辑运算组合叶子查询，实现组合条件，例如<ul><li>bool</li></ul></li><li>第二类：基于某种算法修改查询时的文档相关性算分，从而改变文档排名。例如：<ul><li>function_score</li><li>dis_max</li></ul></li></ul><h4 id="bool查询"><a href="#bool查询" class="headerlink" title="bool查询"></a>bool查询</h4><p>bool查询，即布尔查询。就是利用逻辑运算来组合一个或多个查询子句的组合。bool查询支持的逻辑运算有：</p><ul><li>must：必须匹配每个子查询，类似“与”</li><li>should：选择性匹配子查询，类似“或”</li><li>must_not：必须不匹配，不参与算分，类似“非”</li><li>filter：必须匹配，不参与算分</li></ul><p>语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手机&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vivo&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;must_not&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2500</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>搜索手机，但品牌必须是华为，价格必须是900~1599：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手机&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">90000</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">159900</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-排序"><a href="#5-3-排序" class="headerlink" title="5.3 排序"></a>5.3 排序</h3><p>elasticsearch默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索结果排序。不过分词字段无法排序，<strong>能参与排序字段类型有：keyword类型、数值类型、地理坐标类型、日期类型</strong>等。</p><p>语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;排序字段&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;排序方式asc和desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>按照商品价格排序:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="5-4-分页"><a href="#5-4-分页" class="headerlink" title="5.4 分页"></a>5.4 分页</h3><p>elasticsearch 默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了</p><h4 id="5-4-1-基础分页"><a href="#5-4-1-基础分页" class="headerlink" title="5.4.1 基础分页"></a>5.4.1 基础分页</h4><p>elasticsearch中通过修改from、size参数来控制要返回的分页结果：</p><ul><li>from：从第几个文档开始</li><li>size：总共查询几个文档</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 分页开始的位置，默认为0</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 每页文档数量，默认10</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-4-2-深度分页"><a href="#5-4-2-深度分页" class="headerlink" title="5.4.2 深度分页"></a>5.4.2 深度分页</h4><p>elasticsearch的数据一般会采用分片存储，也就是把一个索引中的数据分成N份，存储到不同节点上。这种存储方式比较有利于数据扩展，但给分页带来了一些麻烦。<br>试想一下，假如我们现在要查询的是第999页数据呢，是不是要找第9990~10000的数据，那岂不是需要把每个分片中的前10000名数据都查询出来，汇总在一起，在内存中排序？如果查询的分页深度更深呢，需要一次检索的数据岂不是更多？</p><p><img src="/img/blogs/java/springcloud/es.7.png"></p><p>针对深度分页，elasticsearch提供了解决方案：</p><ul><li>search after：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</li></ul><h3 id="5-5-高亮"><a href="#5-5-高亮" class="headerlink" title="5.5 高亮"></a>5.5 高亮</h3><p>词条的高亮标签肯定是由服务端提供数据的时候已经加上的。</p><p>实现高亮的思路就是：</p><ul><li>用户输入搜索关键字搜索数据</li><li>服务端根据搜索关键字到elasticsearch搜索，并给搜索结果中的关键字词条添加html标签</li><li>前端提前给约定好的html标签添加CSS样式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;搜索字段&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搜索关键字&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;高亮字段名称&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pre_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;em&gt;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;post_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;/em&gt;&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="6-JavaRestClient查询"><a href="#6-JavaRestClient查询" class="headerlink" title="6. JavaRestClient查询"></a>6. JavaRestClient查询</h2><h3 id="6-1-文档搜索的基本步骤"><a href="#6-1-文档搜索的基本步骤" class="headerlink" title="6.1 文档搜索的基本步骤"></a>6.1 文档搜索的基本步骤</h3><ol><li>创建SearchRequest对象</li><li>准备request.source()，也就是DSL。</li><li>QueryBuilders来构建查询条件</li><li>传入request.source() 的 query() 方法</li><li>发送请求，得到结果</li><li>解析结果（参考JSON结果，从外到内，逐层解析）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatchAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    request.source().query(QueryBuilders.matchAllQuery());<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">searchHits</span> <span class="hljs-operator">=</span> response.getHits();<br>    <span class="hljs-comment">// 1.获取总条数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> searchHits.getTotalHits().value;<br>    System.out.println(<span class="hljs-string">&quot;共搜索到&quot;</span> + total + <span class="hljs-string">&quot;条数据&quot;</span>);<br>    <span class="hljs-comment">// 2.遍历结果数组</span><br>    SearchHit[] hits = searchHits.getHits();<br>    <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>        <span class="hljs-comment">// 3.得到_source，也就是原始json文档</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>        <span class="hljs-comment">// 4.反序列化并打印</span><br>        <span class="hljs-type">ItemDoc</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> JSONUtil.toBean(source, ItemDoc.class);<br>        System.out.println(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-叶子查询"><a href="#6-2-叶子查询" class="headerlink" title="6.2 叶子查询"></a>6.2 叶子查询</h3><p>match查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;脱脂牛奶&quot;</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>multi_match查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMultiMatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    request.source().query(QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;脱脂牛奶&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;category&quot;</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>range查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testRange</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    request.source().query(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">10000</span>).lte(<span class="hljs-number">30000</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>term查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testTerm</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    request.source().query(QueryBuilders.termQuery(<span class="hljs-string">&quot;brand&quot;</span>, <span class="hljs-string">&quot;华为&quot;</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-复合查询"><a href="#6-3-复合查询" class="headerlink" title="6.3 复合查询"></a>6.3 复合查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBool</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    <span class="hljs-comment">// 2.1.准备bool查询</span><br>    <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">bool</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>    <span class="hljs-comment">// 2.2.关键字搜索</span><br>    bool.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;脱脂牛奶&quot;</span>));<br>    <span class="hljs-comment">// 2.3.品牌过滤</span><br>    bool.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;brand&quot;</span>, <span class="hljs-string">&quot;德亚&quot;</span>));<br>    <span class="hljs-comment">// 2.4.价格过滤</span><br>    bool.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).lte(<span class="hljs-number">30000</span>));<br>    request.source().query(bool);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-4-排序和分页"><a href="#6-4-排序和分页" class="headerlink" title="6.4 排序和分页"></a>6.4 排序和分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageAndSort</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, pageSize = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    <span class="hljs-comment">// 2.1.搜索条件参数</span><br>    request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;脱脂牛奶&quot;</span>));<br>    <span class="hljs-comment">// 2.2.排序参数</span><br>    request.source().sort(<span class="hljs-string">&quot;price&quot;</span>, SortOrder.ASC);<br>    <span class="hljs-comment">// 2.3.分页参数</span><br>    request.source().from((pageNo - <span class="hljs-number">1</span>) * pageSize).size(pageSize);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-5-高亮"><a href="#6-5-高亮" class="headerlink" title="6.5 高亮"></a>6.5 高亮</h3><ul><li>条件同样是在request.source()中指定，只不过高亮条件要基于HighlightBuilder来构造</li><li>高亮响应结果与搜索的文档结果不在一起，需要单独解析</li></ul><p>查询:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testHighlight</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.组织请求参数</span><br>    <span class="hljs-comment">// 2.1.query条件</span><br>    request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;脱脂牛奶&quot;</span>));<br>    <span class="hljs-comment">// 2.2.高亮条件</span><br>    request.source().highlighter(<br>            SearchSourceBuilder.highlight()<br>                    .field(<span class="hljs-string">&quot;name&quot;</span>)<br>                    .preTags(<span class="hljs-string">&quot;&lt;em&gt;&quot;</span>)<br>                    .postTags(<span class="hljs-string">&quot;&lt;/em&gt;&quot;</span>)<br>    );<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>解析数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">searchHits</span> <span class="hljs-operator">=</span> response.getHits();<br>    <span class="hljs-comment">// 1.获取总条数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> searchHits.getTotalHits().value;<br>    System.out.println(<span class="hljs-string">&quot;共搜索到&quot;</span> + total + <span class="hljs-string">&quot;条数据&quot;</span>);<br>    <span class="hljs-comment">// 2.遍历结果数组</span><br>    SearchHit[] hits = searchHits.getHits();<br>    <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>        <span class="hljs-comment">// 3.得到_source，也就是原始json文档</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>        <span class="hljs-comment">// 4.反序列化</span><br>        <span class="hljs-type">ItemDoc</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> JSONUtil.toBean(source, ItemDoc.class);<br>        <span class="hljs-comment">// 5.获取高亮结果</span><br>        Map&lt;String, HighlightField&gt; hfs = hit.getHighlightFields();<br>        <span class="hljs-keyword">if</span> (CollUtils.isNotEmpty(hfs)) &#123;<br>            <span class="hljs-comment">// 5.1.有高亮结果，获取name的高亮结果</span><br>            <span class="hljs-type">HighlightField</span> <span class="hljs-variable">hf</span> <span class="hljs-operator">=</span> hfs.get(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-keyword">if</span> (hf != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 5.2.获取第一个高亮结果片段，就是商品名称的高亮值</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">hfName</span> <span class="hljs-operator">=</span> hf.getFragments()[<span class="hljs-number">0</span>].string();<br>                item.setName(hfName);<br>            &#125;<br>        &#125;<br>        System.out.println(item);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-数据聚合"><a href="#7-数据聚合" class="headerlink" title="7. 数据聚合"></a>7. 数据聚合</h2><h3 id="7-1-聚合的概念"><a href="#7-1-聚合的概念" class="headerlink" title="7.1 聚合的概念"></a>7.1 聚合的概念</h3><p>聚合（aggregations）可以让我们极其方便的实现对数据的统计、分析、运算</p><p>聚合常见的有三类：</p><ul><li>桶（Bucket）聚合：用来对文档做分组 </li><li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组</li><li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li><li>度量（Metric）聚合：用以计算一些值，比如：最大值、最小值、平均值等 </li><li>Avg：求平均值</li><li>Max：求最大值</li><li>Min：求最小值</li><li>Stats：同时求max、min、avg、sum等</li><li>管道（pipeline）聚合：其它聚合的结果为基础做进一步运算</li></ul><p><strong>注意</strong>：参加聚合的<strong>字段必须是keyword、日期、数值、布尔类型</strong></p><h3 id="7-2-DSL实现聚合"><a href="#7-2-DSL实现聚合" class="headerlink" title="7.2 DSL实现聚合"></a>7.2 DSL实现聚合</h3><h4 id="7-2-1-Bucket聚合"><a href="#7-2-1-Bucket聚合" class="headerlink" title="7.2.1 Bucket聚合"></a>7.2.1 Bucket聚合</h4><p>我们要统计所有商品中共有哪些商品分类，其实就是以分类（category）字段对数据分组</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;category_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;category&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>size：设置size为0，就是每页查0条，则结果中就不包含文档，只包含聚合</li><li>aggs：定义聚合<ul><li>category_agg：聚合名称，自定义，但不能重复<ul><li>terms：聚合的类型，按分类聚合，所以用term<ul><li>field：参与聚合的字段名称</li><li>size：希望返回的聚合结果的最大数量</li></ul></li></ul></li></ul></li></ul><h4 id="7-2-2-带条件聚合"><a href="#7-2-2-带条件聚合" class="headerlink" title="7.2.2 带条件聚合"></a>7.2.2 带条件聚合</h4><p>价格高于3000元的手机品牌有哪些</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手机&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">300000</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brand_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="7-2-3-Metric聚合"><a href="#7-2-3-Metric聚合" class="headerlink" title="7.2.3 Metric聚合"></a>7.2.3 Metric聚合</h4><p>我们需要对桶内的商品做运算，获取每个品牌价格的最小值、最大值、平均值。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /items/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手机&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">300000</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brand_agg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;stats_meric&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>stats_meric：聚合名称<ul><li>stats：聚合类型，stats是metric聚合的一种<ul><li>field：聚合字段，这里选择price，统计价格</li></ul></li></ul></li></ul><h3 id="7-3-JavaRestClient实现聚合"><a href="#7-3-JavaRestClient实现聚合" class="headerlink" title="7.3 JavaRestClient实现聚合"></a>7.3 JavaRestClient实现聚合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testAgg</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;items&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">bool</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery()<br>            .filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-string">&quot;手机&quot;</span>))<br>            .filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">300000</span>));<br>    request.source().query(bool).size(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 3.聚合参数</span><br>    request.source().aggregation(<br>            AggregationBuilders.terms(<span class="hljs-string">&quot;brand_agg&quot;</span>).field(<span class="hljs-string">&quot;brand&quot;</span>).size(<span class="hljs-number">5</span>)<br>    );<br>    <span class="hljs-comment">// 4.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br><br><br>    <span class="hljs-comment">// 5.解析聚合结果</span><br>    <span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> response.getAggregations();<br>    <span class="hljs-comment">// 5.1.获取品牌聚合</span><br>    <span class="hljs-type">Terms</span> <span class="hljs-variable">brandTerms</span> <span class="hljs-operator">=</span> aggregations.get(<span class="hljs-string">&quot;brand_agg&quot;</span>);<br>    <span class="hljs-comment">// 5.2.获取聚合中的桶</span><br>    List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();<br>    <span class="hljs-comment">// 5.3.遍历桶内数据</span><br>    <span class="hljs-keyword">for</span> (Terms.Bucket bucket : buckets) &#123;<br>        <span class="hljs-comment">// 5.4.获取桶内key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> bucket.getKeyAsString();<br>        System.out.print(<span class="hljs-string">&quot;brand = &quot;</span> + brand);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> bucket.getDocCount();<br>        System.out.println(<span class="hljs-string">&quot;; count = &quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考文献：<a href="https://b11et3un53m.feishu.cn/wiki/LDLew5xnDiDv7Qk2uPwcoeNpngf">https://b11et3un53m.feishu.cn/wiki/LDLew5xnDiDv7Qk2uPwcoeNpngf</a></p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>SpringCloud</tag>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ学习笔记</title>
    <link href="/2025/03/08/JAVA/SpringCloud/RabbitMQ/"/>
    <url>/2025/03/08/JAVA/SpringCloud/RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 align="center">RabbitMQ学习笔记</h1><h2 id="1-认识MQ"><a href="#1-认识MQ" class="headerlink" title="1. 认识MQ"></a>1. 认识MQ</h2><h3 id="1-1-同步调用"><a href="#1-1-同步调用" class="headerlink" title="1.1 同步调用"></a>1.1 同步调用</h3><p>在微服务架构中，同步调用（Synchronous Invocation）通常<strong>指一个服务调用另一个服务时，调用方必须等待被调用方处理完请求并返回响应后，才能继续执行后续逻辑</strong>。</p><p><img src="/img/blogs/java/springcloud/mq.1.png"></p><p><strong>特点</strong>：</p><ul><li>阻塞执行：调用方在等待返回结果时无法执行其他任务。</li><li>执行顺序严格：必须按顺序等待上一个任务完成后才能继续下一个任务。</li><li>适用于短时间执行的任务：如果被调用的方法执行时间较长，会影响系统的响应速度和并发能力。</li></ul><p><strong>存在的问题</strong>：</p><ul><li>拓展性差：每次有新的需求，现有支付逻辑都要跟着变化，代码经常变动，不符合开闭原则，拓展性不好。</li><li>性能下降：每次远程调用，调用者都是阻塞等待状态。最终整个业务的响应时长就是每次远程调用的执行时长之和</li><li>级联失败(雪崩问题)：当交易服务、通知服务出现故障时，整个事务都会回滚，交易失败。</li></ul><h3 id="1-2-异步调用"><a href="#1-2-异步调用" class="headerlink" title="1.2 异步调用"></a>1.2 异步调用</h3><p>在微服务架构中，异步调用（Asynchronous Invocation）指的是<strong>调用方在调用某个服务时，不需要等待其完成，而是立即返回并继续执行其他任务</strong>。<strong>被调用方在完成处理后</strong>，可以通过回调、轮询、<strong>消息队列</strong>等方式通知调用方。</p><p>异步调用方式其实就是基于消息通知的方式，一般包含三个角色：</p><ul><li>消息发送者：投递消息的人，就是原来的调用方</li><li>消息Broker：管理、暂存、转发消息，你可以把它理解成微信服务器</li><li>消息接收者：接收和处理消息的人，就是原来的服务提供方</li></ul><p><img src="/img/blogs/java/springcloud/mq.2.png"></p><p>在异步调用中，发送者不再直接同步调用接收者的业务接口，而是发送一条消息投递给消息Broker。然后接收者根据自己的需求从消息Broker那里订阅消息。每当发送方发送消息后，接受者都能获取消息并处理。</p><p><img src="/img/blogs/java/springcloud/mq.3.png"></p><p>异步调用的优势包括：</p><ul><li>耦合度更低</li><li>性能更好</li><li>业务拓展性强</li><li>故障隔离，避免级联失败</li></ul><p>异步通信存在下列缺点：</p><ul><li>完全依赖于Broker的可靠性、安全性和性能</li><li>架构复杂，后期维护和调试麻烦</li></ul><h3 id="1-3-常见MQ技术对比"><a href="#1-3-常见MQ技术对比" class="headerlink" title="1.3 常见MQ技术对比"></a>1.3 常见MQ技术对比</h3><table><thead><tr><th>常见MQ</th><th>RabbitMQ</th><th>ActiveMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td><strong>公司&#x2F;社区</strong></td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td><strong>开发语言</strong></td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td><strong>协议支持</strong></td><td>AMQP, XMPP, SMTP, STOMP</td><td>OpenWire, STOMP, REST, XMPP, AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td><strong>可用性</strong></td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td><strong>单机吞吐量</strong></td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td><strong>消息延迟</strong></td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td><strong>消息可靠性</strong></td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><h2 id="2-RabbitMQ"><a href="#2-RabbitMQ" class="headerlink" title="2. RabbitMQ"></a>2. RabbitMQ</h2><h3 id="2-1-RabbitMQ架构"><a href="#2-1-RabbitMQ架构" class="headerlink" title="2.1 RabbitMQ架构"></a>2.1 RabbitMQ架构</h3><ul><li>publisher：生产者，也就是发送消息的一方</li><li>consumer：消费者，也就是消费消息的一方</li><li>queue：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</li><li>exchange：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</li><li>virtual host：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</li></ul><p><img src="/img/blogs/java/springcloud/mq.4.png"></p><p>生产者发送到交换机的消息，只会路由到与其绑定的队列，因此仅仅创建队列是不够的，我们还需要将其与交换机绑定</p><h3 id="2-2-数据隔离"><a href="#2-2-数据隔离" class="headerlink" title="2.2 数据隔离"></a>2.2 数据隔离</h3><ul><li>给每个项目创建不同的virtual host，将每个项目的数据隔离。</li><li>给每个项目创建独立的运维账号，将管理权限分离。</li></ul><h2 id="3-SpringAMQP"><a href="#3-SpringAMQP" class="headerlink" title="3. SpringAMQP"></a>3. SpringAMQP</h2><h3 id="3-1-入门案例"><a href="#3-1-入门案例" class="headerlink" title="3.1 入门案例"></a>3.1 入门案例</h3><h4 id="3-1-1-引入依赖"><a href="#3-1-1-引入依赖" class="headerlink" title="3.1.1 引入依赖"></a>3.1.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2-添加配置"><a href="#3-1-2-添加配置" class="headerlink" title="3.1.2 添加配置"></a>3.1.2 添加配置</h4><p>在publisher服务的application.yml中添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span> <span class="hljs-comment"># 你的虚拟机IP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/hmall</span> <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">hmall</span> <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><h4 id="3-1-3-发送消息"><a href="#3-1-3-发送消息" class="headerlink" title="3.1.3 发送消息"></a>3.1.3 发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 队列名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        <span class="hljs-comment">// 消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, spring amqp!&quot;</span>;<br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(queueName, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-4-接收消息"><a href="#3-1-4-接收消息" class="headerlink" title="3.1.4 接收消息"></a>3.1.4 接收消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br>        <span class="hljs-comment">// 利用RabbitListener来声明要监听的队列信息</span><br>    <span class="hljs-comment">// 将来一旦监听的队列中有了消息，就会推送给当前服务，调用当前方法，处理消息。</span><br>    <span class="hljs-comment">// 可以看到方法体中接收的就是消息体的内容</span><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueueMessage</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-WorkQueues模型"><a href="#3-2-WorkQueues模型" class="headerlink" title="3.2 WorkQueues模型"></a>3.2 WorkQueues模型</h3><p>让多个消费者绑定到一个队列，共同消费队列中的消息。可以使用WorkQueues模型，多个消费者共同处理消息处理，消息处理的速度就能大大提高了。</p><p><img src="/img/blogs/java/springcloud/mq.5.png"></p><h4 id="3-2-1-消息发送"><a href="#3-2-1-消息发送" class="headerlink" title="3.2.1 消息发送"></a>3.2.1 消息发送</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * workQueue</span><br><span class="hljs-comment">     * 向队列中不停发送消息，模拟消息堆积。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWorkQueue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, message_&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>        <span class="hljs-comment">// 发送消息，每20毫秒发送一次，相当于每秒发送50条消息</span><br>        rabbitTemplate.convertAndSend(queueName, message + i);<br>        Thread.sleep(<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-消息接收"><a href="#3-2-2-消息接收" class="headerlink" title="3.2.2 消息接收"></a>3.2.2 消息接收</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;work.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWorkQueue1</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">20</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;work.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWorkQueue2</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.err.println(<span class="hljs-string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>消费者1 sleep了20毫秒，相当于每秒钟处理50个消息</li><li>消费者2 sleep了200毫秒，相当于每秒处理5个消息</li></ul><h4 id="3-2-3-测试结果"><a href="#3-2-3-测试结果" class="headerlink" title="3.2.3 测试结果"></a>3.2.3 测试结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">消费者<span class="hljs-number">1</span>接收到消息：【hello, message_0】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00.869555300</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_1】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00.884518</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_2】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00.907454400</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_4】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00.953332100</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_6】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00.997867300</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_8】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.042178700</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_3】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.086478800</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_10】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.087476600</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_12】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.132578300</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_14】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.175851200</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_16】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.218533400</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_18】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.261322900</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_5】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.287003700</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_20】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.304412400</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_22】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.349950100</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_24】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.394533900</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_26】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.439876500</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_28】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.482937800</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_7】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.488977100</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_30】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.526409300</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_32】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.572148</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_34】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.618264800</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_36】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.660780600</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_9】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.689189300</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_38】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.705261</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_40】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.746927300</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_42】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.789835</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_44】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.834393100</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_46】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.875312100</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_11】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.889969500</span><br>消费者<span class="hljs-number">1</span>接收到消息：【hello, message_48】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01.920702500</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_13】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">02.090725900</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_15】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">02.293060600</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_17】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">02.493748</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_19】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">02.696635100</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_21】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">02.896809700</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_23】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">03.099533400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_25】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">03.301446400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_27】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">03.504999100</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_29】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">03.705702500</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_31】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">03.906601200</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_33】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">04.108118500</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_35】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">04.308945400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_37】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">04.511547700</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_39】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">04.714038400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_41】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">04.916192700</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_43】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">05.116286400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_45】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">05.318055100</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_47】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">05.520656400</span><br>消费者<span class="hljs-number">2.</span>.......接收到消息：【hello, message_49】<span class="hljs-number">21</span>:<span class="hljs-number">06</span>:<span class="hljs-number">05.723106700</span><br></code></pre></td></tr></table></figure><p>可以看到消费者1和消费者2竟然每人消费了25条消息：</p><ul><li>消费者1很快完成了自己的25条消息</li><li>消费者2却在缓慢的处理自己的25条消息。<br>也就是说<strong>消息是平均分配给每个消费者</strong>，并没有考虑到消费者的处理能力。导致1个消费者空闲，另一个消费者忙的不可开交。</li></ul><h4 id="3-2-4-能者多劳配置"><a href="#3-2-4-能者多劳配置" class="headerlink" title="3.2.4 能者多劳配置"></a>3.2.4 能者多劳配置</h4><p>修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span><br></code></pre></td></tr></table></figure><p>再次测试发现，由于消费者1处理速度较快，所以处理了更多的消息；消费者2处理速度较慢，只处理了6条消息。而最终总的执行耗时也在1秒左右，大大提升。<br>正所谓能者多劳，这样充分利用了每一个消费者的处理能力，可以有效避免消息积压问题。</p><h4 id="3-2-5-Work模型总结"><a href="#3-2-5-Work模型总结" class="headerlink" title="3.2.5 Work模型总结"></a>3.2.5 Work模型总结</h4><ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置prefetch来控制消费者预取的消息数量</li></ul><h3 id="3-3-交换机"><a href="#3-3-交换机" class="headerlink" title="3.3 交换机"></a>3.3 交换机</h3><p>交换机的类型：</p><ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列。我们最早在控制台使用的正是Fanout交换机</li><li>Direct：订阅，基于RoutingKey（路由key）发送给订阅了消息的队列</li><li>Topic：通配符订阅，与Direct类似，只不过RoutingKey可以使用通配符</li></ul><h4 id="3-3-1-Fanout交换机"><a href="#3-3-1-Fanout交换机" class="headerlink" title="3.3.1 Fanout交换机"></a>3.3.1 Fanout交换机</h4><p><strong>广播</strong>交换机，交换机把消息发送给绑定过的所有队列，每个队列的消费者都能收到消息</p><p><img src="/img/blogs/java/springcloud/mq.6.png"></p><ol><li>消息发送</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFanoutExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hmall.fanout&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, everyone!&quot;</span>;<br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>消息接收</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFanoutExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hmall.fanout&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, everyone!&quot;</span>;<br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><h4 id="3-3-2-Direct交换机"><a href="#3-3-2-Direct交换机" class="headerlink" title="3.3.2 Direct交换机"></a>3.3.2 Direct交换机</h4><p>Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 RoutingKey。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的Routing Key进行判断，<strong>只有队列的Routingkey与消息的 Routing key完全一致</strong>，才会接收到消息</li></ul><p><img src="/img/blogs/java/springcloud/mq.7.png"></p><h5 id="3-3-2-1-消息接收"><a href="#3-3-2-1-消息接收" class="headerlink" title="3.3.2.1 消息接收"></a>3.3.2.1 消息接收</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;direct.queue1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue1</span><span class="hljs-params">(String msg)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;direct.queue2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue2</span><span class="hljs-params">(String msg)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2接收到direct.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-2-2-消息发送"><a href="#3-3-2-2-消息发送" class="headerlink" title="3.3.2.2 消息发送"></a>3.3.2.2 消息发送</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendDirectExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hmall.direct&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;最新报道，哥斯拉是居民自治巨型气球，虚惊一场！&quot;</span>;<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;blue&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时只有<code>blue</code>的消费者才会收到消息，也就是消费者1</p><h5 id="3-3-2-3-总结"><a href="#3-3-2-3-总结" class="headerlink" title="3.3.2.3 总结"></a>3.3.2.3 总结</h5><p>Direct交换机与Fanout交换机的差异？</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li></ul><h4 id="3-3-3-Topic交换机"><a href="#3-3-3-Topic交换机" class="headerlink" title="3.3.3 Topic交换机"></a>3.3.3 Topic交换机</h4><p>Topic类型的Exchange与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。<br>只不过Topic类型Exchange可以让队列在绑定BindingKey 的时候使用通配符！</p><p>通配符规则：</p><ul><li>#：匹配一个或多个词</li><li>*：匹配不多不少恰好1个词</li></ul><p>举例：</p><ul><li>item.#：能够匹配item.spu.insert 或者 item.spu</li><li>item.*：只能匹配item.spu</li></ul><p><img src="/img/blogs/java/springcloud/mq.8.png"></p><ol><li>消息发送</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * topicExchange</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendTopicExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hmall.topic&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;china.news&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>消息接收</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;topic.queue1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到topic.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;topic.queue2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2接收到topic.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Direct交换机与Topic交换机的差异</li></ol><ul><li>Topic交换机接收的消息RoutingKey必须是多个单词，以 . 分割</li><li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li><li>#：代表0个或多个词</li><li>*：代表1个词</li></ul><h3 id="3-4-声明队列和交换机"><a href="#3-4-声明队列和交换机" class="headerlink" title="3.4 声明队列和交换机"></a>3.4 声明队列和交换机</h3><p>Spring提供了基于注解方式来声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-消息转换器-JSON转换器"><a href="#3-5-消息转换器-JSON转换器" class="headerlink" title="3.5 消息转换器(JSON转换器)"></a>3.5 消息转换器(JSON转换器)</h3><p>默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>因此可以使用JSON方式来做序列化和反序列化。</p><h4 id="3-5-1-引入依赖"><a href="#3-5-1-引入依赖" class="headerlink" title="3.5.1 引入依赖"></a>3.5.1 引入依赖</h4><p>在publisher和consumer两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-5-2-配置消息转换器"><a href="#3-5-2-配置消息转换器" class="headerlink" title="3.5.2 配置消息转换器"></a>3.5.2 配置消息转换器</h4><p>在publisher和consumer两个服务的启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">messageConverter</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 1.定义消息转换器</span><br>    <span class="hljs-type">Jackson2JsonMessageConverter</span> <span class="hljs-variable">jackson2JsonMessageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>    <span class="hljs-comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span><br>    jackson2JsonMessageConverter.setCreateMessageIds(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> jackson2JsonMessageConverter;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-3-接收消息"><a href="#3-5-3-接收消息" class="headerlink" title="3.5.3 接收消息"></a>3.5.3 接收消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;object.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueueMessage</span><span class="hljs-params">(Map&lt;String, Object&gt; msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到object.queue消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-MQ消息的可靠性"><a href="#4-MQ消息的可靠性" class="headerlink" title="4. MQ消息的可靠性"></a>4. MQ消息的可靠性</h2><p>在微服务架构中，消息队列（MQ）的可靠性指的是<strong>消息在生产、传输和消费的过程中不会丢失、不会重复、不被篡改，并且能够按预期被正确消费</strong>。确保 MQ 可靠性对于保证业务数据一致性、提高系统稳定性至关重要。</p><p>消息从生产者到消费者的每一步都可能导致消息丢失：</p><ul><li>发送消息时丢失：<ul><li>生产者发送消息时连接MQ失败</li><li>生产者发送消息到达MQ后未找到Exchange</li><li>生产者发送消息到达MQ的Exchange后，未找到合适的Queue</li><li>消息到达MQ后，处理消息的进程发生异常</li></ul></li><li>MQ导致消息丢失：<ul><li>消息到达MQ，保存到队列后，尚未消费就突然宕机</li></ul></li><li>消费者处理消息时：<ul><li>消息接收后尚未处理突然宕机</li><li>消息接收后处理过程中抛出异常</li></ul></li></ul><h3 id="4-1-发送者的可靠性"><a href="#4-1-发送者的可靠性" class="headerlink" title="4.1 发送者的可靠性"></a>4.1 发送者的可靠性</h3><h4 id="4-1-1-生产者重试机制"><a href="#4-1-1-生产者重试机制" class="headerlink" title="4.1.1 生产者重试机制"></a>4.1.1 生产者重试机制</h4><p>生产者发送消息时，出现了网络故障，导致与MQ的连接中断。<br>为了解决这个问题，SpringAMQP提供的消息发送时的<strong>重试机制。即：当RabbitTemplate与MQ连接超时后，多次重试</strong>。</p><p>修改publisher模块的application.yaml文件，添加下面的内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">connection-timeout:</span> <span class="hljs-string">1s</span> <span class="hljs-comment"># 设置MQ的连接超时时间</span><br>    <span class="hljs-attr">template:</span><br>      <span class="hljs-attr">retry:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启超时重试机制</span><br>        <span class="hljs-attr">initial-interval:</span> <span class="hljs-string">1000ms</span> <span class="hljs-comment"># 失败后的初始等待时间</span><br>        <span class="hljs-attr">multiplier:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 失败后下次的等待时长倍数，下次等待时长 = initial-interval * multiplier</span><br>        <span class="hljs-attr">max-attempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 最大重试次数</span><br></code></pre></td></tr></table></figure><p>注意：当网络不稳定的时候，利用重试机制可以有效提高消息发送的成功率。不过SpringAMQP提供的<strong>重试机制是阻塞式的重试</strong>，也就是说多次重试等待的过程中，当前线程是被阻塞的。<br>如果对于业务性能有要求，建议禁用重试机制。如果一定要使用，请合理配置等待时长和重试次数，当然也可以考虑使用异步线程来执行发送消息的代码。</p><h4 id="4-1-2-生产者确认机制-一般情况下不建议开启"><a href="#4-1-2-生产者确认机制-一般情况下不建议开启" class="headerlink" title="4.1.2 生产者确认机制(一般情况下不建议开启)"></a>4.1.2 生产者确认机制(一般情况下不建议开启)</h4><p>RabbitMQ提供了生产者消息确认机制，包括Publisher Confirm和Publisher Return两种。在开启确认机制的情况下，当生产者发送消息给MQ后，MQ会根据消息处理的情况返回不同的回执。</p><p><img src="/img/blogs/java/springcloud/mq.9.png"></p><p>总结：</p><ul><li>当消息投递到MQ，但是路由失败时，通过Publisher Return返回异常信息，同时返回ack的确认信息，代表投递成功</li><li>临时消息投递到了MQ，并且入队成功，返回ACK，告知投递成功</li><li>持久消息投递到了MQ，并且入队完成持久化，返回ACK ，告知投递成功</li><li>其它情况都会返回NACK，告知投递失败</li></ul><h5 id="4-1-2-1-开启生产者确认"><a href="#4-1-2-1-开启生产者确认" class="headerlink" title="4.1.2.1 开启生产者确认"></a>4.1.2.1 开启生产者确认</h5><p>在publisher模块的application.yaml中添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">correlated</span> <span class="hljs-comment"># 开启publisher confirm机制，并设置confirm类型</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启publisher return机制</span><br></code></pre></td></tr></table></figure><p>这里publisher-confirm-type有三种模式可选：</p><ul><li>none：关闭confirm机制</li><li>simple：同步阻塞等待MQ的回执</li><li>correlated：MQ异步回调返回回执(推荐)</li></ul><h5 id="4-1-2-2-定义ReturnCallback"><a href="#4-1-2-2-定义ReturnCallback" class="headerlink" title="4.1.2.2 定义ReturnCallback"></a>4.1.2.2 定义ReturnCallback</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        rabbitTemplate.setReturnsCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RabbitTemplate</span>.ReturnsCallback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(ReturnedMessage returned)</span> &#123;<br>                log.error(<span class="hljs-string">&quot;触发return callback,&quot;</span>);<br>                log.debug(<span class="hljs-string">&quot;exchange: &#123;&#125;&quot;</span>, returned.getExchange());<br>                log.debug(<span class="hljs-string">&quot;routingKey: &#123;&#125;&quot;</span>, returned.getRoutingKey());<br>                log.debug(<span class="hljs-string">&quot;message: &#123;&#125;&quot;</span>, returned.getMessage());<br>                log.debug(<span class="hljs-string">&quot;replyCode: &#123;&#125;&quot;</span>, returned.getReplyCode());<br>                log.debug(<span class="hljs-string">&quot;replyText: &#123;&#125;&quot;</span>, returned.getReplyText());<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-1-2-3-定义ConfirmCallback"><a href="#4-1-2-3-定义ConfirmCallback" class="headerlink" title="4.1.2.3 定义ConfirmCallback"></a>4.1.2.3 定义ConfirmCallback</h5><p>CorrelationData中包含两个核心的东西：</p><ul><li>id：消息的唯一标示，MQ对不同的消息的回执以此做判断，避免混淆</li><li>SettableListenableFuture：回执结果的Future对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPublisherConfirm</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.创建CorrelationData</span><br>    <span class="hljs-type">CorrelationData</span> <span class="hljs-variable">cd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>();<br>    <span class="hljs-comment">// 2.给Future添加ConfirmCallback</span><br>    cd.getFuture().addCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ListenableFutureCallback</span>&lt;CorrelationData.Confirm&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailure</span><span class="hljs-params">(Throwable ex)</span> &#123;<br>            <span class="hljs-comment">// 2.1.Future发生异常时的处理逻辑，基本不会触发</span><br>            log.error(<span class="hljs-string">&quot;send message fail&quot;</span>, ex);<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(CorrelationData.Confirm result)</span> &#123;<br>            <span class="hljs-comment">// 2.2.Future接收到回执的处理逻辑，参数中的result就是回执内容</span><br>            <span class="hljs-keyword">if</span>(result.isAck())&#123; <span class="hljs-comment">// result.isAck()，boolean类型，true代表ack回执，false 代表 nack回执</span><br>                log.debug(<span class="hljs-string">&quot;发送消息成功，收到 ack!&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// result.getReason()，String类型，返回nack时的异常描述</span><br>                log.error(<span class="hljs-string">&quot;发送消息失败，收到 nack, reason : &#123;&#125;&quot;</span>, result.getReason());<br>            &#125;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 3.发送消息</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;hmall.direct&quot;</span>, <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>, cd);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-MQ的可靠性"><a href="#4-2-MQ的可靠性" class="headerlink" title="4.2 MQ的可靠性"></a>4.2 MQ的可靠性</h3><p>消息到达MQ以后，因为<strong>MQ是基于内存存储的，如果内存空间被消息占满，如果MQ不能及时保存，也会导致消息丢失</strong><br>有两种解决方法：</p><ul><li>数据持久化</li><li>LazyQueue(推荐)</li></ul><h4 id="4-2-1-数据持久化"><a href="#4-2-1-数据持久化" class="headerlink" title="4.2.1 数据持久化"></a>4.2.1 数据持久化</h4><p>为了提升性能，默认情况下MQ的数据都是在内存存储的临时数据，重启后就会消失。为了保证数据的可靠性，必须配置数据持久化，包括：</p><ul><li>交换机持久化</li><li>队列持久化</li><li>消息持久化</li></ul><p>在控制台配置相关的持久化模式，即可开启数据持久化</p><h4 id="4-2-2-LazyQueue"><a href="#4-2-2-LazyQueue" class="headerlink" title="4.2.2 LazyQueue"></a>4.2.2 LazyQueue</h4><p>从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的模式，也就是惰性队列。惰性队列的特征如下：</p><ul><li><strong>接收到消息后直接存入磁盘而非内存</strong></li><li>消费者要<strong>消费消息时才会从磁盘中读取并加载到内存</strong>（也就是懒加载）</li><li>支持数百万条的消息存储</li></ul><p>而在3.12版本之后，LazyQueue已经成为所有队列的默认格式。因此官方推荐升级MQ为3.12版本或者所有队列都设置为LazyQueue模式。</p><h3 id="4-3-消费者的可靠性"><a href="#4-3-消费者的可靠性" class="headerlink" title="4.3 消费者的可靠性"></a>4.3 消费者的可靠性</h3><p>消息投递给消费者并不代表就一定被正确消费了，可能出现的故障有很多，比如：</p><ul><li>消息投递的过程中出现了网络故障</li><li>消费者接收到消息后突然宕机</li><li>消费者接收到消息后，因处理不当导致异常</li></ul><h4 id="4-3-1-消费者确认机制"><a href="#4-3-1-消费者确认机制" class="headerlink" title="4.3.1 消费者确认机制"></a>4.3.1 消费者确认机制</h4><p>消费者处理消息结束后，应该向RabbitMQ发送一个回执，告知RabbitMQ自己消息处理状态。回执有三种可选值：</p><ul><li>ack：成功处理消息，RabbitMQ从队列中删除该消息</li><li>nack：消息处理失败，RabbitMQ需要再次投递消息</li><li>reject：消息处理失败并拒绝该消息，RabbitMQ从队列中删除该消息</li></ul><p><img src="/img/blogs/java/springcloud/mq.10.png"></p><p>SpringAMQP帮我们实现了消息确认。并允许我们通过配置文件设置ACK处理方式，有三种模式：</p><ul><li>none：不处理。即消息投递给消费者后立刻ack，消息会立刻从MQ删除。非常不安全，不建议使用</li><li>manual：手动模式。需要自己在业务代码中调用api，发送ack或reject，存在业务入侵，但更灵活</li><li>auto：自动模式。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回ack.  当业务出现异常时，根据异常判断返回不同结果：<ul><li>如果是业务异常，会自动返回nack；</li><li>如果是消息处理或校验异常，自动返回reject;</li></ul></li></ul><p>修改SpringAMQP的ACK处理方式:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">none</span> <span class="hljs-comment"># 不做处理</span><br></code></pre></td></tr></table></figure><h4 id="4-3-2-失败重试机制"><a href="#4-3-2-失败重试机制" class="headerlink" title="4.3.2 失败重试机制"></a>4.3.2 失败重试机制</h4><p>当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者。如果消费者再次执行依然出错，消息会再次requeue到队列，再次投递，直到消息处理成功为止。<br>极端情况就是消费者一直无法执行成功，那么<strong>消息requeue就会无限循环</strong>，导致mq的消息处理飙升，带来不必要的压力。</p><p>修改consumer服务的application.yml文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">retry:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启消费者失败重试</span><br>          <span class="hljs-attr">initial-interval:</span> <span class="hljs-string">1000ms</span> <span class="hljs-comment"># 初识的失败等待时长为1秒</span><br>          <span class="hljs-attr">multiplier:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span><br>          <span class="hljs-attr">max-attempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 最大重试次数</span><br>          <span class="hljs-attr">stateless:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span><br></code></pre></td></tr></table></figure><ul><li>重试达到最大次数后，Spring会返回reject，消息会被丢弃</li></ul><h4 id="4-3-3-失败处理策略"><a href="#4-3-3-失败处理策略" class="headerlink" title="4.3.3 失败处理策略"></a>4.3.3 失败处理策略</h4><p>Spring允许我们自定义重试次数耗尽后的消息处理策略，这个策略是由MessageRecovery接口来定义的，它有3个不同实现：</p><ul><li>RejectAndDontRequeueRecoverer：重试耗尽后，直接reject，丢弃消息。默认就是这种方式 </li><li>ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队 </li><li>RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机 (推荐)</li></ul><ul><li>RepublishMessageRecoverer: 失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</li></ul><p>在consumer服务中定义处理失败消息的交换机和队列,定义一个RepublishMessageRecoverer，关联队列和交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnProperty(name = &quot;spring.rabbitmq.listener.simple.retry.enabled&quot;, havingValue = &quot;true&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorMessageConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">errorMessageExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(<span class="hljs-string">&quot;error.direct&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">errorQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;error.queue&quot;</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">errorBinding</span><span class="hljs-params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageRecoverer <span class="hljs-title function_">republishMessageRecoverer</span><span class="hljs-params">(RabbitTemplate rabbitTemplate)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="hljs-string">&quot;error.direct&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-业务幂等性"><a href="#4-4-业务幂等性" class="headerlink" title="4.4 业务幂等性"></a>4.4 业务幂等性</h3><p>在程序开发中，则是指<strong>同一个业务，执行一次或多次对业务状态的影响是一致的</strong>。例如：</p><ul><li>根据id删除数据</li><li>查询数据</li><li>新增数据<br>数据的更新往往不是幂等的，如果<strong>重复执行可能造成不一样的后果</strong>。比如：</li><li>取消订单，恢复库存的业务。如果多次恢复就会出现库存重复增加的情况</li><li>退款业务。重复退款对商家而言会有经济损失。</li></ul><p>所以，我们要尽可能避免业务被重复执行。</p><h4 id="4-4-1-唯一消息ID"><a href="#4-4-1-唯一消息ID" class="headerlink" title="4.4.1 唯一消息ID"></a>4.4.1 唯一消息ID</h4><ol><li>每一条消息都生成一个唯一的id，与消息一起投递给消费者。</li><li>消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库</li><li>如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理。</li></ol><p>SpringAMQP的MessageConverter自带了MessageID的功能，我们只要开启这个功能即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">messageConverter</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 1.定义消息转换器</span><br>    <span class="hljs-type">Jackson2JsonMessageConverter</span> <span class="hljs-variable">jjmc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>    <span class="hljs-comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span><br>    jjmc.setCreateMessageIds(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> jjmc;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-2-业务判断"><a href="#4-4-2-业务判断" class="headerlink" title="4.4.2 业务判断"></a>4.4.2 业务判断</h4><p>业务判断就是基于业务本身的逻辑或状态来判断是否是重复的请求或消息。<br>当前案例中，处理消息的业务逻辑是把订单状态从未支付修改为已支付。因此我们就可以<strong>在执行业务时判断订单状态是否是未支付</strong>，如果不是则证明订单已经被处理过，无需重复处理。</p><p><img src="/img/blogs/java/springcloud/mq.11.png"></p><p>以支付修改订单的业务为例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">markOrderPaySuccess</span><span class="hljs-params">(Long orderId)</span> &#123;<br>    <span class="hljs-comment">// 1.查询订单</span><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">old</span> <span class="hljs-operator">=</span> getById(orderId);<br>    <span class="hljs-comment">// 2.判断订单状态</span><br>    <span class="hljs-keyword">if</span> (old == <span class="hljs-literal">null</span> || old.getStatus() != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 订单不存在或者订单状态不是1，放弃处理</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 3.尝试更新订单</span><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>    order.setId(orderId);<br>    order.setStatus(<span class="hljs-number">2</span>);<br>    order.setPayTime(LocalDateTime.now());<br>    updateById(order);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-兜底方案"><a href="#4-5-兜底方案" class="headerlink" title="4.5 兜底方案"></a>4.5 兜底方案</h3><p>虽然我们利用各种机制尽可能增加了消息的可靠性，但也不好说能保证消息100%的可靠。万一真的MQ通知失败该怎么办呢？有没有其它兜底方案，能够确保订单的支付状态一致呢？</p><p>既然MQ通知不一定发送到交易服务，那么<strong>交易服务就必须自己主动去查询支付状态</strong>。这样即便支付服务的MQ通知失败，我们依然能<strong>通过主动查询来保证订单状态的一致</strong>。</p><p><img src="/img/blogs/java/springcloud/mq.12.png"></p><p>通常我们采取的措施就是利用<strong>定时任务定期查询</strong>，例如每隔20秒就查询一次，<strong>并判断支付状态</strong>。如果发现订单已经支付，则立刻更新订单状态为已支付即可。</p><h3 id="4-6-支付服务与交易服务之间的订单状态一致性是如何保证的？"><a href="#4-6-支付服务与交易服务之间的订单状态一致性是如何保证的？" class="headerlink" title="4.6 支付服务与交易服务之间的订单状态一致性是如何保证的？"></a>4.6 支付服务与交易服务之间的订单状态一致性是如何保证的？</h3><ul><li>首先，支付服务会正在用户支付成功以后利用MQ消息通知交易服务，完成订单状态同步。</li><li>其次，为了保证MQ消息的可靠性，我们采用了生产者确认机制、消费者确认、消费者失败重试等策略，确保消息投递的可靠性</li><li>最后，我们还在交易服务设置了定时任务，定期查询订单支付状态。这样即便MQ通知失败，还可以利用定时任务作为兜底方案，确保订单支付状态的最终一致性。</li></ul><h2 id="5-延迟消息"><a href="#5-延迟消息" class="headerlink" title="5. 延迟消息"></a>5. 延迟消息</h2><p>对于超过一定时间未支付的订单，应该立刻取消订单并释放占用的库存。像这种<strong>在一段时间以后才执行的任务，我们称之为延迟任务</strong>，而要实现延迟任务，最简单的方案就是利用MQ的延迟消息了。</p><p>在RabbitMQ中实现延迟消息也有两种方案：</p><ul><li>死信交换机+TTL</li><li>延迟消息插件(推荐)</li></ul><h3 id="5-1-死信交换机"><a href="#5-1-死信交换机" class="headerlink" title="5.1 死信交换机"></a>5.1 死信交换机</h3><p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p><ul><li>消费者使用basic.reject或 basic.nack声明消费失败，并且消息的requeue参数设置为false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息满了，无法投递</li></ul><p><img src="/img/blogs/java/springcloud/mq.13.png"></p><ul><li>利用 TTL 让消息在普通队列中延迟一段时间。</li><li>超时后，消息进入死信交换机，再转发到真正的目标队列。</li><li>消费者监听目标队列，延迟时间一到，才会收到消息。</li></ul><h3 id="5-2-DelayExchange插件-推荐"><a href="#5-2-DelayExchange插件-推荐" class="headerlink" title="5.2 DelayExchange插件(推荐)"></a>5.2 DelayExchange插件(推荐)</h3><p>RabbitMQ社区提供了一个延迟消息插件来实现相同的效果</p><p><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange">插件下载地址</a></p><p><strong>声明延迟交换机</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        value = @Queue(name = &quot;delay.queue&quot;, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        exchange = @Exchange(name = &quot;delay.direct&quot;, delayed = &quot;true&quot;),</span><br><span class="hljs-meta">        key = &quot;delay&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDelayMessage</span><span class="hljs-params">(String msg)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;接收到delay.queue的延迟消息：&#123;&#125;&quot;</span>, msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>发送延迟消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPublisherDelayMessage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.创建消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, delayed message&quot;</span>;<br>    <span class="hljs-comment">// 2.发送消息，利用消息后置处理器添加消息头</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;delay.direct&quot;</span>, <span class="hljs-string">&quot;delay&quot;</span>, message, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessagePostProcessor</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Message <span class="hljs-title function_">postProcessMessage</span><span class="hljs-params">(Message message)</span> <span class="hljs-keyword">throws</span> AmqpException &#123;<br>            <span class="hljs-comment">// 添加延迟消息属性</span><br>            message.getMessageProperties().setDelay(<span class="hljs-number">5000</span>);<br>            <span class="hljs-keyword">return</span> message;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>如果消息的延迟时间设置较长，可能会导致堆积的延迟消息非常多，会带来较大的CPU开销，不建议设置延迟时间过长的延迟消息。</li></ul><h3 id="5-3-超时订单问题"><a href="#5-3-超时订单问题" class="headerlink" title="5.3 超时订单问题"></a>5.3 超时订单问题</h3><p>用户下单完成后,发送15分钟延迟消息,在15分钟后接收消息,检查支付状态:</p><ul><li>已支付:更新订单状态为已支付</li><li>未支付:更新订单状态为关闭订单,恢复商品库存</li></ul><p><img src="/img/blogs/java/springcloud/mq.14.png"></p><p>参考文献：<a href="https://b11et3un53m.feishu.cn/wiki/OQH4weMbcimUSLkIzD6cCpN0nvc">https://b11et3un53m.feishu.cn/wiki/OQH4weMbcimUSLkIzD6cCpN0nvc</a></p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>SpringCloud</tag>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="/2025/03/05/JAVA/SpringCloud/Docker/"/>
    <url>/2025/03/05/JAVA/SpringCloud/Docker/</url>
    
    <content type="html"><![CDATA[<h1 align="center">Docker学习笔记</h1><h2 id="1-Docker介绍"><a href="#1-Docker介绍" class="headerlink" title="1. Docker介绍"></a>1. Docker介绍</h2><p>Docker本身包含一个后台服务，我们可以利用Docker命令告诉Docker服务，帮助我们快速部署指定的应用。Docker服务部署应用时，首先要去搜索并下载应用对应的镜像，然后根据镜像创建并允许容器，应用就部署完成了。</p><p><img src="/img/blogs/java/springcloud/docker.1.png"></p><h2 id="2-Docker常见命令"><a href="#2-Docker常见命令" class="headerlink" title="2. Docker常见命令"></a>2. Docker常见命令</h2><h3 id="2-1-常见命令"><a href="#2-1-常见命令" class="headerlink" title="2.1 常见命令"></a>2.1 常见命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker pull</td><td>拉取镜像</td></tr><tr><td>docker push</td><td>推送镜像到 Docker Registry</td></tr><tr><td>docker images</td><td>查看本地镜像</td></tr><tr><td>docker rmi</td><td>删除本地镜像</td></tr><tr><td>docker run</td><td>创建并运行容器（不能重复创建）</td></tr><tr><td>docker stop</td><td>停止指定容器</td></tr><tr><td>docker start</td><td>启动指定容器</td></tr><tr><td>docker restart</td><td>重新启动容器</td></tr><tr><td>docker rm</td><td>删除指定容器</td></tr><tr><td>docker ps</td><td>查看容器</td></tr><tr><td>docker logs</td><td>查看容器运行日志</td></tr><tr><td>docker exec</td><td>进入容器</td></tr><tr><td>docker save</td><td>保存镜像到本地压缩文件</td></tr><tr><td>docker load</td><td>加载本地压缩文件到镜像</td></tr><tr><td>docker inspect</td><td>查看容器详细信息</td></tr></tbody></table><p><img src="/img/blogs/java/springcloud/docker.2.png"></p><h3 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span><br><br><span class="hljs-comment"># 第2步，拉取Nginx镜像</span><br>docker pull nginx<br><br><span class="hljs-comment"># 第3步，查看镜像</span><br>docker images<br><span class="hljs-comment"># 结果如下：</span><br>REPOSITORY   TAG       IMAGE ID       CREATED         SIZE<br>nginx        latest    605c77e624dd   16 months ago   141MB<br>mysql        latest    3218b38490ce   17 months ago   516MB<br><br><span class="hljs-comment"># 第4步，创建并允许Nginx容器</span><br>docker run -d --name nginx -p 80:80 nginx<br><br><span class="hljs-comment"># 第5步，查看运行中容器</span><br>docker ps<br><span class="hljs-comment"># 也可以加格式化方式访问，格式会更加清爽</span><br>docker ps --format <span class="hljs-string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 第6步，访问网页，地址：http://虚拟机地址</span><br><br><span class="hljs-comment"># 第7步，停止容器</span><br>docker stop nginx<br><br><span class="hljs-comment"># 第8步，查看所有容器</span><br>docker ps -a --format <span class="hljs-string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 第9步，再次启动nginx容器</span><br>docker start nginx<br><br><span class="hljs-comment"># 第10步，再次查看容器</span><br>docker ps --format <span class="hljs-string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 第11步，查看容器详细信息</span><br>docker inspect nginx<br><br><span class="hljs-comment"># 第12步，进入容器,查看容器内目录</span><br>docker <span class="hljs-built_in">exec</span> -it nginx bash<br><span class="hljs-comment"># 或者，可以进入MySQL</span><br>docker <span class="hljs-built_in">exec</span> -it mysql mysql -uroot -p<br><br><span class="hljs-comment"># 第13步，删除容器</span><br>docker <span class="hljs-built_in">rm</span> nginx<br><span class="hljs-comment"># 发现无法删除，因为容器运行中，强制删除容器</span><br>docker <span class="hljs-built_in">rm</span> -f nginx<br></code></pre></td></tr></table></figure><h3 id="2-3-命令别名"><a href="#2-3-命令别名" class="headerlink" title="2.3 命令别名"></a>2.3 命令别名</h3><p>给常用Docker命令起别名，方便我们访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改/root/.bashrc文件</span><br>vi /root/.bashrc<br>内容如下：<br><span class="hljs-comment"># .bashrc</span><br><br><span class="hljs-comment"># User specific aliases and functions</span><br><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">rm</span>=<span class="hljs-string">&#x27;rm -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cp</span>=<span class="hljs-string">&#x27;cp -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">mv</span>=<span class="hljs-string">&#x27;mv -i&#x27;</span><br><span class="hljs-built_in">alias</span> dps=<span class="hljs-string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class="hljs-built_in">alias</span> dis=<span class="hljs-string">&#x27;docker images&#x27;</span><br><br><span class="hljs-comment"># Source global definitions</span><br><span class="hljs-keyword">if</span> [ -f /etc/bashrc ]; <span class="hljs-keyword">then</span><br>        . /etc/bashrc<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>执行命令使别名生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /root/.bashrc<br></code></pre></td></tr></table></figure><h2 id="3-数据卷"><a href="#3-数据卷" class="headerlink" title="3. 数据卷"></a>3. 数据卷</h2><h3 id="3-1-数据卷介绍"><a href="#3-1-数据卷介绍" class="headerlink" title="3.1 数据卷介绍"></a>3.1 数据卷介绍</h3><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。<br><strong>数据卷（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁</strong></p><p><img src="/img/blogs/java/springcloud/docker.3.png"></p><ul><li>我们创建了两个数据卷：conf、html</li><li>Nginx容器内部的conf目录和html目录分别与两个数据卷关联。</li><li>而数据卷conf和html分别指向了宿主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;conf&#x2F;_data目录和&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html&#x2F;_data目录<br>这样以来，容器内的conf和html目录就 与宿主机的conf和html目录关联起来，我们称为挂载。此时，我们操作宿主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html&#x2F;_data就是在操作容器内的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;_data目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</li></ul><h3 id="3-2-数据卷命令"><a href="#3-2-数据卷命令" class="headerlink" title="3.2 数据卷命令"></a>3.2 数据卷命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td></tr><tr><td>docker volume ls</td><td>查看所有数据卷</td></tr><tr><td>docker volume rm</td><td>删除指定数据卷</td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td></tr><tr><td>docker volume prune</td><td>清除数据卷</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span><br>docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx<br><br><span class="hljs-comment"># 2.然后查看数据卷</span><br>docker volume <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 结果</span><br>DRIVER    VOLUME NAME<br><span class="hljs-built_in">local</span>     29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f<br><span class="hljs-built_in">local</span>     html<br><br><span class="hljs-comment"># 3.查看数据卷详情</span><br>docker volume inspect html<br><span class="hljs-comment"># 结果</span><br>[<br>    &#123;<br>        <span class="hljs-string">&quot;CreatedAt&quot;</span>: <span class="hljs-string">&quot;2024-05-17T19:57:08+08:00&quot;</span>,<br>        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,<br>        <span class="hljs-string">&quot;Labels&quot;</span>: null,<br>        <span class="hljs-string">&quot;Mountpoint&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,<br>        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;html&quot;</span>,<br>        <span class="hljs-string">&quot;Options&quot;</span>: null,<br>        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;local&quot;</span><br>    &#125;<br>]<br><br><span class="hljs-comment"># 4.查看/var/lib/docker/volumes/html/_data目录</span><br>ll /var/lib/docker/volumes/html/_data<br><span class="hljs-comment"># 可以看到与nginx的html目录内容一样，结果如下：</span><br>总用量 8<br>-rw-r--r--. 1 root root 497 12月 28 2021 50x.html<br>-rw-r--r--. 1 root root 615 12月 28 2021 index.html<br><br><span class="hljs-comment"># 5.进入该目录，并随意修改index.html内容</span><br><span class="hljs-built_in">cd</span> /var/lib/docker/volumes/html/_data<br>vi index.html<br><br><span class="hljs-comment"># 6.打开页面，查看效果</span><br><br><span class="hljs-comment"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span><br>docker <span class="hljs-built_in">exec</span> -it nginx bash<br></code></pre></td></tr></table></figure><h3 id="3-3-挂载本地目录或文件"><a href="#3-3-挂载本地目录或文件" class="headerlink" title="3.3 挂载本地目录或文件"></a>3.3 挂载本地目录或文件</h3><p>数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 挂载本地目录</span><br>-v 本地目录:容器内目录<br><span class="hljs-comment"># 挂载本地文件</span><br>-v 本地文件:容器内文件<br></code></pre></td></tr></table></figure><p>演示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># 1.删除原来的MySQL容器</span><br>docker <span class="hljs-built_in">rm</span> -f mysql<br><br><span class="hljs-comment"># 2.进入root目录</span><br><span class="hljs-built_in">cd</span> ~<br><br><span class="hljs-comment"># 3.创建并运行新mysql容器，挂载本地目录</span><br>docker run -d \<br>  --name mysql \<br>  -p 3306:3306 \<br>  -e TZ=Asia/Shanghai \<br>  -e MYSQL_ROOT_PASSWORD=123 \<br>  -v ./mysql/data:/var/lib/mysql \<br>  -v ./mysql/conf:/etc/mysql/conf.d \<br>  -v ./mysql/init:/docker-entrypoint-initdb.d \<br>  mysql<br><br><span class="hljs-comment"># 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了</span><br><span class="hljs-built_in">ls</span> -l mysql<br><span class="hljs-comment"># 结果：</span><br>总用量 4<br>drwxr-xr-x. 2 root    root   20 5月  19 15:11 conf<br>drwxr-xr-x. 7 polkitd root 4096 5月  19 15:11 data<br>drwxr-xr-x. 2 root    root   23 5月  19 15:11 init<br><br><span class="hljs-comment"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span><br><span class="hljs-built_in">ls</span> -l data<br><br><span class="hljs-comment"># 5.查看MySQL容器内数据</span><br><span class="hljs-comment"># 5.1.进入MySQL</span><br>docker <span class="hljs-built_in">exec</span> -it mysql mysql -uroot -p123<br><span class="hljs-comment"># 5.2.查看编码表</span><br>show variables like <span class="hljs-string">&quot;%char%&quot;</span>;<br><span class="hljs-comment"># 5.3.结果，发现编码是utf8mb4没有问题</span><br>+--------------------------+--------------------------------+<br>| Variable_name            | Value                          |<br>+--------------------------+--------------------------------+<br>| character_set_client     | utf8mb4                        |<br>| character_set_connection | utf8mb4                        |<br>| character_set_database   | utf8mb4                        |<br>| character_set_filesystem | binary                         |<br>| character_set_results    | utf8mb4                        |<br>| character_set_server     | utf8mb4                        |<br>| character_set_system     | utf8mb3                        |<br>| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |<br>+--------------------------+--------------------------------+<br><br><span class="hljs-comment"># 6.查看数据</span><br><span class="hljs-comment"># 6.1.查看数据库</span><br>show databases;<br><span class="hljs-comment"># 结果，hmall是黑马商城数据库</span><br>+--------------------+<br>| Database           |<br>+--------------------+<br>| hmall              |<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>5 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><span class="hljs-comment"># 6.2.切换到hmall数据库</span><br>use hmall;<br><span class="hljs-comment"># 6.3.查看表</span><br>show tables;<br><span class="hljs-comment"># 结果：</span><br>+-----------------+<br>| Tables_in_hmall |<br>+-----------------+<br>| address         |<br>| cart            |<br>| item            |<br>| order           |<br>| order_detail    |<br>| order_logistics |<br>| pay_order       |<br>| user            |<br>+-----------------+<br><span class="hljs-comment"># 6.4.查看address表数据</span><br>+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+<br>| <span class="hljs-built_in">id</span> | user_id | province | city   | town     | mobile      | street        | contact   | is_default | notes |<br>+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+<br>| 59 |       1 | 北京     | 北京   | 朝阳区    | 13900112222 | 金燕龙办公楼   | 李佳诚    | 0          | NULL  |<br>| 60 |       1 | 北京     | 北京   | 朝阳区    | 13700221122 | 修正大厦       | 李佳红    | 0          | NULL  |<br>| 61 |       1 | 上海     | 上海   | 浦东新区  | 13301212233 | 航头镇航头路   | 李佳星    | 1          | NULL  |<br>| 63 |       1 | 广东     | 佛山   | 永春      | 13301212233 | 永春武馆       | 李晓龙    | 0          | NULL  |<br>+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br></code></pre></td></tr></table></figure><h2 id="4-镜像"><a href="#4-镜像" class="headerlink" title="4. 镜像"></a>4. 镜像</h2><h3 id="4-1-构建自己的镜像"><a href="#4-1-构建自己的镜像" class="headerlink" title="4.1 构建自己的镜像"></a>4.1 构建自己的镜像</h3><p>我们打包镜像也是分成这么几步：</p><ul><li>准备Linux运行环境（java项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li><li>安装并配置JDK</li><li>拷贝jar包</li><li>配置启动脚本</li></ul><h3 id="4-2-Dockerfile"><a href="#4-2-Dockerfile" class="headerlink" title="4.2 Dockerfile"></a>4.2 Dockerfile</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td></tr><tr><td>ENV</td><td>设置环境变量，可在后面指令使用</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td></tr><tr><td>RUN</td><td>执行 Linux 的 shell 命令，一般是安装过程的命令</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td></tr></tbody></table><p>有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 基础镜像</span><br>FROM openjdk:11.0-jre-buster<br><span class="hljs-comment"># 设定时区</span><br>ENV TZ=Asia/Shanghai<br>RUN <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TZ</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TZ</span> &gt; /etc/timezone<br><span class="hljs-comment"># 拷贝jar包</span><br>COPY docker-demo.jar /app.jar<br><span class="hljs-comment"># 入口</span><br>ENTRYPOINT [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="5-自定义网络"><a href="#5-自定义网络" class="headerlink" title="5. 自定义网络"></a>5. 自定义网络</h2><p>容器的网络IP其实是一个虚拟的IP，其值<strong>并不固定</strong>与某一个容器绑定</p><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li><li>在同一个自定义网络中的容器，可以通过别名互相访问</li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker network create</td><td>创建一个网络</td></tr><tr><td>docker network ls</td><td>查看所有网络</td></tr><tr><td>docker network rm</td><td>删除指定网络</td></tr><tr><td>docker network prune</td><td>清除未使用的网络</td></tr><tr><td>docker network connect</td><td>使指定容器连接加入某网络</td></tr><tr><td>docker network disconnect</td><td>使指定容器连接离开某网络</td></tr><tr><td>docker network inspect</td><td>查看网络详细信息</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.首先通过命令创建一个网络</span><br>docker network create hmall<br><br><span class="hljs-comment"># 2.然后查看网络</span><br>docker network <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 结果：</span><br>NETWORK ID     NAME      DRIVER    SCOPE<br>639bc44d0a87   bridge    bridge    <span class="hljs-built_in">local</span><br>403f16ec62a2   hmall     bridge    <span class="hljs-built_in">local</span><br>0dc0f72a0fbb   host      host      <span class="hljs-built_in">local</span><br>cd8d3e8df47b   none      null      <span class="hljs-built_in">local</span><br><span class="hljs-comment"># 其中，除了hmall以外，其它都是默认的网络</span><br><br><span class="hljs-comment"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span><br><span class="hljs-comment"># 这样该网络内的其它容器可以用别名互相访问！</span><br><span class="hljs-comment"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span><br>docker network connect hmall mysql --<span class="hljs-built_in">alias</span> db<br><span class="hljs-comment"># 3.2.db容器，也就是我们的java项目</span><br>docker network connect hmall <span class="hljs-built_in">dd</span><br><br><span class="hljs-comment"># 4.进入dd容器，尝试利用别名访问db</span><br><span class="hljs-comment"># 4.1.进入容器</span><br>docker <span class="hljs-built_in">exec</span> -it <span class="hljs-built_in">dd</span> bash<br><span class="hljs-comment"># 4.2.用db别名访问</span><br>ping db<br><span class="hljs-comment"># 结果</span><br>PING db (172.18.0.2) 56(84) bytes of data.<br>64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 <span class="hljs-keyword">time</span>=0.070 ms<br>64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 <span class="hljs-keyword">time</span>=0.056 ms<br><span class="hljs-comment"># 4.3.用容器名访问</span><br>ping mysql<br><span class="hljs-comment"># 结果：</span><br>PING mysql (172.18.0.2) 56(84) bytes of data.<br>64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 <span class="hljs-keyword">time</span>=0.044 ms<br>64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 <span class="hljs-keyword">time</span>=0.054 ms<br></code></pre></td></tr></table></figure><h2 id="6-DockerCompose"><a href="#6-DockerCompose" class="headerlink" title="6. DockerCompose"></a>6. DockerCompose</h2><p>Docker Compose可以帮助我们<strong>实现多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p><p>部署mysql，可以使用docker-compose.yml进行部署</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/data:/var/lib/mysql&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">new</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">new:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">hmall</span><br></code></pre></td></tr></table></figure><p>基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose [OPTIONS] [COMMAND]<br></code></pre></td></tr></table></figure><table>  <thead>    <tr>      <th>类型</th>      <th>参数或指令</th>      <th>说明</th>    </tr>  </thead>  <tbody>    <tr>      <td rowspan="2">Options</td>      <td>-f</td>      <td>指定 compose 文件的路径和名称</td>    </tr>    <tr>      <td>-p</td>      <td>指定 project 名称。project 就是当前 compose 文件中设置的多个 service 的集合，是逻辑概念</td>    </tr>    <tr>     <td rowspan="9">Commands</td>      <td>up</td>      <td>创建并启动所有 service 容器</td>    </tr>    <tr>      <td>down</td>      <td>停止并移除所有容器、网络</td>    </tr>    <tr>      <td>ps</td>      <td>列出所有启动的容器</td>    </tr>    <tr>      <td>logs</td>      <td>查看指定容器的日志</td>    </tr>    <tr>      <td>stop</td>      <td>停止容器</td>    </tr>    <tr>      <td>start</td>      <td>启动容器</td>    </tr>    <tr>      <td>restart</td>      <td>重启容器</td>    </tr>    <tr>      <td>top</td>      <td>查看运行的进程</td>    </tr>    <tr>      <td>exec</td>      <td>在指定的运行中容器中执行命令</td>    </tr>  </tbody></table><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发工具</tag>
      
      <tag>学习</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MybatisPlus学习笔记</title>
    <link href="/2025/03/05/JAVA/SpringCloud/MybatisPlus/"/>
    <url>/2025/03/05/JAVA/SpringCloud/MybatisPlus/</url>
    
    <content type="html"><![CDATA[<h1 align="center">MybatisPlus学习笔记</h1><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h2><p>实现步骤：</p><ul><li>引入MybatisPlus依赖</li><li>定义Mapper</li></ul><h3 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-定义Mapper"><a href="#1-2-定义Mapper" class="headerlink" title="1.2 定义Mapper"></a>1.2 定义Mapper</h3><ul><li>MybatisPlus提供了一个基础的BaseMapper接口</li><li>修改mp-demo中的com.itheima.mp.mapper包下的UserMapper接口，让其继承BaseMapper：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-常见注解"><a href="#2-常见注解" class="headerlink" title="2. 常见注解"></a>2. 常见注解</h2><h3 id="2-1-默认情况"><a href="#2-1-默认情况" class="headerlink" title="2.1 默认情况"></a>2.1 默认情况</h3><p>MybatisPlus就是根据PO实体的信息来推断出表的信息，从而生成SQL的。默认情况下：</p><ul><li>MybatisPlus会把PO实体的类名驼峰转下划线作为表名</li><li>MybatisPlus会把PO实体的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型</li><li>MybatisPlus会把名为id的字段作为主键</li></ul><h3 id="2-2-TableName"><a href="#2-2-TableName" class="headerlink" title="2.2 @TableName"></a>2.2 @TableName</h3><ul><li>描述：表名注解，标识实体类对应的表</li><li>使用位置：实体类</li></ul><h3 id="2-3-TableId"><a href="#2-3-TableId" class="headerlink" title="2.3 @TableId"></a>2.3 @TableId</h3><ul><li>描述：主键注解，标识实体类中的主键字段</li><li>使用位置：实体类的主键字段</li></ul><p>IdType属性的常见值：</p><ul><li>AUTO：利用数据库的id自增长</li><li>INPUT：手动生成id</li><li>ASSIGN_ID：雪花算法生成Long类型的全局唯一id，这是默认的ID策略</li></ul><h3 id="2-4-TableField"><a href="#2-4-TableField" class="headerlink" title="2.4 @TableField"></a>2.4 @TableField</h3><p>普通字段注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableName(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@TableField(is_married&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isMarried;<br>    <span class="hljs-meta">@TableField(&quot;`concat`&quot;)</span><br>    <span class="hljs-keyword">private</span> String concat;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加@TableField注解的一些特殊情况：</p><ul><li>成员变量名与数据库字段名不一致</li><li>成员变量是以isXXX命名，按照JavaBean的规范，MybatisPlus识别字段时会把is去除，这就导致与数据库不符。</li><li>成员变量名与数据库一致，但是与数据库的关键字冲突。使用@TableField注解给字段名添加转义字符：&#96;&#96;</li></ul><h2 id="3-核心功能"><a href="#3-核心功能" class="headerlink" title="3. 核心功能"></a>3. 核心功能</h2><h3 id="3-1-条件构造器"><a href="#3-1-条件构造器" class="headerlink" title="3.1 条件构造器"></a>3.1 条件构造器</h3><p>除了新增以外，修改、删除、查询的SQL语句都需要指定where条件。因此BaseMapper中提供的相关方法除了以id作为where条件以外，还支持更加复杂的where条件。</p><p>Wrapper就是条件构造的抽象类</p><p><img src="/img/blogs/java/springcloud/mp.1.png"></p><h4 id="3-1-1-QueryWrapper"><a href="#3-1-1-QueryWrapper" class="headerlink" title="3.1.1 QueryWrapper"></a>3.1.1 QueryWrapper</h4><p>查询：查询出名字中带o的，存款大于等于1000元的人。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryWrapper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.构建查询条件 where name like &quot;%o%&quot; AND balance &gt;= 1000</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;()<br>            .select(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;balance&quot;</span>)<br>            .like(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>)<br>            .ge(<span class="hljs-string">&quot;balance&quot;</span>, <span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">// 2.查询数据</span><br>    List&lt;User&gt; users = userMapper.selectList(wrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-2-UpdateWrapper"><a href="#3-1-2-UpdateWrapper" class="headerlink" title="3.1.2 UpdateWrapper"></a>3.1.2 UpdateWrapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateWrapper</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Long&gt; ids = List.of(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">4L</span>);<br>    <span class="hljs-comment">// 1.生成SQL</span><br>    UpdateWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;User&gt;()<br>            .setSql(<span class="hljs-string">&quot;balance = balance - 200&quot;</span>) <span class="hljs-comment">// SET balance = balance - 200</span><br>            .in(<span class="hljs-string">&quot;id&quot;</span>, ids); <span class="hljs-comment">// WHERE id in (1, 2, 4)</span><br>        <span class="hljs-comment">// 2.更新，注意第一个参数可以给null，也就是不填更新字段和数据，</span><br>    <span class="hljs-comment">// 而是基于UpdateWrapper中的setSQL来更新</span><br>    userMapper.update(<span class="hljs-literal">null</span>, wrapper);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-3-LambdaQueryWrapper"><a href="#3-1-3-LambdaQueryWrapper" class="headerlink" title="3.1.3 LambdaQueryWrapper"></a>3.1.3 LambdaQueryWrapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testLambdaQueryWrapper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.构建条件 WHERE username LIKE &quot;%o%&quot; AND balance &gt;= 1000</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    wrapper.lambda()<br>            .select(User::getId, User::getUsername, User::getInfo, User::getBalance)<br>            .like(User::getUsername, <span class="hljs-string">&quot;o&quot;</span>)<br>            .ge(User::getBalance, <span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">// 2.查询</span><br>    List&lt;User&gt; users = userMapper.selectList(wrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-自定义SQL"><a href="#3-2-自定义SQL" class="headerlink" title="3.2 自定义SQL"></a>3.2 自定义SQL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testCustomWrapper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.准备自定义查询条件</span><br>    List&lt;Long&gt; ids = List.of(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">4L</span>);<br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().in(<span class="hljs-string">&quot;id&quot;</span>, ids);<br><br>    <span class="hljs-comment">// 2.调用mapper的自定义方法，直接传递Wrapper</span><br>    userMapper.deductBalanceByIds(<span class="hljs-number">200</span>, wrapper);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在UserMapper中自定义SQL：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>    <span class="hljs-meta">@Select(&quot;UPDATE user SET balance = balance - #&#123;money&#125; $&#123;ew.customSqlSegment&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductBalanceByIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;money&quot;)</span> <span class="hljs-type">int</span> money, <span class="hljs-meta">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;User&gt; wrapper)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-Service接口"><a href="#3-3-Service接口" class="headerlink" title="3.3 Service接口"></a>3.3 Service接口</h3><h4 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h4><p>MybatisPlus不仅提供了BaseMapper，还提供了通用的Service接口及默认实现，封装了一些常用的service模板方法。<br><strong>通用接口为IService</strong>，<strong>默认实现为ServiceImpl</strong>，其中封装的方法可以分为以下几类：</p><ul><li>save：新增</li><li>remove：删除</li><li>update：更新</li><li>get：查询单个结果</li><li>list：查询集合结果</li><li>count：计数</li><li>page：分页查询</li></ul><h4 id="3-3-2-基本用法"><a href="#3-3-2-基本用法" class="headerlink" title="3.3.2 基本用法"></a>3.3.2 基本用法</h4><p>自定义Service接口继承IService以拓展方法。同时，让自定义的Service实现类继承ServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br>    <span class="hljs-comment">// 拓展自定义方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编写UserServiceImpl类，继承ServiceImpl，实现UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-3-Lambda"><a href="#3-3-3-Lambda" class="headerlink" title="3.3.3 Lambda"></a>3.3.3 Lambda</h4><p>IService中还提供了Lambda功能来简化我们的复杂查询及更新功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductBalance</span><span class="hljs-params">(Long id, Integer money)</span> &#123;<br>    <span class="hljs-comment">// 1.查询用户</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-comment">// 2.校验用户状态</span><br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || user.getStatus() == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户状态异常！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3.校验余额是否充足</span><br>    <span class="hljs-keyword">if</span> (user.getBalance() &lt; money) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户余额不足！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 4.扣减余额 update tb_user set balance = balance - ?</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">remainBalance</span> <span class="hljs-operator">=</span> user.getBalance() - money;<br>    lambdaUpdate()<br>            .set(User::getBalance, remainBalance) <span class="hljs-comment">// 更新余额</span><br>            .set(remainBalance == <span class="hljs-number">0</span>, User::getStatus, <span class="hljs-number">2</span>) <span class="hljs-comment">// 动态判断，是否更新status</span><br>            .eq(User::getId, id)<br>            .eq(User::getBalance, user.getBalance()) <span class="hljs-comment">// 乐观锁</span><br>            .update();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-扩展功能"><a href="#4-扩展功能" class="headerlink" title="4. 扩展功能"></a>4. 扩展功能</h2><h3 id="4-1-代码生成"><a href="#4-1-代码生成" class="headerlink" title="4.1 代码生成"></a>4.1 代码生成</h3><p>使用MybatisX插件即可</p><p><a href="https://blog.csdn.net/weixin_47025166/article/details/125362323">SpringBoot中MybatisX插件的简单使用教程（超详细！！）</a></p><h3 id="4-2-静态工具"><a href="#4-2-静态工具" class="headerlink" title="4.2 静态工具"></a>4.2 静态工具</h3><p>有的时候<strong>Service之间也会相互调用</strong>，为了避免出现循环依赖问题，MybatisPlus提供一个静态工具类：Db，其中的一些静态方法与IService中方法签名基本一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> UserVO <span class="hljs-title function_">queryUserAndAddressById</span><span class="hljs-params">(Long userId)</span> &#123;<br>    <span class="hljs-comment">// 1.查询用户</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getById(userId);<br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 2.查询收货地址</span><br>    List&lt;Address&gt; addresses = Db.lambdaQuery(Address.class)<br>            .eq(Address::getUserId, userId)<br>            .list();<br>    <span class="hljs-comment">// 3.处理vo</span><br>    <span class="hljs-type">UserVO</span> <span class="hljs-variable">userVO</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(user, UserVO.class);<br>    userVO.setAddresses(BeanUtil.copyToList(addresses, AddressVO.class));<br>    <span class="hljs-keyword">return</span> userVO;<br>&#125;<br></code></pre></td></tr></table></figure><p>在查询地址时，我们采用了Db的静态方法，因此避免了注入AddressService，减少了循环依赖的风险。</p><h3 id="4-3-逻辑删除"><a href="#4-3-逻辑删除" class="headerlink" title="4.3 逻辑删除"></a>4.3 逻辑删除</h3><p>对于一些比较重要的数据，我们不删除数据库中的数据，而是</p><ul><li>在表中添加一个字段标记数据是否被删除</li><li>当删除数据时把标记置为true</li></ul><p>我们要在application.yml中配置逻辑删除字段</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">deleted</span> <span class="hljs-comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 逻辑已删除值(默认为 1)</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 逻辑未删除值(默认为 0)</span><br></code></pre></td></tr></table></figure><h3 id="4-4-枚举处理器"><a href="#4-4-枚举处理器" class="headerlink" title="4.4 枚举处理器"></a>4.4 枚举处理器</h3><p>MybatisPlus提供了一个处理枚举的类型转换器，可以帮我们把<strong>枚举类型与数据库类型自动转换</strong></p><h4 id="4-4-1-定义枚举"><a href="#4-4-1-定义枚举" class="headerlink" title="4.4.1 定义枚举"></a>4.4.1 定义枚举</h4><p><img src="/img/blogs/java/springcloud/mp.2.png"></p><h4 id="4-4-2-EnumValue"><a href="#4-4-2-EnumValue" class="headerlink" title="4.4.2 @EnumValue"></a>4.4.2 @EnumValue</h4><p>MybatisPlus提供了@EnumValue注解来标记枚举属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnumValue</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br></code></pre></td></tr></table></figure><p>表示value字段的值是数据库值</p><h4 id="4-4-3-配置枚举处理器"><a href="#4-4-3-配置枚举处理器" class="headerlink" title="4.4.3 配置枚举处理器"></a>4.4.3 配置枚举处理器</h4><p>在application.yaml文件中添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">default-enum-type-handler:</span> <span class="hljs-string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span><br></code></pre></td></tr></table></figure><h3 id="4-5-JSON类型处理器"><a href="#4-5-JSON类型处理器" class="headerlink" title="4.5 JSON类型处理器"></a>4.5 JSON类型处理器</h3><p>数据库的user表中有一个info字段，是JSON类型。而目前User实体类中却是String类型。处理JSON就可以使用JacksonTypeHandler处理器</p><p><strong>使用类型处理器</strong><br>将User类的info字段修改为UserInfo类型，并声明类型处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(typeHandler = JacksonTypeHandler.class)</span><br><span class="hljs-keyword">private</span> UserInfo info;<br></code></pre></td></tr></table></figure><h2 id="5-插件功能-以分页插件为例"><a href="#5-插件功能-以分页插件为例" class="headerlink" title="5. 插件功能(以分页插件为例)"></a>5. 插件功能(以分页插件为例)</h2><p>MybatisPlus提供了很多的插件功能，进一步拓展其功能。</p><ul><li>PaginationInnerInterceptor：自动分页</li><li>TenantLineInnerInterceptor：多租户</li><li>DynamicTableNameInnerInterceptor：动态表名</li><li>OptimisticLockerInnerInterceptor：乐观锁</li><li>IllegalSQLInnerInterceptor：sql 性能规范</li><li>BlockAttackInnerInterceptor：防止全表更新与删除</li></ul><h3 id="5-1-配置分页插件"><a href="#5-1-配置分页插件" class="headerlink" title="5.1 配置分页插件"></a>5.1 配置分页插件</h3><p>在项目中新建一个配置类：MybatisConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 初始化核心插件</span><br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-comment">// 添加分页插件</span><br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-分页查询的测试"><a href="#5-2-分页查询的测试" class="headerlink" title="5.2 分页查询的测试"></a>5.2 分页查询的测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageQuery</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.分页查询，new Page()的两个参数分别是：页码、每页大小</span><br>    Page&lt;User&gt; p = userService.page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>));<br>    <span class="hljs-comment">// 2.总条数</span><br>    System.out.println(<span class="hljs-string">&quot;total = &quot;</span> + p.getTotal());<br>    <span class="hljs-comment">// 3.总页数</span><br>    System.out.println(<span class="hljs-string">&quot;pages = &quot;</span> + p.getPages());<br>    <span class="hljs-comment">// 4.数据</span><br>    List&lt;User&gt; records = p.getRecords();<br>    records.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>SpringCloud</tag>
      
      <tag>MybatisPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>苍穹外卖学习笔记(跳过微信支付)</title>
    <link href="/2025/03/03/JAVA/CangqiongTakeout/"/>
    <url>/2025/03/03/JAVA/CangqiongTakeout/</url>
    
    <content type="html"><![CDATA[<h1 align="center">苍穹外卖学习笔记</h1><h1 id="一-项目概述、环境搭建"><a href="#一-项目概述、环境搭建" class="headerlink" title="一. 项目概述、环境搭建"></a>一. 项目概述、环境搭建</h1><h2 id="1-软件开发整体流程"><a href="#1-软件开发整体流程" class="headerlink" title="1. 软件开发整体流程"></a>1. 软件开发整体流程</h2><ol><li><strong>需求分析</strong>: 需求规格说明书、产品原型</li><li><strong>设计</strong>: UI设计、数据库设计、接口设计</li><li><strong>编码</strong>: 项目代码、单元测试</li><li><strong>测试</strong>: 测试用例、测试报告</li><li><strong>上线运维</strong>: 软件环境安装、配置</li></ol><h2 id="2-技术选型"><a href="#2-技术选型" class="headerlink" title="2. 技术选型"></a>2. 技术选型</h2><p>项目中使用到的技术框架和中间件<br><img src="/img/blogs/java/cangqiongtakeout/1.2.1.png"></p><h2 id="3-开发环境搭建"><a href="#3-开发环境搭建" class="headerlink" title="3. 开发环境搭建"></a>3. 开发环境搭建</h2><h3 id="3-1-前端环境搭建-nginx"><a href="#3-1-前端环境搭建-nginx" class="headerlink" title="3.1 前端环境搭建(nginx)"></a>3.1 前端环境搭建(nginx)</h3><p>前端我们就不自己写代码了<br>直接打开<strong>nginx.exe</strong>运行，打开<code>localhost:80</code>端口访问前端页面</p><h3 id="3-2-后端环境搭建"><a href="#3-2-后端环境搭建" class="headerlink" title="3.2 后端环境搭建"></a>3.2 后端环境搭建</h3><h4 id="3-2-1-熟悉项目结构"><a href="#3-2-1-熟悉项目结构" class="headerlink" title="3.2.1 熟悉项目结构"></a>3.2.1 熟悉项目结构</h4><ul><li>后端工程基于<strong>maven</strong>进行项目构建，并且进行<strong>分模块</strong>开发</li><li>用idea打开<code>sky-take-out</code>工程</li></ul><p><img src="/img/blogs/java/cangqiongtakeout/1.3.1.png"></p><table><thead><tr><th>序号</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>sky-take-out</td><td>maven父工程，统一管理依赖版本，聚合其他子模块</td></tr><tr><td>2</td><td>sky-common</td><td>子模块，存放公共类，例如：工具类、常量类、异常类等</td></tr><tr><td>3</td><td>sky-pojo</td><td>子模块，存放实体类、VO、DTO等</td></tr><tr><td>4</td><td>sky-server</td><td>子模块，后端服务，存放配置文件、Controller、Service、Mapper等</td></tr></tbody></table><p><img src="/img/blogs/java/cangqiongtakeout/1.3.2.png"></p><p><img src="/img/blogs/java/cangqiongtakeout/1.3.3.png"></p><p><img src="/img/blogs/java/cangqiongtakeout/1.3.4.png"></p><h4 id="3-2-2-使用Git进行版本控制"><a href="#3-2-2-使用Git进行版本控制" class="headerlink" title="3.2.2 使用Git进行版本控制"></a>3.2.2 使用Git进行版本控制</h4><p><a href="https://blog.csdn.net/m0_68356693/article/details/145806694?spm=1001.2014.3001.5501">Git学习笔记</a></p><h5 id="3-2-2-1-创建本地仓库"><a href="#3-2-2-1-创建本地仓库" class="headerlink" title="3.2.2.1 创建本地仓库"></a>3.2.2.1 创建本地仓库</h5><ul><li>点击菜单-VCS-Create Git Repository-找到当前项目目录-点击OK</li><li>将本地文件全部提交到本地仓库(commit)</li></ul><h5 id="3-2-2-2-创建远程仓库"><a href="#3-2-2-2-创建远程仓库" class="headerlink" title="3.2.2.2 创建远程仓库"></a>3.2.2.2 创建远程仓库</h5><p>打开Gitee，点击加号创建远程仓库</p><h5 id="3-2-2-3-将本地文件推送到Git远程仓库"><a href="#3-2-2-3-将本地文件推送到Git远程仓库" class="headerlink" title="3.2.2.3 将本地文件推送到Git远程仓库"></a>3.2.2.3 将本地文件推送到Git远程仓库</h5><p>点击push,输入远程仓库url，输入账号密码，成功push</p><h4 id="3-2-3-数据库环境搭建"><a href="#3-2-3-数据库环境搭建" class="headerlink" title="3.2.3 数据库环境搭建"></a>3.2.3 数据库环境搭建</h4><p>记得在命令行中打开mysql连接：<code>net start mysql</code><br>在navicat打开sql文件，运行创建数据库内容<br><a href="https://blog.csdn.net/tkf021004/article/details/136098343">navicat运行sql文件</a></p><h4 id="3-2-4-前后端联调"><a href="#3-2-4-前后端联调" class="headerlink" title="3.2.4 前后端联调"></a>3.2.4 前后端联调</h4><p><img src="/img/blogs/java/cangqiongtakeout/1.3.5.png"></p><p><strong>nginx反向代理</strong>:就是将前端发送的动态请求由nginx转发到后端服务器</p><p><img src="/img/blogs/java/cangqiongtakeout/1.3.6.png"></p><h3 id="3-3-完善登录功能"><a href="#3-3-完善登录功能" class="headerlink" title="3.3 完善登录功能"></a>3.3 完善登录功能</h3><p>使用md5加密算法将明文123456加密:<code>e10adc3949ba59abbe56e057f20f883e</code></p><ul><li>数据库中修改管理员密码</li><li>java代码修改密码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">password = DigestUtils.md5DigestAsHex(password.getBytes());<br></code></pre></td></tr></table></figure><h2 id="4-导入接口文档"><a href="#4-导入接口文档" class="headerlink" title="4. 导入接口文档"></a>4. 导入接口文档</h2><p>使用Apifox-导入-选择YApi-将json文件导入</p><h2 id="5-Swagger"><a href="#5-Swagger" class="headerlink" title="5. Swagger"></a>5. Swagger</h2><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Api</td><td>用在类上，例如Controller，表示对类的说明</td></tr><tr><td>@ApiModel</td><td>用在类上，例如entity、DTO、VO</td></tr><tr><td>@ApiModelProperty</td><td>用在属性上，描述属性信息</td></tr><tr><td>@ApiOperation</td><td>用在方法上，例如Controller的方法，说明方法的用途、作用</td></tr></tbody></table><h1 id="二-员工管理、分类管理"><a href="#二-员工管理、分类管理" class="headerlink" title="二. 员工管理、分类管理"></a>二. 员工管理、分类管理</h1><h2 id="1-新增员工"><a href="#1-新增员工" class="headerlink" title="1. 新增员工"></a>1. 新增员工</h2><h3 id="1-1-员工的DTO类-EmployeeDTO"><a href="#1-1-员工的DTO类-EmployeeDTO" class="headerlink" title="1.1 员工的DTO类(EmployeeDTO)"></a>1.1 员工的DTO类(EmployeeDTO)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.dto;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String idNumber;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-Controller层"><a href="#1-2-Controller层" class="headerlink" title="1.2 Controller层"></a>1.2 Controller层</h3><p>在EmployeeController中<strong>创建新增员工方法</strong>，接收前端提交的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//package com.sky.controller.admin.EmployeeController;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增员工</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employeeDTO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@ApiOperation(&quot;新增员工&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;新增员工：&#123;&#125;&quot;</span>,employeeDTO);<br>    employeeService.save(employeeDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-Service层"><a href="#1-3-Service层" class="headerlink" title="1.3 Service层"></a>1.3 Service层</h3><h4 id="1-3-1-Service层接口"><a href="#1-3-1-Service层接口" class="headerlink" title="1.3.1 Service层接口"></a>1.3.1 Service层接口</h4><p><strong>在EmployeeService接口中声明新增员工方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// package com.sky.server.EmployeeService;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增员工</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employeeDTO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(EmployeeDTO employeeDTO)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-2-Service层实现类"><a href="#1-3-2-Service层实现类" class="headerlink" title="1.3.2 Service层实现类"></a>1.3.2 Service层实现类</h4><p><strong>在EmployeeServiceImpl中实现新增员工方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//package com.sky.server.impl.EmployeeServiceImpl;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新增员工</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employeeDTO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(EmployeeDTO employeeDTO)</span> &#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br><br>    <span class="hljs-comment">//对象属性拷贝</span><br>    BeanUtils.copyProperties(employeeDTO, employee);<br><br>    <span class="hljs-comment">//设置账号的状态，默认正常状态 1表示正常 0表示锁定</span><br>    employee.setStatus(StatusConstant.ENABLE);<br><br>    <span class="hljs-comment">//设置密码，默认密码123456</span><br>    employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));<br><br>    <span class="hljs-comment">//设置当前记录的创建时间和修改时间</span><br>    employee.setCreateTime(LocalDateTime.now());<br>    employee.setUpdateTime(LocalDateTime.now());<br><br>    <span class="hljs-comment">//设置当前记录创建人id和修改人id</span><br>    employee.setCreateUser(BaseContext.getCurrentId());<br>    employee.setUpdateUser(BaseContext.getCurrentId());<br><br>    employeeMapper.insert(employee);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-Mapper层"><a href="#1-4-Mapper层" class="headerlink" title="1.4 Mapper层"></a>1.4 Mapper层</h3><p><strong>在EmployeeMapper中声明insert方法</strong></p><p>中添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//package com.sky.EmployeeMapper;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插入员工数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employee</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Insert(&quot;insert into employee (name, username, password, phone, sex, id_number, create_time, update_time, create_user, update_user,status) &quot; +</span><br><span class="hljs-meta">        &quot;values &quot; +</span><br><span class="hljs-meta">        &quot;(#&#123;name&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;phone&#125;,#&#123;sex&#125;,#&#123;idNumber&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;,#&#123;updateUser&#125;,#&#123;status&#125;)&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Employee employee)</span>;<br></code></pre></td></tr></table></figure><h3 id="1-5-处理SQL异常抛出"><a href="#1-5-处理SQL异常抛出" class="headerlink" title="1.5 处理SQL异常抛出"></a>1.5 处理SQL异常抛出</h3><ul><li><strong>问题</strong>：当录入的用户名已经存在时，抛出的异常后没有处理</li><li><strong>原因</strong>：username已经添加了唯一约束，不能重复</li><li><strong>解决方案</strong>：通过全局异常处理器处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//package com.sky.handler.GlobalExceptionHandler;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理SQL异常</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ex</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@ExceptionHandler</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(SQLIntegrityConstraintViolationException ex)</span>&#123;<br>    <span class="hljs-comment">//Duplicate entry &#x27;zhangsan&#x27; for key &#x27;employee.idx_username&#x27;</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> ex.getMessage();<br>    <span class="hljs-keyword">if</span>(message.contains(<span class="hljs-string">&quot;Duplicate entry&quot;</span>))&#123;<br>        String[] split = message.split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">2</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> username + MessageConstant.ALREADY_EXISTS;<br>        <span class="hljs-keyword">return</span> Result.error(msg);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>然后定义添加相应的消息常量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//package com.sky.constant.MessageConstant;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ALREADY_EXISTS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;已存在&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="1-6-ThreadLocal"><a href="#1-6-ThreadLocal" class="headerlink" title="1.6 ThreadLocal"></a>1.6 ThreadLocal</h3><ul><li>ThreadLocal 并不是一个Thread，而是<strong>Thread的局部变量</strong>。</li><li>ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</li></ul><p><strong>常用方法</strong></p><table><thead><tr><th>常用方法</th><th>作用</th></tr></thead><tbody><tr><td>public void set(T value)</td><td>设置当前线程的线程局部变量的值</td></tr><tr><td>public T get()</td><td>返回当前线程所对应的线程局部变量的值</td></tr><tr><td>public void remove()</td><td>移除当前线程的线程局部变量</td></tr></tbody></table><h3 id="1-7-获取当前登录员工的ID"><a href="#1-7-获取当前登录员工的ID" class="headerlink" title="1.7 获取当前登录员工的ID"></a>1.7 获取当前登录员工的ID</h3><ul><li><strong>问题</strong>：员工登录成功后会生成JWT令牌并响应给前端。后续请求中，前端会携带JWT令牌，通过JWT令牌可以解析出当前登录员工id：</li><li><strong>解决方案</strong>：通过ThreadLocal进行传递。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//package com.sky.interceptor.JwtTokenAdminInterceptor;</span><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenAdminInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><span class="hljs-comment">//.............................</span><br>        <span class="hljs-comment">//2、校验令牌</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//.................</span><br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">empId</span> <span class="hljs-operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());<br>            log.info(<span class="hljs-string">&quot;当前员工id：&quot;</span>, empId);<br>            <span class="hljs-comment">/////将用户id存储到ThreadLocal////////</span><br>            BaseContext.setCurrentId(empId);<br>            <span class="hljs-comment">////////////////////////////////////</span><br>            <span class="hljs-comment">//3、通过，放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-comment">//......................</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-员工分页查询"><a href="#2-员工分页查询" class="headerlink" title="2. 员工分页查询"></a>2. 员工分页查询</h2><h3 id="2-1-员工分页查询的DTO"><a href="#2-1-员工分页查询的DTO" class="headerlink" title="2.1 员工分页查询的DTO"></a>2.1 员工分页查询的DTO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.dto;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeePageQueryDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">//员工姓名</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//页码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> page;<br><br>    <span class="hljs-comment">//每页显示记录数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageSize;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-Controller层"><a href="#2-2-Controller层" class="headerlink" title="2.2 Controller层"></a>2.2 Controller层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// package com.sky.controller.admin.EmployeeController;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工分页查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employeePageQueryDTO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;员工分页查询&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(EmployeePageQueryDTO employeePageQueryDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;员工分页查询，参数为：&#123;&#125;&quot;</span>, employeePageQueryDTO);<br>    <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> employeeService.pageQuery(employeePageQueryDTO);<span class="hljs-comment">//后续定义</span><br>    <span class="hljs-keyword">return</span> Result.success(pageResult);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-Service层"><a href="#2-3-Service层" class="headerlink" title="2.3 Service层"></a>2.3 Service层</h3><h4 id="2-3-1-Service层接口"><a href="#2-3-1-Service层接口" class="headerlink" title="2.3.1 Service层接口"></a>2.3.1 Service层接口</h4><p>在EmployeeService接口中声明pageQuery方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employeePageQueryDTO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(EmployeePageQueryDTO employeePageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-2-Service层实现类"><a href="#2-3-2-Service层实现类" class="headerlink" title="2.3.2 Service层实现类"></a>2.3.2 Service层实现类</h4><p>在EmployeeServiceImpl中实现pageQuery方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页查询</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employeePageQueryDTO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;<br>    <span class="hljs-comment">// select * from employee limit 0,10</span><br>    <span class="hljs-comment">//开始分页查询</span><br>    PageHelper.startPage(employeePageQueryDTO.getPage(), employeePageQueryDTO.getPageSize());<br><br>    Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> page.getTotal();<br>    List&lt;Employee&gt; records = page.getResult();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(total, records);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-Mapper层"><a href="#2-4-Mapper层" class="headerlink" title="2.4 Mapper层"></a>2.4 Mapper层</h3><p>在 EmployeeMapper 中声明 pageQuery 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employeePageQueryDTO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>Page&lt;Employee&gt; <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(EmployeePageQueryDTO employeePageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><p>在 src&#x2F;main&#x2F;resources&#x2F;mapper&#x2F;EmployeeMapper.xml 中编写SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;pageQuery&quot; resultType<span class="hljs-operator">=</span>&quot;com.sky.entity.Employee&quot;<span class="hljs-operator">&gt;</span><br>        <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employee<br>        <span class="hljs-operator">&lt;</span><span class="hljs-keyword">where</span><span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;name != null and name != &#x27;&#x27;&quot;<span class="hljs-operator">&gt;</span><br>                <span class="hljs-keyword">and</span> name <span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)<br>            <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>        <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">where</span><span class="hljs-operator">&gt;</span><br>        <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> create_time <span class="hljs-keyword">desc</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-5-日期格式化"><a href="#2-5-日期格式化" class="headerlink" title="2.5 日期格式化"></a>2.5 日期格式化</h3><ul><li><strong>问题</strong>：操作时间字段显示有问题。前端显示的时间格式不标准</li><li><strong>解决方案</strong>：在WebMvcConfiguration中扩展SpringMVC的消息转换器，统一对日期类型进行格式处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扩展Spring MVC框架的消息转化器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> converters</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extendMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;扩展消息转换器...&quot;</span>);<br>    <span class="hljs-comment">//创建一个消息转换器对象</span><br>    <span class="hljs-type">MappingJackson2HttpMessageConverter</span> <span class="hljs-variable">converter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>();<br>    <span class="hljs-comment">//需要为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span><br>    converter.setObjectMapper(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JacksonObjectMapper</span>());<br>    <span class="hljs-comment">//将自己的消息转化器加入容器中</span><br>    converters.add(<span class="hljs-number">0</span>,converter);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-启用禁用员工账号"><a href="#3-启用禁用员工账号" class="headerlink" title="3. 启用禁用员工账号"></a>3. 启用禁用员工账号</h2><h3 id="3-1-Controller层"><a href="#3-1-Controller层" class="headerlink" title="3.1 Controller层"></a>3.1 Controller层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// package com.sky.controller.admin.EmployeeController;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 启用禁用员工账号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;启用禁用员工账号&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer status,Long id)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;启用禁用员工账号：&#123;&#125;,&#123;&#125;&quot;</span>,status,id);<br>    employeeService.startOrStop(status,id);<span class="hljs-comment">//后绪步骤定义</span><br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-Service层"><a href="#3-2-Service层" class="headerlink" title="3.2 Service层"></a>3.2 Service层</h3><h4 id="3-2-1-Service层接口"><a href="#3-2-1-Service层接口" class="headerlink" title="3.2.1 Service层接口"></a>3.2.1 Service层接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">//package com.sky.service.EmployeeService;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 启用禁用员工账号</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span>;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-Service层实现类"><a href="#3-2-2-Service层实现类" class="headerlink" title="3.2.2 Service层实现类"></a>3.2.2 Service层实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">//package com.sky.service.impl.EmployeeServiceImpl;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 启用禁用员工账号</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span> &#123;<br>       <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> Employee.builder()<br>               .status(status)<br>               .id(id)<br>               .build();<br><br>       employeeMapper.update(employee);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-Mapper层"><a href="#3-3-Mapper层" class="headerlink" title="3.3 Mapper层"></a>3.3 Mapper层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">//package com.sky.mapper.EmployeeMapper;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据主键动态修改属性</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> employee</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Employee employee)</span>;<br></code></pre></td></tr></table></figure><p>在 EmployeeMapper.xml 中编写SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">update</span> id<span class="hljs-operator">=</span>&quot;update&quot; parameterType<span class="hljs-operator">=</span>&quot;Employee&quot;<span class="hljs-operator">&gt;</span><br>        <span class="hljs-keyword">update</span> employee<br>        <span class="hljs-operator">&lt;</span><span class="hljs-keyword">set</span><span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;name != null&quot;<span class="hljs-operator">&gt;</span>name <span class="hljs-operator">=</span> #&#123;name&#125;,<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;username != null&quot;<span class="hljs-operator">&gt;</span>username <span class="hljs-operator">=</span> #&#123;username&#125;,<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;password != null&quot;<span class="hljs-operator">&gt;</span>password <span class="hljs-operator">=</span> #&#123;password&#125;,<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;phone != null&quot;<span class="hljs-operator">&gt;</span>phone <span class="hljs-operator">=</span> #&#123;phone&#125;,<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;sex != null&quot;<span class="hljs-operator">&gt;</span>sex <span class="hljs-operator">=</span> #&#123;sex&#125;,<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;idNumber != null&quot;<span class="hljs-operator">&gt;</span>id_Number <span class="hljs-operator">=</span> #&#123;idNumber&#125;,<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;updateTime != null&quot;<span class="hljs-operator">&gt;</span>update_Time <span class="hljs-operator">=</span> #&#123;updateTime&#125;,<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;updateUser != null&quot;<span class="hljs-operator">&gt;</span>update_User <span class="hljs-operator">=</span> #&#123;updateUser&#125;,<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>            <span class="hljs-operator">&lt;</span>if test<span class="hljs-operator">=</span>&quot;status != null&quot;<span class="hljs-operator">&gt;</span>status <span class="hljs-operator">=</span> #&#123;status&#125;,<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>if<span class="hljs-operator">&gt;</span><br>        <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">set</span><span class="hljs-operator">&gt;</span><br>        <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> #&#123;id&#125;<br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">update</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-编辑员工"><a href="#4-编辑员工" class="headerlink" title="4. 编辑员工"></a>4. 编辑员工</h2><h3 id="4-1-回显员工信息功能"><a href="#4-1-回显员工信息功能" class="headerlink" title="4.1 回显员工信息功能"></a>4.1 回显员工信息功能</h3><h4 id="4-1-1-Controller层"><a href="#4-1-1-Controller层" class="headerlink" title="4.1.1 Controller层"></a>4.1.1 Controller层</h4><p>在 EmployeeController 中创建 getById 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据id查询员工信息</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>   <span class="hljs-meta">@ApiOperation(&quot;根据id查询员工信息&quot;)</span><br>   <span class="hljs-keyword">public</span> Result&lt;Employee&gt; <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span>&#123;<br>       <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeService.getById(id);<br>       <span class="hljs-keyword">return</span> Result.success(employee);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-2-Service层"><a href="#4-1-2-Service层" class="headerlink" title="4.1.2 Service层"></a>4.1.2 Service层</h4><h5 id="4-1-2-1-Service层接口"><a href="#4-1-2-1-Service层接口" class="headerlink" title="4.1.2.1 Service层接口"></a>4.1.2.1 Service层接口</h5><p>在 EmployeeService 接口中声明 getById 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询员工</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>Employee <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><h5 id="4-1-2-2-Service层实现类"><a href="#4-1-2-2-Service层实现类" class="headerlink" title="4.1.2.2 Service层实现类"></a>4.1.2.2 Service层实现类</h5><p>在 EmployeeServiceImpl 中实现 getById 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询员工</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeMapper.getById(id);<br>    employee.setPassword(<span class="hljs-string">&quot;****&quot;</span>);<br>    <span class="hljs-keyword">return</span> employee;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-3-Mapper层"><a href="#4-1-3-Mapper层" class="headerlink" title="4.1.3 Mapper层"></a>4.1.3 Mapper层</h4><p>在 EmployeeMapper 接口中声明 getById 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询员工信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Select(&quot;select * from employee where id = #&#123;id&#125;&quot;)</span><br>Employee <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><h3 id="4-2-修改员工信息功能"><a href="#4-2-修改员工信息功能" class="headerlink" title="4.2 修改员工信息功能"></a>4.2 修改员工信息功能</h3><h4 id="4-2-1-Controller层"><a href="#4-2-1-Controller层" class="headerlink" title="4.2.1 Controller层"></a>4.2.1 Controller层</h4><p>在 EmployeeController 中创建 update 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 编辑员工信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employeeDTO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-meta">@ApiOperation(&quot;编辑员工信息&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;编辑员工信息：&#123;&#125;&quot;</span>, employeeDTO);<br>    employeeService.update(employeeDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-Service层"><a href="#4-2-2-Service层" class="headerlink" title="4.2.2 Service层"></a>4.2.2 Service层</h4><h5 id="4-2-2-1-Service层接口"><a href="#4-2-2-1-Service层接口" class="headerlink" title="4.2.2.1 Service层接口"></a>4.2.2.1 Service层接口</h5><p>在 EmployeeService 接口中声明 update 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 编辑员工信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employeeDTO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(EmployeeDTO employeeDTO)</span>;<br></code></pre></td></tr></table></figure><h5 id="4-2-2-2-Service层实现类"><a href="#4-2-2-2-Service层实现类" class="headerlink" title="4.2.2.2 Service层实现类"></a>4.2.2.2 Service层实现类</h5><p>在 EmployeeServiceImpl 中实现 update 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 编辑员工信息</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> employeeDTO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(EmployeeDTO employeeDTO)</span> &#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>    BeanUtils.copyProperties(employeeDTO, employee);<br><br>    employee.setUpdateTime(LocalDateTime.now());<br>    employee.setUpdateUser(BaseContext.getCurrentId());<br><br>    employeeMapper.update(employee);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-3-Mapper层"><a href="#4-2-3-Mapper层" class="headerlink" title="4.2.3 Mapper层"></a>4.2.3 Mapper层</h4><p>在实现<strong>启用禁用员工账号</strong>功能时，已实现employeeMapper.update(employee)，在此不需写Mapper层代码。</p><h2 id="5-菜品分类和套餐分类"><a href="#5-菜品分类和套餐分类" class="headerlink" title="5. 菜品分类和套餐分类"></a>5. 菜品分类和套餐分类</h2><p>直接导入相应代码工程</p><h1 id="三-菜品管理"><a href="#三-菜品管理" class="headerlink" title="三. 菜品管理"></a>三. 菜品管理</h1><h2 id="1-公共字段自动填充"><a href="#1-公共字段自动填充" class="headerlink" title="1. 公共字段自动填充"></a>1. 公共字段自动填充</h2><h3 id="1-1-实现思路"><a href="#1-1-实现思路" class="headerlink" title="1.1 实现思路"></a>1.1 实现思路</h3><p><strong>实现步骤</strong>：</p><ol><li>自定义注解 AutoFill，用于标识需要进行公共字段自动填充的方法</li><li>自定义切面类 AutoFillAspect，统一拦截加入了 AutoFill 注解的方法，通过反射为公共字段赋值</li><li>在 Mapper 的方法上加入 AutoFill 注解</li></ol><p><strong>技术点</strong>：枚举、注解、AOP、反射</p><h3 id="1-2-自定义注解-AutoFill"><a href="#1-2-自定义注解-AutoFill" class="headerlink" title="1.2 自定义注解 AutoFill"></a>1.2 自定义注解 AutoFill</h3><p>进入到sky-server模块，创建com.sky.annotation包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.annotation;<br><br><span class="hljs-keyword">import</span> com.sky.enumeration.OperationType;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义注解，用于标识某个方法需要进行功能字段自动填充处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoFill &#123;<br>    <span class="hljs-comment">//数据库操作类型：UPDATE INSERT</span><br>    OperationType <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-自定义切面-AutoFillAspect"><a href="#1-3-自定义切面-AutoFillAspect" class="headerlink" title="1.3 自定义切面 AutoFillAspect"></a>1.3 自定义切面 AutoFillAspect</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.aspect;<br><br><span class="hljs-keyword">import</span> com.sky.annotation.AutoFill;<br><span class="hljs-keyword">import</span> com.sky.constant.AutoFillConstant;<br><span class="hljs-keyword">import</span> com.sky.context.BaseContext;<br><span class="hljs-keyword">import</span> com.sky.enumeration.OperationType;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义切面，实现公共字段自动填充处理逻辑</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoFillAspect</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoFillPointCut</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前置通知，在通知中进行公共字段的赋值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(&quot;autoFillPointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoFill</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;开始进行公共字段自动填充...&quot;</span>);<br><br>        <span class="hljs-comment">//获取到当前被拦截的方法上的数据库操作类型</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<span class="hljs-comment">//方法签名对象</span><br>        <span class="hljs-type">AutoFill</span> <span class="hljs-variable">autoFill</span> <span class="hljs-operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);<span class="hljs-comment">//获得方法上的注解对象</span><br>        <span class="hljs-type">OperationType</span> <span class="hljs-variable">operationType</span> <span class="hljs-operator">=</span> autoFill.value();<span class="hljs-comment">//获得数据库操作类型</span><br><br>        <span class="hljs-comment">//获取到当前被拦截的方法的参数--实体对象</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-keyword">if</span>(args == <span class="hljs-literal">null</span> || args.length == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-comment">//准备赋值的数据</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">currentId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br><br>        <span class="hljs-comment">//根据当前不同的操作类型，为对应的属性通过反射来赋值</span><br>        <span class="hljs-keyword">if</span>(operationType == OperationType.INSERT)&#123;<br>            <span class="hljs-comment">//为4个公共字段赋值</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setCreateTime</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setCreateUser</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateTime</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateUser</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);<br><br>                <span class="hljs-comment">//通过反射为对象属性赋值</span><br>                setCreateTime.invoke(entity,now);<br>                setCreateUser.invoke(entity,currentId);<br>                setUpdateTime.invoke(entity,now);<br>                setUpdateUser.invoke(entity,currentId);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operationType == OperationType.UPDATE)&#123;<br>            <span class="hljs-comment">//为2个公共字段赋值</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateTime</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateUser</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);<br><br>                <span class="hljs-comment">//通过反射为对象属性赋值</span><br>                setUpdateTime.invoke(entity,now);<br>                setUpdateUser.invoke(entity,currentId);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-在Mapper接口的方法上加入-AutoFill-注解"><a href="#1-4-在Mapper接口的方法上加入-AutoFill-注解" class="headerlink" title="1.4 在Mapper接口的方法上加入 AutoFill 注解"></a>1.4 在Mapper接口的方法上加入 AutoFill 注解</h3><p>以<strong>CategoryMapper</strong>为例，分别在新增和修改方法添加@AutoFill()注解，也需要<strong>EmployeeMapper</strong>做相同操作；同时注释掉原有的新增和添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CategoryMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> category</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Insert(&quot;insert into category(type, name, sort, status, create_time, update_time, create_user, update_user)&quot; +</span><br><span class="hljs-meta">            &quot; VALUES&quot; +</span><br><span class="hljs-meta">            &quot; (#&#123;type&#125;, #&#123;name&#125;, #&#123;sort&#125;, #&#123;status&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span><br>    <span class="hljs-meta">@AutoFill(value = OperationType.INSERT)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Category category)</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id修改分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> category</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AutoFill(value = OperationType.UPDATE)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Category category)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2. 文件上传"></a>2. 文件上传</h2><ul><li>因为在新增菜品时，需要上传菜品对应的图片(文件)，包括后绪其它功能也会使用到文件上传，故要实现通用的文件上传接口。</li><li>在本项目选用阿里云的OSS服务进行文件存储。</li></ul><h3 id="2-1-定义OSS相关配置"><a href="#2-1-定义OSS相关配置" class="headerlink" title="2.1 定义OSS相关配置"></a>2.1 定义OSS相关配置</h3><p>在sky-server模块</p><ul><li>application-dev.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">alioss:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">oss-cn-hangzhou.aliyuncs.com</span><br>    <span class="hljs-attr">bucket-name:</span> <span class="hljs-string">sky-take-out</span><br></code></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span>    <span class="hljs-comment">#设置环境</span><br><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">alioss:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">$&#123;sky.alioss.endpoint&#125;</span><br>    <span class="hljs-attr">bucket-name:</span> <span class="hljs-string">$&#123;sky.alioss.bucket-name&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-OSS工具类对象"><a href="#2-2-OSS工具类对象" class="headerlink" title="2.2 OSS工具类对象"></a>2.2 OSS工具类对象</h3><p>在sky-server模块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-keyword">import</span> com.sky.properties.AliOssProperties;<br><span class="hljs-keyword">import</span> com.sky.utils.AliOssUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置类，用于创建AliOssUtil对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OssConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-keyword">public</span> AliOssUtil <span class="hljs-title function_">aliOssUtil</span><span class="hljs-params">(AliOssProperties aliOssProperties)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;开始创建阿里云文件上传工具类对象：&#123;&#125;&quot;</span>,aliOssProperties);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AliOssUtil</span>(aliOssProperties.getEndpoint(),<br>                aliOssProperties.getAccessKeyId(),<br>                aliOssProperties.getAccessKeySecret(),<br>                aliOssProperties.getBucketName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-定义文件上传接口"><a href="#2-3-定义文件上传接口" class="headerlink" title="2.3 定义文件上传接口"></a>2.3 定义文件上传接口</h3><p>在sky-server模块中定义接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-keyword">import</span> com.sky.constant.MessageConstant;<br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> com.sky.utils.AliOssUtil;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通用接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/common&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;通用接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AliOssUtil aliOssUtil;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;文件上传&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;文件上传：&#123;&#125;&quot;</span>,file);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//原始文件名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>            <span class="hljs-comment">//截取原始文件名的后缀 </span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>            <span class="hljs-comment">//构造新文件名称</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + extension;<br><br>            <span class="hljs-comment">//文件的请求路径</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> aliOssUtil.upload(file.getBytes(), objectName);<br>            <span class="hljs-keyword">return</span> Result.success(filePath);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            log.error(<span class="hljs-string">&quot;文件上传失败：&#123;&#125;&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.error(MessageConstant.UPLOAD_FAILED);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-新增菜品"><a href="#3-新增菜品" class="headerlink" title="3. 新增菜品"></a>3. 新增菜品</h2><h3 id="3-1-Controller层-1"><a href="#3-1-Controller层-1" class="headerlink" title="3.1 Controller层"></a>3.1 Controller层</h3><p>进入到sky-server模块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-keyword">import</span> com.sky.dto.DishDTO;<br><span class="hljs-keyword">import</span> com.sky.dto.DishPageQueryDTO;<br><span class="hljs-keyword">import</span> com.sky.entity.Dish;<br><span class="hljs-keyword">import</span> com.sky.result.PageResult;<br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> com.sky.service.DishService;<br><span class="hljs-keyword">import</span> com.sky.vo.DishVO;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 菜品管理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/dish&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;菜品相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DishController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishService dishService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增菜品</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dishDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;新增菜品&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DishDTO dishDTO)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;新增菜品：&#123;&#125;&quot;</span>, dishDTO);<br>        dishService.saveWithFlavor(dishDTO);<span class="hljs-comment">//后绪步骤开发</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-Service层-1"><a href="#3-2-Service层-1" class="headerlink" title="3.2 Service层"></a>3.2 Service层</h3><h4 id="3-2-1-Service层接口-1"><a href="#3-2-1-Service层接口-1" class="headerlink" title="3.2.1 Service层接口"></a>3.2.1 Service层接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-keyword">import</span> com.sky.dto.DishDTO;<br><span class="hljs-keyword">import</span> com.sky.entity.Dish;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DishService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增菜品和对应的口味</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dishDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveWithFlavor</span><span class="hljs-params">(DishDTO dishDTO)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-Service层实现类-1"><a href="#3-2-2-Service层实现类-1" class="headerlink" title="3.2.2 Service层实现类"></a>3.2.2 Service层实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DishServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DishService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishMapper dishMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishFlavorMapper dishFlavorMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增菜品和对应的口味</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dishDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveWithFlavor</span><span class="hljs-params">(DishDTO dishDTO)</span> &#123;<br><br>        <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>        BeanUtils.copyProperties(dishDTO, dish);<br><br>        <span class="hljs-comment">//向菜品表插入1条数据</span><br>        dishMapper.insert(dish);<span class="hljs-comment">//后绪步骤实现</span><br><br>        <span class="hljs-comment">//获取insert语句生成的主键值</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">dishId</span> <span class="hljs-operator">=</span> dish.getId();<br><br>        List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors();<br>        <span class="hljs-keyword">if</span> (flavors != <span class="hljs-literal">null</span> &amp;&amp; flavors.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            flavors.forEach(dishFlavor -&gt; &#123;<br>                dishFlavor.setDishId(dishId);<br>            &#125;);<br>            <span class="hljs-comment">//向口味表插入n条数据</span><br>            dishFlavorMapper.insertBatch(flavors);<span class="hljs-comment">//后绪步骤实现</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-Mapper层-1"><a href="#3-3-Mapper层-1" class="headerlink" title="3.3 Mapper层"></a>3.3 Mapper层</h3><h4 id="3-3-1-DishMapper-java"><a href="#3-3-1-DishMapper-java" class="headerlink" title="3.3.1 DishMapper.java"></a>3.3.1 DishMapper.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 插入菜品数据</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dish</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@AutoFill(value = OperationType.INSERT)</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Dish dish)</span>;<br></code></pre></td></tr></table></figure><p>在&#x2F;resources&#x2F;mapper中创建DishMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.DishMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into dish (name, category_id, price, image, description, create_time, update_time, create_user,update_user, status)<br>        values (#&#123;name&#125;, #&#123;categoryId&#125;, #&#123;price&#125;, #&#123;image&#125;, #&#123;description&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;, #&#123;status&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2-DishFlavorMapper-java"><a href="#3-3-2-DishFlavorMapper-java" class="headerlink" title="3.3.2 DishFlavorMapper.java"></a>3.3.2 DishFlavorMapper.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-keyword">import</span> com.sky.entity.DishFlavor;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DishFlavorMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量插入口味数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> flavors</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBatch</span><span class="hljs-params">(List&lt;DishFlavor&gt; flavors)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在&#x2F;resources&#x2F;mapper中创建DishFlavorMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.DishFlavorMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span>&gt;</span><br>        insert into dish_flavor (dish_id, name, value) VALUES<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;flavors&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;df&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            (#&#123;df.dishId&#125;,#&#123;df.name&#125;,#&#123;df.value&#125;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-菜品分页查询"><a href="#4-菜品分页查询" class="headerlink" title="4. 菜品分页查询"></a>4. 菜品分页查询</h2><h3 id="4-1-Controller层"><a href="#4-1-Controller层" class="headerlink" title="4.1  Controller层"></a>4.1  Controller层</h3><p><strong>根据接口定义创建DishController的page分页查询方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜品分页查询</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dishPageQueryDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br>   <span class="hljs-meta">@ApiOperation(&quot;菜品分页查询&quot;)</span><br>   <span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(DishPageQueryDTO dishPageQueryDTO)</span> &#123;<br>       log.info(<span class="hljs-string">&quot;菜品分页查询:&#123;&#125;&quot;</span>, dishPageQueryDTO);<br>       <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> dishService.pageQuery(dishPageQueryDTO);<span class="hljs-comment">//后绪步骤定义</span><br>       <span class="hljs-keyword">return</span> Result.success(pageResult);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-Service层"><a href="#4-2-Service层" class="headerlink" title="4.2 Service层"></a>4.2 Service层</h3><h4 id="4-2-1-Service层接口"><a href="#4-2-1-Service层接口" class="headerlink" title="4.2.1 Service层接口"></a>4.2.1 Service层接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜品分页查询</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dishPageQueryDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(DishPageQueryDTO dishPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-Service层实现类"><a href="#4-2-2-Service层实现类" class="headerlink" title="4.2.2 Service层实现类"></a>4.2.2 Service层实现类</h4><p><strong>在 DishServiceImpl 中实现分页查询方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜品分页查询</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dishPageQueryDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(DishPageQueryDTO dishPageQueryDTO)</span> &#123;<br>       PageHelper.startPage(dishPageQueryDTO.getPage(), dishPageQueryDTO.getPageSize());<br>       Page&lt;DishVO&gt; page = dishMapper.pageQuery(dishPageQueryDTO);<span class="hljs-comment">//后绪步骤实现</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(page.getTotal(), page.getResult());<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-Mapper层"><a href="#4-3-Mapper层" class="headerlink" title="4.3 Mapper层"></a>4.3 Mapper层</h3><p><strong>在 DishMapper 接口中声明 pageQuery 方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜品分页查询</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dishPageQueryDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   Page&lt;DishVO&gt; <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(DishPageQueryDTO dishPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><p><strong>在 DishMapper.xml 中编写SQL：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pageQuery&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sky.vo.DishVO&quot;</span>&gt;</span><br>        select d.* , c.name as categoryName from dish d left outer join category c on d.category_id = c.id<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                and d.name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>                and d.category_id = #&#123;categoryId&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>                and d.status = #&#123;status&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        order by d.create_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-删除菜品"><a href="#5-删除菜品" class="headerlink" title="5. 删除菜品"></a>5. 删除菜品</h2><h3 id="5-1-Controller层"><a href="#5-1-Controller层" class="headerlink" title="5.1 Controller层"></a>5.1 Controller层</h3><p><strong>根据删除菜品的接口定义在DishController中创建方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜品批量删除</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@DeleteMapping</span><br>   <span class="hljs-meta">@ApiOperation(&quot;菜品批量删除&quot;)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;<br>       log.info(<span class="hljs-string">&quot;菜品批量删除：&#123;&#125;&quot;</span>, ids);<br>       dishService.deleteBatch(ids);<br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-Service层"><a href="#5-2-Service层" class="headerlink" title="5.2 Service层"></a>5.2 Service层</h3><h4 id="5-2-1-Service层接口"><a href="#5-2-1-Service层接口" class="headerlink" title="5.2.1 Service层接口"></a>5.2.1 Service层接口</h4><p><strong>在DishService接口中声明deleteBatch方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜品批量删除</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(List&lt;Long&gt; ids)</span>;<br></code></pre></td></tr></table></figure><h4 id="5-2-2-Service层实现类"><a href="#5-2-2-Service层实现类" class="headerlink" title="5.2.2 Service层实现类"></a>5.2.2 Service层实现类</h4><p><strong>在DishServiceImpl中实现deleteBatch方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> SetmealDishMapper setmealDishMapper;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜品批量删除</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Transactional</span><span class="hljs-comment">//事务</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(List&lt;Long&gt; ids)</span> &#123;<br>       <span class="hljs-comment">//判断当前菜品是否能够删除---是否存在起售中的菜品？？</span><br>       <span class="hljs-keyword">for</span> (Long id : ids) &#123;<br>           <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> dishMapper.getById(id);<span class="hljs-comment">//后绪步骤实现</span><br>           <span class="hljs-keyword">if</span> (dish.getStatus() == StatusConstant.ENABLE) &#123;<br>               <span class="hljs-comment">//当前菜品处于起售中，不能删除</span><br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_ON_SALE);<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-comment">//判断当前菜品是否能够删除---是否被套餐关联了？？</span><br>       List&lt;Long&gt; setmealIds = setmealDishMapper.getSetmealIdsByDishIds(ids);<br>       <span class="hljs-keyword">if</span> (setmealIds != <span class="hljs-literal">null</span> &amp;&amp; setmealIds.size() &gt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-comment">//当前菜品被套餐关联了，不能删除</span><br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_BE_RELATED_BY_SETMEAL);<br>       &#125;<br><br>       <span class="hljs-comment">//删除菜品表中的菜品数据</span><br>       <span class="hljs-keyword">for</span> (Long id : ids) &#123;<br>           dishMapper.deleteById(id);<br>           <span class="hljs-comment">//删除菜品关联的口味数据</span><br>           dishFlavorMapper.deleteByDishId(id);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-Mapper层"><a href="#5-3-Mapper层" class="headerlink" title="5.3 Mapper层"></a>5.3 Mapper层</h3><p><strong>在DishMapper中声明getById方法，并配置SQL：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据主键查询菜品</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Select(&quot;select * from dish where id = #&#123;id&#125;&quot;)</span><br>   Dish <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p><strong>创建SetmealDishMapper，声明getSetmealIdsByDishIds方法，并在xml文件中编写SQL：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-keyword">import</span> com.sky.entity.SetmealDish;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Delete;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SetmealDishMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据菜品id查询对应的套餐id</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dishIds</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//select setmeal_id from setmeal_dish where dish_id in (1,2,3,4)</span><br>    List&lt;Long&gt; <span class="hljs-title function_">getSetmealIdsByDishIds</span><span class="hljs-params">(List&lt;Long&gt; dishIds)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>SetmealDishMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.SetmealDishMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getSetmealIdsByDishIds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span>&gt;</span><br>        select setmeal_id from setmeal_dish where dish_id in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;dishIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;dishId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>            #&#123;dishId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>在DishMapper.java中声明deleteById方法并配置SQL：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据主键删除菜品数据</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Delete(&quot;delete from dish where id = #&#123;id&#125;&quot;)</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p><strong>在DishFlavorMapper中声明deleteByDishId方法并配置SQL：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据菜品id删除对应的口味数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dishId</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Delete(&quot;delete from dish_flavor where dish_id = #&#123;dishId&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByDishId</span><span class="hljs-params">(Long dishId)</span>;<br></code></pre></td></tr></table></figure><h2 id="6-修改菜品"><a href="#6-修改菜品" class="headerlink" title="6. 修改菜品"></a>6. 修改菜品</h2><h3 id="6-1-Controller层"><a href="#6-1-Controller层" class="headerlink" title="6.1 Controller层"></a>6.1 Controller层</h3><p><strong>根据修改菜品的接口定义在DishController中创建方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 修改菜品</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dishDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PutMapping</span><br>   <span class="hljs-meta">@ApiOperation(&quot;修改菜品&quot;)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DishDTO dishDTO)</span> &#123;<br>       log.info(<span class="hljs-string">&quot;修改菜品：&#123;&#125;&quot;</span>, dishDTO);<br>       dishService.updateWithFlavor(dishDTO);<br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-Service层"><a href="#6-2-Service层" class="headerlink" title="6.2 Service层"></a>6.2 Service层</h3><h4 id="6-2-1-Service层接口"><a href="#6-2-1-Service层接口" class="headerlink" title="6.2.1 Service层接口"></a>6.2.1 Service层接口</h4><p><strong>在DishService接口中声明updateWithFlavor方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据id修改菜品基本信息和对应的口味信息</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dishDTO</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateWithFlavor</span><span class="hljs-params">(DishDTO dishDTO)</span>;<br></code></pre></td></tr></table></figure><h4 id="6-2-2-Service层实现类"><a href="#6-2-2-Service层实现类" class="headerlink" title="6.2.2 Service层实现类"></a>6.2.2 Service层实现类</h4><p><strong>在DishServiceImpl中实现updateWithFlavor方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据id修改菜品基本信息和对应的口味信息</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dishDTO</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateWithFlavor</span><span class="hljs-params">(DishDTO dishDTO)</span> &#123;<br>       <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>       BeanUtils.copyProperties(dishDTO, dish);<br><br>       <span class="hljs-comment">//修改菜品表基本信息</span><br>       dishMapper.update(dish);<br><br>       <span class="hljs-comment">//删除原有的口味数据</span><br>       dishFlavorMapper.deleteByDishId(dishDTO.getId());<br><br>       <span class="hljs-comment">//重新插入口味数据</span><br>       List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors();<br>       <span class="hljs-keyword">if</span> (flavors != <span class="hljs-literal">null</span> &amp;&amp; flavors.size() &gt; <span class="hljs-number">0</span>) &#123;<br>           flavors.forEach(dishFlavor -&gt; &#123;<br>               dishFlavor.setDishId(dishDTO.getId());<br>           &#125;);<br>           <span class="hljs-comment">//向口味表插入n条数据</span><br>           dishFlavorMapper.insertBatch(flavors);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-Mapper层"><a href="#6-3-Mapper层" class="headerlink" title="6.3 Mapper层"></a>6.3 Mapper层</h3><p><strong>在DishMapper中，声明update方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据id动态修改菜品数据</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dish</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@AutoFill(value = OperationType.UPDATE)</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Dish dish)</span>;<br></code></pre></td></tr></table></figure><p><strong>并在DishMapper.xml文件中编写SQL:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>        update dish<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span>category_id = #&#123;categoryId&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;price != null&quot;</span>&gt;</span>price = #&#123;price&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;image != null&quot;</span>&gt;</span>image = #&#123;image&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;description != null&quot;</span>&gt;</span>description = #&#123;description&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span>update_time = #&#123;updateTime&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateUser != null&quot;</span>&gt;</span>update_user = #&#123;updateUser&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-菜品起售停售功能"><a href="#7-菜品起售停售功能" class="headerlink" title="7. 菜品起售停售功能"></a>7. 菜品起售停售功能</h2><h3 id="7-1-Controller层"><a href="#7-1-Controller层" class="headerlink" title="7.1  Controller层"></a>7.1  Controller层</h3><p><strong>DishController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 菜品起售停售</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;菜品起售停售&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer status, Long id)</span>&#123;<br>    dishService.startOrStop(status,id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-Service层"><a href="#7-2-Service层" class="headerlink" title="7.2 Service层"></a>7.2 Service层</h3><h4 id="7-2-1-DishService接口"><a href="#7-2-1-DishService接口" class="headerlink" title="7.2.1 DishService接口"></a>7.2.1 DishService接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 菜品起售停售</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span>;<br></code></pre></td></tr></table></figure><h4 id="7-2-2-DishServiceImpl实现类"><a href="#7-2-2-DishServiceImpl实现类" class="headerlink" title="7.2.2 DishServiceImpl实现类"></a>7.2.2 DishServiceImpl实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowire</span><br><span class="hljs-keyword">private</span> SetmealMapper setmealMapper;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 菜品起售停售</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span> &#123;<br>    <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> Dish.builder()<br>        .id(id)<br>        .status(status)<br>        .build();<br>    dishMapper.update(dish);<br><br>    <span class="hljs-keyword">if</span> (status == StatusConstant.DISABLE) &#123;<br>        <span class="hljs-comment">// 如果是停售操作，还需要将包含当前菜品的套餐也停售</span><br>        List&lt;Long&gt; dishIds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        dishIds.add(id);<br>        <span class="hljs-comment">// select setmeal_id from setmeal_dish where dish_id in (?,?,?)</span><br>        List&lt;Long&gt; setmealIds = setmealDishMapper.getSetmealIdsByDishIds(dishIds);<br>        <span class="hljs-keyword">if</span> (setmealIds != <span class="hljs-literal">null</span> &amp;&amp; setmealIds.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Long setmealId : setmealIds) &#123;<br>                <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> Setmeal.builder()<br>                    .id(setmealId)<br>                    .status(StatusConstant.DISABLE)<br>                    .build();<br>                setmealMapper.update(setmeal);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-Mapper层"><a href="#7-3-Mapper层" class="headerlink" title="7.3 Mapper层"></a>7.3 Mapper层</h3><h4 id="7-3-1-SetmealMapper"><a href="#7-3-1-SetmealMapper" class="headerlink" title="7.3.1 SetmealMapper"></a>7.3.1 SetmealMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id修改套餐</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmeal</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@AutoFill(OperationType.UPDATE)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Setmeal setmeal)</span>;<br></code></pre></td></tr></table></figure><h4 id="7-3-2-SetmealMapper-xml"><a href="#7-3-2-SetmealMapper-xml" class="headerlink" title="7.3.2 SetmealMapper.xml"></a>7.3.2 SetmealMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.SetmealMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Setmeal&quot;</span>&gt;</span><br>        update setmeal<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                name = #&#123;name&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>                category_id = #&#123;categoryId&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;price != null&quot;</span>&gt;</span><br>                price = #&#123;price&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>                status = #&#123;status&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;description != null&quot;</span>&gt;</span><br>                description = #&#123;description&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;image != null&quot;</span>&gt;</span><br>                image = #&#123;image&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>                update_time = #&#123;updateTime&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateUser != null&quot;</span>&gt;</span><br>                update_user = #&#123;updateUser&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="四-套餐管理"><a href="#四-套餐管理" class="headerlink" title="四. 套餐管理"></a>四. 套餐管理</h1><h2 id="1-新增套餐"><a href="#1-新增套餐" class="headerlink" title="1. 新增套餐"></a>1. 新增套餐</h2><h3 id="1-1-Controller层"><a href="#1-1-Controller层" class="headerlink" title="1.1 Controller层"></a>1.1 Controller层</h3><p><strong>DishController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据分类id查询菜品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;List&lt;Dish&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span>&#123;<br>    List&lt;Dish&gt; list = dishService.list(categoryId);<br>    <span class="hljs-keyword">return</span> Result.success(list);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-Service层"><a href="#1-2-Service层" class="headerlink" title="1.2 Service层"></a>1.2 Service层</h3><h4 id="1-2-1-Service层接口"><a href="#1-2-1-Service层接口" class="headerlink" title="1.2.1 Service层接口"></a>1.2.1 Service层接口</h4><p><strong>DishService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据分类id查询菜品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;Dish&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-2-2-Service层实现类"><a href="#1-2-2-Service层实现类" class="headerlink" title="1.2.2 Service层实现类"></a>1.2.2 Service层实现类</h4><p><strong>DishServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据分类id查询菜品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> List&lt;Dish&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span> &#123;<br>    <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> Dish.builder()<br>        .categoryId(categoryId)<br>        .status(StatusConstant.ENABLE)<br>        .build();<br>    <span class="hljs-keyword">return</span> dishMapper.list(dish);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-Mapper层"><a href="#1-3-Mapper层" class="headerlink" title="1.3 Mapper层"></a>1.3 Mapper层</h3><h4 id="1-3-1-DishMapper"><a href="#1-3-1-DishMapper" class="headerlink" title="1.3.1 DishMapper"></a>1.3.1 DishMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 动态条件查询菜品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dish</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;Dish&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Dish dish)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-3-2-DishMapper-xml"><a href="#1-3-2-DishMapper-xml" class="headerlink" title="1.3.2 DishMapper.xml"></a>1.3.2 DishMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Dish&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Dish&quot;</span>&gt;</span><br>    select * from dish<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>            and category_id = #&#123;categoryId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by create_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-4-SetmealController"><a href="#1-4-SetmealController" class="headerlink" title="1.4 SetmealController"></a>1.4 SetmealController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 套餐管理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/setmeal&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;套餐相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetmealController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealService setmealService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增套餐</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;新增套餐&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;<br>        setmealService.saveWithDish(setmealDTO);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-Service层"><a href="#1-5-Service层" class="headerlink" title="1.5 Service层"></a>1.5 Service层</h3><h4 id="1-5-1-SetmealService接口"><a href="#1-5-1-SetmealService接口" class="headerlink" title="1.5.1 SetmealService接口"></a>1.5.1 SetmealService接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SetmealService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveWithDish</span><span class="hljs-params">(SetmealDTO setmealDTO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-5-2-SetmealServiceImpl实现类"><a href="#1-5-2-SetmealServiceImpl实现类" class="headerlink" title="1.5.2 SetmealServiceImpl实现类"></a>1.5.2 SetmealServiceImpl实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 套餐业务实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetmealServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SetmealService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealMapper setmealMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealDishMapper setmealDishMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishMapper dishMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveWithDish</span><span class="hljs-params">(SetmealDTO setmealDTO)</span> &#123;<br>        <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Setmeal</span>();<br>        BeanUtils.copyProperties(setmealDTO, setmeal);<br><br>        <span class="hljs-comment">//向套餐表插入数据</span><br>        setmealMapper.insert(setmeal);<br><br>        <span class="hljs-comment">//获取生成的套餐id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">setmealId</span> <span class="hljs-operator">=</span> setmeal.getId();<br><br>        List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();<br>        setmealDishes.forEach(setmealDish -&gt; &#123;<br>            setmealDish.setSetmealId(setmealId);<br>        &#125;);<br><br>        <span class="hljs-comment">//保存套餐和菜品的关联关系</span><br>        setmealDishMapper.insertBatch(setmealDishes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-Mapper层"><a href="#1-6-Mapper层" class="headerlink" title="1.6 Mapper层"></a>1.6 Mapper层</h3><h4 id="1-6-1-SetmealMapper"><a href="#1-6-1-SetmealMapper" class="headerlink" title="1.6.1 SetmealMapper"></a>1.6.1 SetmealMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增套餐</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmeal</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@AutoFill(OperationType.INSERT)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Setmeal setmeal)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-6-2-SetmealMapper-xml"><a href="#1-6-2-SetmealMapper-xml" class="headerlink" title="1.6.2 SetmealMapper.xml"></a>1.6.2 SetmealMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Setmeal&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into setmeal<br>    (category_id, name, price, status, description, image, create_time, update_time, create_user, update_user)<br>    values (#&#123;categoryId&#125;, #&#123;name&#125;, #&#123;price&#125;, #&#123;status&#125;, #&#123;description&#125;, #&#123;image&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;,<br>    #&#123;createUser&#125;, #&#123;updateUser&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-6-3-SetmealDishMapper"><a href="#1-6-3-SetmealDishMapper" class="headerlink" title="1.6.3 SetmealDishMapper"></a>1.6.3 SetmealDishMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量保存套餐和菜品的关联关系</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealDishes</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBatch</span><span class="hljs-params">(List&lt;SetmealDish&gt; setmealDishes)</span>;<br></code></pre></td></tr></table></figure><h4 id="1-6-4-SetmealDishMapper-xml"><a href="#1-6-4-SetmealDishMapper-xml" class="headerlink" title="1.6.4 SetmealDishMapper.xml"></a>1.6.4 SetmealDishMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>    insert into setmeal_dish<br>    (setmeal_id,dish_id,name,price,copies)<br>    values<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;setmealDishes&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;sd&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>        (#&#123;sd.setmealId&#125;,#&#123;sd.dishId&#125;,#&#123;sd.name&#125;,#&#123;sd.price&#125;,#&#123;sd.copies&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-套餐分页查询"><a href="#2-套餐分页查询" class="headerlink" title="2. 套餐分页查询"></a>2. 套餐分页查询</h2><h3 id="2-1-SetmealController"><a href="#2-1-SetmealController" class="headerlink" title="2.1 SetmealController"></a>2.1 SetmealController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealPageQueryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;分页查询&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;<br>    <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> setmealService.pageQuery(setmealPageQueryDTO);<br>    <span class="hljs-keyword">return</span> Result.success(pageResult);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-SetmealService"><a href="#2-2-SetmealService" class="headerlink" title="2.2 SetmealService"></a>2.2 SetmealService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealPageQueryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><h3 id="2-3-SetmealServiceImpl"><a href="#2-3-SetmealServiceImpl" class="headerlink" title="2.3 SetmealServiceImpl"></a>2.3 SetmealServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealPageQueryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pageNum</span> <span class="hljs-operator">=</span> setmealPageQueryDTO.getPage();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> setmealPageQueryDTO.getPageSize();<br><br>    PageHelper.startPage(pageNum, pageSize);<br>    Page&lt;SetmealVO&gt; page = setmealMapper.pageQuery(setmealPageQueryDTO);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(page.getTotal(), page.getResult());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-SetmealMapper"><a href="#2-4-SetmealMapper" class="headerlink" title="2.4 SetmealMapper"></a>2.4 SetmealMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealPageQueryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>Page&lt;SetmealVO&gt; <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><h3 id="2-5-SetmealMapper-xml"><a href="#2-5-SetmealMapper-xml" class="headerlink" title="2.5 SetmealMapper.xml"></a>2.5 SetmealMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pageQuery&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sky.vo.SetmealVO&quot;</span>&gt;</span><br>    select<br>    s.*,c.name categoryName<br>    from<br>    setmeal s<br>    left join<br>    category c<br>    on<br>    s.category_id = c.id<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            and s.name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and s.status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>            and s.category_id = #&#123;categoryId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by s.create_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-删除套餐"><a href="#3-删除套餐" class="headerlink" title="3. 删除套餐"></a>3. 删除套餐</h2><h3 id="3-1-SetmealController"><a href="#3-1-SetmealController" class="headerlink" title="3.1 SetmealController"></a>3.1 SetmealController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除套餐</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@DeleteMapping</span><br><span class="hljs-meta">@ApiOperation(&quot;批量删除套餐&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;<br>    setmealService.deleteBatch(ids);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-SetmealService"><a href="#3-2-SetmealService" class="headerlink" title="3.2 SetmealService"></a>3.2 SetmealService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除套餐</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(List&lt;Long&gt; ids)</span>;<br></code></pre></td></tr></table></figure><h3 id="3-3-SetmealServiceImpl"><a href="#3-3-SetmealServiceImpl" class="headerlink" title="3.3 SetmealServiceImpl"></a>3.3 SetmealServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除套餐</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(List&lt;Long&gt; ids)</span> &#123;<br>    ids.forEach(id -&gt; &#123;<br>        <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> setmealMapper.getById(id);<br>        <span class="hljs-keyword">if</span>(StatusConstant.ENABLE == setmeal.getStatus())&#123;<br>            <span class="hljs-comment">//起售中的套餐不能删除</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeletionNotAllowedException</span>(MessageConstant.SETMEAL_ON_SALE);<br>        &#125;<br>    &#125;);<br><br>    ids.forEach(setmealId -&gt; &#123;<br>        <span class="hljs-comment">//删除套餐表中的数据</span><br>        setmealMapper.deleteById(setmealId);<br>        <span class="hljs-comment">//删除套餐菜品关系表中的数据</span><br>        setmealDishMapper.deleteBySetmealId(setmealId);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-SetmealMapper"><a href="#3-4-SetmealMapper" class="headerlink" title="3.4 SetmealMapper"></a>3.4 SetmealMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询套餐</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Select(&quot;select * from setmeal where id = #&#123;id&#125;&quot;)</span><br>Setmeal <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除套餐</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealId</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Delete(&quot;delete from setmeal where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long setmealId)</span>;<br></code></pre></td></tr></table></figure><h3 id="3-5-SetmealDishMapper"><a href="#3-5-SetmealDishMapper" class="headerlink" title="3.5 SetmealDishMapper"></a>3.5 SetmealDishMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据套餐id删除套餐和菜品的关联关系</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealId</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Delete(&quot;delete from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBySetmealId</span><span class="hljs-params">(Long setmealId)</span>;<br></code></pre></td></tr></table></figure><h2 id="4-修改套餐"><a href="#4-修改套餐" class="headerlink" title="4. 修改套餐"></a>4. 修改套餐</h2><h3 id="4-1-SetmealController"><a href="#4-1-SetmealController" class="headerlink" title="4.1 SetmealController"></a>4.1 SetmealController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询套餐，用于修改页面回显数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;根据id查询套餐&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;SetmealVO&gt; <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    <span class="hljs-type">SetmealVO</span> <span class="hljs-variable">setmealVO</span> <span class="hljs-operator">=</span> setmealService.getByIdWithDish(id);<br>    <span class="hljs-keyword">return</span> Result.success(setmealVO);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改套餐</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-meta">@ApiOperation(&quot;修改套餐&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;<br>    setmealService.update(setmealDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-SetmealService"><a href="#4-2-SetmealService" class="headerlink" title="4.2 SetmealService"></a>4.2 SetmealService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询套餐和关联的菜品数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>SetmealVO <span class="hljs-title function_">getByIdWithDish</span><span class="hljs-params">(Long id)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改套餐</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealDTO</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(SetmealDTO setmealDTO)</span>;<br></code></pre></td></tr></table></figure><h3 id="4-3-SetmealServiceImpl"><a href="#4-3-SetmealServiceImpl" class="headerlink" title="4.3 SetmealServiceImpl"></a>4.3 SetmealServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询套餐和套餐菜品关系</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> SetmealVO <span class="hljs-title function_">getByIdWithDish</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> setmealMapper.getById(id);<br>    List&lt;SetmealDish&gt; setmealDishes = setmealDishMapper.getBySetmealId(id);<br><br>    <span class="hljs-type">SetmealVO</span> <span class="hljs-variable">setmealVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetmealVO</span>();<br>    BeanUtils.copyProperties(setmeal, setmealVO);<br>    setmealVO.setSetmealDishes(setmealDishes);<br>    <br>    <span class="hljs-keyword">return</span> setmealVO;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改套餐</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealDTO</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(SetmealDTO setmealDTO)</span> &#123;<br>    <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Setmeal</span>();<br>    BeanUtils.copyProperties(setmealDTO, setmeal);<br><br>    <span class="hljs-comment">//1、修改套餐表，执行update</span><br>    setmealMapper.update(setmeal);<br><br>    <span class="hljs-comment">//套餐id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">setmealId</span> <span class="hljs-operator">=</span> setmealDTO.getId();<br><br>    <span class="hljs-comment">//2、删除套餐和菜品的关联关系，操作setmeal_dish表，执行delete</span><br>    setmealDishMapper.deleteBySetmealId(setmealId);<br><br>    List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();<br>    setmealDishes.forEach(setmealDish -&gt; &#123;<br>        setmealDish.setSetmealId(setmealId);<br>    &#125;);<br>    <span class="hljs-comment">//3、重新插入套餐和菜品的关联关系，操作setmeal_dish表，执行insert</span><br>    setmealDishMapper.insertBatch(setmealDishes);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-SetmealDishMapper"><a href="#4-4-SetmealDishMapper" class="headerlink" title="4.4 SetmealDishMapper"></a>4.4 SetmealDishMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据套餐id查询套餐和菜品的关联关系</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> setmealId</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Select(&quot;select * from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span><br>   List&lt;SetmealDish&gt; <span class="hljs-title function_">getBySetmealId</span><span class="hljs-params">(Long setmealId)</span>;<br></code></pre></td></tr></table></figure><h2 id="5-起售停售套餐"><a href="#5-起售停售套餐" class="headerlink" title="5. 起售停售套餐"></a>5. 起售停售套餐</h2><h3 id="5-1-SetmealController"><a href="#5-1-SetmealController" class="headerlink" title="5.1 SetmealController"></a>5.1 SetmealController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 套餐起售停售</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;套餐起售停售&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer status, Long id)</span> &#123;<br>    setmealService.startOrStop(status, id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-SetmealService"><a href="#5-2-SetmealService" class="headerlink" title="5.2 SetmealService"></a>5.2 SetmealService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 套餐起售、停售</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span>;<br></code></pre></td></tr></table></figure><h3 id="5-3-SetmealServiceImpl"><a href="#5-3-SetmealServiceImpl" class="headerlink" title="5.3 SetmealServiceImpl"></a>5.3 SetmealServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 套餐起售、停售</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span> &#123;<br>    <span class="hljs-comment">//起售套餐时，判断套餐内是否有停售菜品，有停售菜品提示&quot;套餐内包含未启售菜品，无法启售&quot;</span><br>    <span class="hljs-keyword">if</span>(status == StatusConstant.ENABLE)&#123;<br>        <span class="hljs-comment">//select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = ?</span><br>        List&lt;Dish&gt; dishList = dishMapper.getBySetmealId(id);<br>        <span class="hljs-keyword">if</span>(dishList != <span class="hljs-literal">null</span> &amp;&amp; dishList.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            dishList.forEach(dish -&gt; &#123;<br>                <span class="hljs-keyword">if</span>(StatusConstant.DISABLE == dish.getStatus())&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetmealEnableFailedException</span>(MessageConstant.SETMEAL_ENABLE_FAILED);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> Setmeal.builder()<br>        .id(id)<br>        .status(status)<br>        .build();<br>    setmealMapper.update(setmeal);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-DishMapper"><a href="#5-4-DishMapper" class="headerlink" title="5.4 DishMapper"></a>5.4 DishMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据套餐id查询菜品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmealId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Select(&quot;select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = #&#123;setmealId&#125;&quot;)</span><br>List&lt;Dish&gt; <span class="hljs-title function_">getBySetmealId</span><span class="hljs-params">(Long setmealId)</span>;<br></code></pre></td></tr></table></figure><h1 id="五-Redis"><a href="#五-Redis" class="headerlink" title="五. Redis"></a>五. Redis</h1><h2 id="1-Redis简介"><a href="#1-Redis简介" class="headerlink" title="1. Redis简介"></a>1. Redis简介</h2><p>Redis是一个基于<strong>内存</strong>的key-value结构数据库。Redis 是互联网技术领域使用最为广泛的<strong>存储中间件</strong>。</p><p><strong>主要特点：</strong></p><ul><li>基于内存存储，读写性能高  </li><li>适合存储热点数据（热点商品、资讯、新闻）</li><li>企业应用广泛</li></ul><p><strong>启动Redis</strong>:在Redis安装目录cmd以下命令<br><code>redis-server.exe redis.windows.conf</code></p><h2 id="2-Redis数据类型"><a href="#2-Redis数据类型" class="headerlink" title="2. Redis数据类型"></a>2. Redis数据类型</h2><h3 id="2-1-五种常用数据类型介绍"><a href="#2-1-五种常用数据类型介绍" class="headerlink" title="2.1 五种常用数据类型介绍"></a>2.1 五种常用数据类型介绍</h3><p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型:</p><ul><li>字符串 string</li><li>哈希 hash</li><li>列表 list</li><li>集合 set</li><li>有序集合 sorted set &#x2F; zset</li></ul><h3 id="2-2-各种数据类型特点"><a href="#2-2-各种数据类型特点" class="headerlink" title="2.2 各种数据类型特点"></a>2.2 各种数据类型特点</h3><p><img src="/img/blogs/java/cangqiongtakeout/5.2.1.png"></p><p><strong>解释说明：</strong></p><ul><li>字符串(string)：普通字符串，Redis中最简单的数据类型</li><li>哈希(hash)：也叫散列，类似于Java中的HashMap结构</li><li>列表(list)：按照插入顺序排序，可以有重复元素，类似于Java中的LinkedList</li><li>集合(set)：无序集合，没有重复元素，类似于Java中的HashSet</li><li>有序集合(sorted set&#x2F;zset)：集合中每个元素关联一个分数(score)，根据分数升序排序，没有重复元素</li></ul><h2 id="3-Redis常用命令"><a href="#3-Redis常用命令" class="headerlink" title="3. Redis常用命令"></a>3. Redis常用命令</h2><h3 id="3-1-字符串操作命令"><a href="#3-1-字符串操作命令" class="headerlink" title="3.1 字符串操作命令"></a>3.1 字符串操作命令</h3><p>Redis 中字符串类型常用命令：</p><ul><li><strong>SET</strong> key value          设置指定key的值</li><li><strong>GET</strong> key                                        获取指定key的值</li><li><strong>SETEX</strong> key seconds value         设置指定key的值，并将 key 的过期时间设为 seconds 秒</li><li><strong>SETNX</strong> key value                        只有在 key    不存在时设置 key 的值</li></ul><h3 id="3-2-哈希操作命令"><a href="#3-2-哈希操作命令" class="headerlink" title="3.2 哈希操作命令"></a>3.2 哈希操作命令</h3><p>Redis hash 是一个string类型的 field 和 value 的映射表，hash特别适合用于存储对象，常用命令：</p><ul><li><strong>HSET</strong> key field value             将哈希表 key 中的字段 field 的值设为 value</li><li><strong>HGET</strong> key field                       获取存储在哈希表中指定字段的值</li><li><strong>HDEL</strong> key field                       删除存储在哈希表中的指定字段</li><li><strong>HKEYS</strong> key                              获取哈希表中所有字段</li><li><strong>HVALS</strong> key                              获取哈希表中所有值</li></ul><p><img src="/img/blogs/java/cangqiongtakeout/5.3.1.png"></p><h3 id="3-3-列表操作命令"><a href="#3-3-列表操作命令" class="headerlink" title="3.3 列表操作命令"></a>3.3 列表操作命令</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序，常用命令：</p><ul><li><strong>LPUSH</strong> key value1 [value2]         将一个或多个值插入到列表头部</li><li><strong>LRANGE</strong> key start stop                获取列表指定范围内的元素</li><li><strong>RPOP</strong> key                                       移除并获取列表最后一个元素</li><li><strong>LLEN</strong> key                                        获取列表长度</li><li><strong>BRPOP</strong> key1 [key2 ] timeout       移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超    时或发现可弹出元素为止</li></ul><p><img src="/img/blogs/java/cangqiongtakeout/5.3.2.png"></p><h3 id="3-4-集合操作命令"><a href="#3-4-集合操作命令" class="headerlink" title="3.4 集合操作命令"></a>3.4 集合操作命令</h3><p>Redis set 是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令：</p><ul><li><strong>SADD</strong> key member1 [member2]            向集合添加一个或多个成员</li><li><strong>SMEMBERS</strong> key                                         返回集合中的所有成员</li><li><strong>SCARD</strong> key                                                  获取集合的成员数</li><li><strong>SINTER</strong> key1 [key2]                                   返回给定所有集合的交集</li><li><strong>SUNION</strong> key1 [key2]                                 返回所有给定集合的并集</li><li><strong>SREM</strong> key member1 [member2]            移除集合中一个或多个成员</li></ul><p><img src="/img/blogs/java/cangqiongtakeout/5.3.3.png"></p><h3 id="3-5-有序集合操作命令"><a href="#3-5-有序集合操作命令" class="headerlink" title="3.5 有序集合操作命令"></a>3.5 有序集合操作命令</h3><p>Redis有序集合是string类型元素的集合，且不允许有重复成员。每个元素都会关联一个double类型的分数。常用命令：</p><p>常用命令：</p><ul><li><strong>ZADD</strong> key score1 member1 [score2 member2]     向有序集合添加一个或多个成员</li><li><strong>ZRANGE</strong> key start stop [WITHSCORES]                     通过索引区间返回有序集合中指定区间内的成员</li><li><strong>ZINCRBY</strong> key increment member                              有序集合中对指定成员的分数加上增量 increment</li><li><strong>ZREM</strong> key member [member …]                                移除有序集合中的一个或多个成员</li></ul><p><img src="/img/blogs/java/cangqiongtakeout/5.3.4.png"></p><h3 id="3-6-通用命令"><a href="#3-6-通用命令" class="headerlink" title="3.6 通用命令"></a>3.6 通用命令</h3><p>Redis的通用命令是不分数据类型的，都可以使用的命令：</p><ul><li>KEYS pattern 查找所有符合给定模式( pattern)的 key </li><li>EXISTS key 检查给定 key 是否存在</li><li>TYPE key 返回 key 所储存的值的类型</li><li>DEL key 该命令用于在 key 存在是删除 key</li></ul><h2 id="4-在java中操作Redis"><a href="#4-在java中操作Redis" class="headerlink" title="4. 在java中操作Redis"></a>4. 在java中操作Redis</h2><h3 id="4-1-Spring-Data-Redis"><a href="#4-1-Spring-Data-Redis" class="headerlink" title="4.1 Spring Data Redis"></a>4.1 Spring Data Redis</h3><p>Spring 对 Redis 客户端进行了整合，提供了 Spring Data Redis，我们重点学习<strong>Spring Data Redis</strong>。</p><p>Spring Data Redis中提供了一个高度封装的类：<strong>RedisTemplate</strong>，对相关api进行了归类封装,将同一类型操作封装为operation接口，具体分类如下：</p><ul><li>ValueOperations：string数据操作</li><li>SetOperations：set类型数据操作</li><li>ZSetOperations：zset类型数据操作</li><li>HashOperations：hash类型的数据操作</li><li>ListOperations：list类型的数据操作</li></ul><h3 id="4-2-通过RedisTemplate对象操作Redis"><a href="#4-2-通过RedisTemplate对象操作Redis" class="headerlink" title="4.2 通过RedisTemplate对象操作Redis"></a>4.2 通过RedisTemplate对象操作Redis</h3><p>在test下新建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.test;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.*;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringDataRedisTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedisTemplate</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(redisTemplate);<br>        <span class="hljs-comment">//string数据操作</span><br>        <span class="hljs-type">ValueOperations</span> <span class="hljs-variable">valueOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue();<br>        <span class="hljs-comment">//hash类型的数据操作</span><br>        <span class="hljs-type">HashOperations</span> <span class="hljs-variable">hashOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash();<br>        <span class="hljs-comment">//list类型的数据操作</span><br>        <span class="hljs-type">ListOperations</span> <span class="hljs-variable">listOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForList();<br>        <span class="hljs-comment">//set类型数据操作</span><br>        <span class="hljs-type">SetOperations</span> <span class="hljs-variable">setOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet();<br>        <span class="hljs-comment">//zset类型数据操作</span><br>        <span class="hljs-type">ZSetOperations</span> <span class="hljs-variable">zSetOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForZSet();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-操作常见类型数据"><a href="#4-3-操作常见类型数据" class="headerlink" title="4.3 操作常见类型数据"></a>4.3 操作常见类型数据</h3><p><strong>1). 操作字符串类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作字符串类型的数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// set get setex setnx</span><br>    redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;小明&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">city</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>    System.out.println(city);<br>    redisTemplate.opsForValue().set(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-string">&quot;1234&quot;</span>,<span class="hljs-number">3</span>, TimeUnit.MINUTES);<br>    redisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>    redisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2). 操作哈希类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作哈希类型的数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//hset hget hdel hkeys hvals</span><br>    <span class="hljs-type">HashOperations</span> <span class="hljs-variable">hashOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash();<br><br>    hashOperations.put(<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;tom&quot;</span>);<br>    hashOperations.put(<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;20&quot;</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) hashOperations.get(<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>);<br>    System.out.println(name);<br><br>    <span class="hljs-type">Set</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> hashOperations.keys(<span class="hljs-string">&quot;100&quot;</span>);<br>    System.out.println(keys);<br><br>    <span class="hljs-type">List</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> hashOperations.values(<span class="hljs-string">&quot;100&quot;</span>);<br>    System.out.println(values);<br><br>    hashOperations.delete(<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3). 操作列表类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作列表类型的数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//lpush lrange rpop llen</span><br>    <span class="hljs-type">ListOperations</span> <span class="hljs-variable">listOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForList();<br><br>    listOperations.leftPushAll(<span class="hljs-string">&quot;mylist&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>);<br>    listOperations.leftPush(<span class="hljs-string">&quot;mylist&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>);<br><br>    <span class="hljs-type">List</span> <span class="hljs-variable">mylist</span> <span class="hljs-operator">=</span> listOperations.range(<span class="hljs-string">&quot;mylist&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    System.out.println(mylist);<br><br>    listOperations.rightPop(<span class="hljs-string">&quot;mylist&quot;</span>);<br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> listOperations.size(<span class="hljs-string">&quot;mylist&quot;</span>);<br>    System.out.println(size);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4). 操作集合类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作集合类型的数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSet</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//sadd smembers scard sinter sunion srem</span><br>    <span class="hljs-type">SetOperations</span> <span class="hljs-variable">setOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet();<br><br>    setOperations.add(<span class="hljs-string">&quot;set1&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>);<br>    setOperations.add(<span class="hljs-string">&quot;set2&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>);<br><br>    <span class="hljs-type">Set</span> <span class="hljs-variable">members</span> <span class="hljs-operator">=</span> setOperations.members(<span class="hljs-string">&quot;set1&quot;</span>);<br>    System.out.println(members);<br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> setOperations.size(<span class="hljs-string">&quot;set1&quot;</span>);<br>    System.out.println(size);<br><br>    <span class="hljs-type">Set</span> <span class="hljs-variable">intersect</span> <span class="hljs-operator">=</span> setOperations.intersect(<span class="hljs-string">&quot;set1&quot;</span>, <span class="hljs-string">&quot;set2&quot;</span>);<br>    System.out.println(intersect);<br><br>    <span class="hljs-type">Set</span> <span class="hljs-variable">union</span> <span class="hljs-operator">=</span> setOperations.union(<span class="hljs-string">&quot;set1&quot;</span>, <span class="hljs-string">&quot;set2&quot;</span>);<br>    System.out.println(union);<br><br>    setOperations.remove(<span class="hljs-string">&quot;set1&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5). 操作有序集合类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作有序集合类型的数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testZset</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//zadd zrange zincrby zrem</span><br>    <span class="hljs-type">ZSetOperations</span> <span class="hljs-variable">zSetOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForZSet();<br><br>    zSetOperations.add(<span class="hljs-string">&quot;zset1&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">10</span>);<br>    zSetOperations.add(<span class="hljs-string">&quot;zset1&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">12</span>);<br>    zSetOperations.add(<span class="hljs-string">&quot;zset1&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">9</span>);<br><br>    <span class="hljs-type">Set</span> <span class="hljs-variable">zset1</span> <span class="hljs-operator">=</span> zSetOperations.range(<span class="hljs-string">&quot;zset1&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    System.out.println(zset1);<br><br>    zSetOperations.incrementScore(<span class="hljs-string">&quot;zset1&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">10</span>);<br><br>    zSetOperations.remove(<span class="hljs-string">&quot;zset1&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6). 通用命令操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通用命令操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCommon</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//keys exists type del</span><br>    <span class="hljs-type">Set</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> redisTemplate.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>    System.out.println(keys);<br><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(<span class="hljs-string">&quot;name&quot;</span>);<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">set1</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(<span class="hljs-string">&quot;set1&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (Object key : keys) &#123;<br>        <span class="hljs-type">DataType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> redisTemplate.type(key);<br>        System.out.println(type.name());<br>    &#125;<br><br>    redisTemplate.delete(<span class="hljs-string">&quot;mylist&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六-店铺营业状态"><a href="#六-店铺营业状态" class="headerlink" title="六. 店铺营业状态"></a>六. 店铺营业状态</h1><p>营业状态分为<strong>营业中</strong>和<strong>打烊中</strong></p><h2 id="1-设置营业状态"><a href="#1-设置营业状态" class="headerlink" title="1. 设置营业状态"></a>1. 设置营业状态</h2><p>在sky-server模块中，创建ShopController.java</p><p><strong>根据接口定义创建ShopController的setStatus设置营业状态方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PutMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController(&quot;adminShopController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/shop&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;店铺相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopController</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SHOP_STATUS&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置店铺的营业状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PutMapping(&quot;/&#123;status&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;设置店铺的营业状态&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">setStatus</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer status)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;设置店铺的营业状态为：&#123;&#125;&quot;</span>,status == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;营业中&quot;</span> : <span class="hljs-string">&quot;打烊中&quot;</span>);<br>        redisTemplate.opsForValue().set(KEY,status);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-管理端查询营业状态"><a href="#2-管理端查询营业状态" class="headerlink" title="2. 管理端查询营业状态"></a>2. 管理端查询营业状态</h2><p><strong>根据接口定义创建ShopController的getStatus查询营业状态方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 获取店铺的营业状态</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/status&quot;)</span><br>   <span class="hljs-meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span><br>   <span class="hljs-keyword">public</span> Result&lt;Integer&gt; <span class="hljs-title function_">getStatus</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);<br>       log.info(<span class="hljs-string">&quot;获取到店铺的营业状态为：&#123;&#125;&quot;</span>,status == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;营业中&quot;</span> : <span class="hljs-string">&quot;打烊中&quot;</span>);<br>       <span class="hljs-keyword">return</span> Result.success(status);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="3-用户端查询营业状态"><a href="#3-用户端查询营业状态" class="headerlink" title="3. 用户端查询营业状态"></a>3. 用户端查询营业状态</h2><p>创建com.sky.controller.user包，在该包下创建ShopController.java</p><p><strong>根据接口定义创建ShopController的getStatus查询营业状态方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@RestController(&quot;userShopController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/shop&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;店铺相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopController</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SHOP_STATUS&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取店铺的营业状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/status&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;Integer&gt; <span class="hljs-title function_">getStatus</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);<br>        log.info(<span class="hljs-string">&quot;获取到店铺的营业状态为：&#123;&#125;&quot;</span>,status == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;营业中&quot;</span> : <span class="hljs-string">&quot;打烊中&quot;</span>);<br>        <span class="hljs-keyword">return</span> Result.success(status);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="七-HttpClient"><a href="#七-HttpClient" class="headerlink" title="七. HttpClient"></a>七. HttpClient</h1><p>HttpClient 是Apache Jakarta Common 下的子项目，可以用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。</p><p><strong>HttpClient作用：</strong></p><ul><li>发送HTTP请求</li><li>接收响应数据</li></ul><p><strong>HttpClient的核心API：</strong></p><ul><li>HttpClient：Http客户端对象类型，使用该类型对象可发起Http请求。</li><li>HttpClients：可认为是构建器，可创建HttpClient对象。</li><li>CloseableHttpClient：实现类，实现了HttpClient接口。</li><li>HttpGet：Get方式请求类型。</li><li>HttpPost：Post方式请求类型。</li></ul><p><strong>HttpClient发送请求步骤：</strong></p><ul><li>创建HttpClient对象</li><li>创建Http请求对象</li><li>调用HttpClient的execute方法发送请求</li></ul><h1 id="八-微信登录"><a href="#八-微信登录" class="headerlink" title="八. 微信登录"></a>八. 微信登录</h1><h2 id="1-定义相关配置"><a href="#1-定义相关配置" class="headerlink" title="1. 定义相关配置"></a>1. 定义相关配置</h2><h3 id="1-1-配置微信登录所需配置项"><a href="#1-1-配置微信登录所需配置项" class="headerlink" title="1.1 配置微信登录所需配置项"></a>1.1 配置微信登录所需配置项</h3><p>application-dev.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">wechat:</span><br>    <span class="hljs-attr">appid:</span> <span class="hljs-string">wxffb3637a228223b8</span><br>    <span class="hljs-attr">secret:</span> <span class="hljs-string">84311df9199ecacdf4f12d27b6b9522d</span><br></code></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">wechat:</span><br>    <span class="hljs-attr">appid:</span> <span class="hljs-string">$&#123;sky.wechat.appid&#125;</span><br>    <span class="hljs-attr">secret:</span> <span class="hljs-string">$&#123;sky.wechat.secret&#125;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-配置为微信用户生成jwt令牌时使用的配置项"><a href="#1-2-配置为微信用户生成jwt令牌时使用的配置项" class="headerlink" title="1.2 配置为微信用户生成jwt令牌时使用的配置项"></a>1.2 配置为微信用户生成jwt令牌时使用的配置项</h3><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">jwt:</span><br>    <span class="hljs-comment"># 设置jwt签名加密时使用的秘钥</span><br>    <span class="hljs-attr">admin-secret-key:</span> <span class="hljs-string">itcast</span><br>    <span class="hljs-comment"># 设置jwt过期时间</span><br>    <span class="hljs-attr">admin-ttl:</span> <span class="hljs-number">7200000</span><br>    <span class="hljs-comment"># 设置前端传递过来的令牌名称</span><br>    <span class="hljs-attr">admin-token-name:</span> <span class="hljs-string">token</span><br>    <span class="hljs-attr">user-secret-key:</span> <span class="hljs-string">itheima</span><br>    <span class="hljs-attr">user-ttl:</span> <span class="hljs-number">7200000</span><br>    <span class="hljs-attr">user-token-name:</span> <span class="hljs-string">authentication</span><br></code></pre></td></tr></table></figure><h2 id="2-DTO设计"><a href="#2-DTO设计" class="headerlink" title="2. DTO设计"></a>2. DTO设计</h2><p><strong>根据传入参数设计DTO类：</strong></p><img src="assets/image-20221205183625049.png" alt="image-20221205183625049" style="zoom:50%;" /> <p>在sky-pojo模块，UserLoginDTO.java已定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.dto;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * C端用户登录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String code;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-VO设计"><a href="#3-VO设计" class="headerlink" title="3. VO设计"></a>3. VO设计</h2><p><strong>根据返回数据设计VO类：</strong></p><img src="assets/image-20221205183923272.png" alt="image-20221205183923272" style="zoom:50%;" /> <p>在sky-pojo模块，UserLoginVO.java已定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.vo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Builder;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String openid;<br>    <span class="hljs-keyword">private</span> String token;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-Controller层"><a href="#4-Controller层" class="headerlink" title="4. Controller层"></a>4. Controller层</h2><p><strong>根据接口定义创建UserController的login方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-keyword">import</span> com.sky.constant.JwtClaimsConstant;<br><span class="hljs-keyword">import</span> com.sky.dto.UserLoginDTO;<br><span class="hljs-keyword">import</span> com.sky.entity.User;<br><span class="hljs-keyword">import</span> com.sky.properties.JwtProperties;<br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> com.sky.service.UserService;<br><span class="hljs-keyword">import</span> com.sky.utils.JwtUtil;<br><span class="hljs-keyword">import</span> com.sky.vo.UserLoginVO;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/user&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;C端用户相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtProperties jwtProperties;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 微信登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userLoginDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;微信登录&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;UserLoginVO&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserLoginDTO userLoginDTO)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;微信用户登录：&#123;&#125;&quot;</span>,userLoginDTO.getCode());<br><br>        <span class="hljs-comment">//微信登录</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.wxLogin(userLoginDTO);<span class="hljs-comment">//后绪步骤实现</span><br><br>        <span class="hljs-comment">//为微信用户生成jwt令牌</span><br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        claims.put(JwtClaimsConstant.USER_ID,user.getId());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtil.createJWT(jwtProperties.getUserSecretKey(), jwtProperties.getUserTtl(), claims);<br><br>        <span class="hljs-type">UserLoginVO</span> <span class="hljs-variable">userLoginVO</span> <span class="hljs-operator">=</span> UserLoginVO.builder()<br>                .id(user.getId())<br>                .openid(user.getOpenid())<br>                .token(token)<br>                .build();<br>        <span class="hljs-keyword">return</span> Result.success(userLoginVO);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-Service层"><a href="#5-Service层" class="headerlink" title="5. Service层"></a>5. Service层</h2><h3 id="5-1-Service层接口"><a href="#5-1-Service层接口" class="headerlink" title="5.1 Service层接口"></a>5.1 Service层接口</h3><p><strong>创建UserService接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-keyword">import</span> com.sky.dto.UserLoginDTO;<br><span class="hljs-keyword">import</span> com.sky.entity.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 微信登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userLoginDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    User <span class="hljs-title function_">wxLogin</span><span class="hljs-params">(UserLoginDTO userLoginDTO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-Service层实现类"><a href="#5-2-Service层实现类" class="headerlink" title="5.2 Service层实现类"></a>5.2 Service层实现类</h3><p>**创建UserServiceImpl实现类：**实现获取微信用户的openid和微信登录功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.sky.constant.MessageConstant;<br><span class="hljs-keyword">import</span> com.sky.dto.UserLoginDTO;<br><span class="hljs-keyword">import</span> com.sky.entity.User;<br><span class="hljs-keyword">import</span> com.sky.exception.LoginFailedException;<br><span class="hljs-keyword">import</span> com.sky.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.sky.properties.WeChatProperties;<br><span class="hljs-keyword">import</span> com.sky.service.UserService;<br><span class="hljs-keyword">import</span> com.sky.utils.HttpClientUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-comment">//微信服务接口地址</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">WX_LOGIN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/jscode2session&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WeChatProperties weChatProperties;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 微信登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userLoginDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">wxLogin</span><span class="hljs-params">(UserLoginDTO userLoginDTO)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">openid</span> <span class="hljs-operator">=</span> getOpenid(userLoginDTO.getCode());<br><br>        <span class="hljs-comment">//判断openid是否为空，如果为空表示登录失败，抛出业务异常</span><br>        <span class="hljs-keyword">if</span>(openid == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginFailedException</span>(MessageConstant.LOGIN_FAILED);<br>        &#125;<br><br>        <span class="hljs-comment">//判断当前用户是否为新用户</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getByOpenid(openid);<br><br>        <span class="hljs-comment">//如果是新用户，自动完成注册</span><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            user = User.builder()<br>                    .openid(openid)<br>                    .createTime(LocalDateTime.now())<br>                    .build();<br>            userMapper.insert(user);<span class="hljs-comment">//后绪步骤实现</span><br>        &#125;<br><br>        <span class="hljs-comment">//返回这个用户对象</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调用微信接口服务，获取微信用户的openid</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getOpenid</span><span class="hljs-params">(String code)</span>&#123;<br>        <span class="hljs-comment">//调用微信接口服务，获得当前微信用户的openid</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;appid&quot;</span>,weChatProperties.getAppid());<br>        map.put(<span class="hljs-string">&quot;secret&quot;</span>,weChatProperties.getSecret());<br>        map.put(<span class="hljs-string">&quot;js_code&quot;</span>,code);<br>        map.put(<span class="hljs-string">&quot;grant_type&quot;</span>,<span class="hljs-string">&quot;authorization_code&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> HttpClientUtil.doGet(WX_LOGIN, map);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(json);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">openid</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;openid&quot;</span>);<br>        <span class="hljs-keyword">return</span> openid;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-Mapper层"><a href="#6-Mapper层" class="headerlink" title="6. Mapper层"></a>6. Mapper层</h2><p><strong>创建UserMapper接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-keyword">import</span> com.sky.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据openid查询用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> openid</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select * from user where openid = #&#123;openid&#125;&quot;)</span><br>    User <span class="hljs-title function_">getByOpenid</span><span class="hljs-params">(String openid)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建UserMapper.xml映射文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into user (openid, name, phone, sex, id_number, avatar, create_time)<br>        values (#&#123;openid&#125;, #&#123;name&#125;, #&#123;phone&#125;, #&#123;sex&#125;, #&#123;idNumber&#125;, #&#123;avatar&#125;, #&#123;createTime&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-编写拦截器"><a href="#7-编写拦截器" class="headerlink" title="7. 编写拦截器"></a>7. 编写拦截器</h2><p>**编写拦截器JwtTokenUserInterceptor：**统一拦截用户端发送的请求并进行jwt校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.interceptor;<br><br><span class="hljs-keyword">import</span> com.sky.constant.JwtClaimsConstant;<br><span class="hljs-keyword">import</span> com.sky.context.BaseContext;<br><span class="hljs-keyword">import</span> com.sky.properties.JwtProperties;<br><span class="hljs-keyword">import</span> com.sky.utils.JwtUtil;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * jwt令牌校验的拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenUserInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtProperties jwtProperties;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验jwt</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//判断当前拦截到的是Controller的方法还是其他资源</span><br>        <span class="hljs-keyword">if</span> (!(handler <span class="hljs-keyword">instanceof</span> HandlerMethod)) &#123;<br>            <span class="hljs-comment">//当前拦截到的不是动态方法，直接放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//1、从请求头中获取令牌</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(jwtProperties.getUserTokenName());<br><br>        <span class="hljs-comment">//2、校验令牌</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            log.info(<span class="hljs-string">&quot;jwt校验:&#123;&#125;&quot;</span>, token);<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> JwtUtil.parseJWT(jwtProperties.getUserSecretKey(), token);<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.USER_ID).toString());<br>            log.info(<span class="hljs-string">&quot;当前用户的id：&quot;</span>, userId);<br>            BaseContext.setCurrentId(userId);<br>            <span class="hljs-comment">//3、通过，放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-comment">//4、不通过，响应401状态码</span><br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在WebMvcConfiguration配置类中注册拦截器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JwtTokenUserInterceptor jwtTokenUserInterceptor;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注册自定义拦截器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;开始注册自定义拦截器...&quot;</span>);<br>    <span class="hljs-comment">//.........</span><br><br>    registry.addInterceptor(jwtTokenUserInterceptor)<br>            .addPathPatterns(<span class="hljs-string">&quot;/user/**&quot;</span>)<br>            .excludePathPatterns(<span class="hljs-string">&quot;/user/user/login&quot;</span>)<br>            .excludePathPatterns(<span class="hljs-string">&quot;/user/shop/status&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="九-商品浏览功能"><a href="#九-商品浏览功能" class="headerlink" title="九. 商品浏览功能"></a>九. 商品浏览功能</h1><p>这里导入相关代码</p><h2 id="1-Mapper层"><a href="#1-Mapper层" class="headerlink" title="1. Mapper层"></a>1. Mapper层</h2><p><strong>在SetmealMapper.java中添加list和getDishItemBySetmealId两个方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 动态条件查询套餐</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> setmeal</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   List&lt;Setmeal&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Setmeal setmeal)</span>;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据套餐id查询菜品选项</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> setmealId</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Select(&quot;select sd.name, sd.copies, d.image, d.description &quot; +</span><br><span class="hljs-meta">           &quot;from setmeal_dish sd left join dish d on sd.dish_id = d.id &quot; +</span><br><span class="hljs-meta">           &quot;where sd.setmeal_id = #&#123;setmealId&#125;&quot;)</span><br>   List&lt;DishItemVO&gt; <span class="hljs-title function_">getDishItemBySetmealId</span><span class="hljs-params">(Long setmealId)</span>;<br></code></pre></td></tr></table></figure><p><strong>创建SetmealMapper.xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.SetmealMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Setmeal&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Setmeal&quot;</span>&gt;</span><br>        select * from setmeal<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>                and category_id = #&#123;categoryId&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>                and status = #&#123;status&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-Service层"><a href="#2-Service层" class="headerlink" title="2. Service层"></a>2. Service层</h2><p><strong>创建SetmealService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-keyword">import</span> com.sky.dto.SetmealDTO;<br><span class="hljs-keyword">import</span> com.sky.dto.SetmealPageQueryDTO;<br><span class="hljs-keyword">import</span> com.sky.entity.Setmeal;<br><span class="hljs-keyword">import</span> com.sky.result.PageResult;<br><span class="hljs-keyword">import</span> com.sky.vo.DishItemVO;<br><span class="hljs-keyword">import</span> com.sky.vo.SetmealVO;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SetmealService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 条件查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmeal</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;Setmeal&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Setmeal setmeal)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询菜品选项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;DishItemVO&gt; <span class="hljs-title function_">getDishItemById</span><span class="hljs-params">(Long id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建SetmealServiceImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-keyword">import</span> com.sky.entity.Setmeal;<br><span class="hljs-keyword">import</span> com.sky.mapper.DishMapper;<br><span class="hljs-keyword">import</span> com.sky.mapper.SetmealDishMapper;<br><span class="hljs-keyword">import</span> com.sky.mapper.SetmealMapper;<br><span class="hljs-keyword">import</span> com.sky.service.SetmealService;<br><span class="hljs-keyword">import</span> com.sky.vo.DishItemVO;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 套餐业务实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetmealServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SetmealService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealMapper setmealMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealDishMapper setmealDishMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishMapper dishMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 条件查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> setmeal</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;Setmeal&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Setmeal setmeal)</span> &#123;<br>        List&lt;Setmeal&gt; list = setmealMapper.list(setmeal);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询菜品选项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;DishItemVO&gt; <span class="hljs-title function_">getDishItemById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> setmealMapper.getDishItemBySetmealId(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在DishService.java中添加listWithFlavor方法定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 条件查询菜品和口味</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dish</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   List&lt;DishVO&gt; <span class="hljs-title function_">listWithFlavor</span><span class="hljs-params">(Dish dish)</span>;<br></code></pre></td></tr></table></figure><p><strong>在DishServiceImpl.java中实现listWithFlavor方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 条件查询菜品和口味</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dish</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> List&lt;DishVO&gt; <span class="hljs-title function_">listWithFlavor</span><span class="hljs-params">(Dish dish)</span> &#123;<br>       List&lt;Dish&gt; dishList = dishMapper.list(dish);<br><br>       List&lt;DishVO&gt; dishVOList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>       <span class="hljs-keyword">for</span> (Dish d : dishList) &#123;<br>           <span class="hljs-type">DishVO</span> <span class="hljs-variable">dishVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DishVO</span>();<br>           BeanUtils.copyProperties(d,dishVO);<br><br>           <span class="hljs-comment">//根据菜品id查询对应的口味</span><br>           List&lt;DishFlavor&gt; flavors = dishFlavorMapper.getByDishId(d.getId());<br><br>           dishVO.setFlavors(flavors);<br>           dishVOList.add(dishVO);<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> dishVOList;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="3-Controller层"><a href="#3-Controller层" class="headerlink" title="3. Controller层"></a>3. Controller层</h2><p><strong>创建DishController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-keyword">import</span> com.sky.constant.StatusConstant;<br><span class="hljs-keyword">import</span> com.sky.entity.Dish;<br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> com.sky.service.DishService;<br><span class="hljs-keyword">import</span> com.sky.vo.DishVO;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController(&quot;userDishController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/dish&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;C端-菜品浏览接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DishController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishService dishService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据分类id查询菜品</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;DishVO&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span> &#123;<br>        <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>        dish.setCategoryId(categoryId);<br>        dish.setStatus(StatusConstant.ENABLE);<span class="hljs-comment">//查询起售中的菜品</span><br><br>        List&lt;DishVO&gt; list = dishService.listWithFlavor(dish);<br><br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建CategoryController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-keyword">import</span> com.sky.entity.Category;<br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> com.sky.service.CategoryService;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController(&quot;userCategoryController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/category&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;C端-分类接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CategoryController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CategoryService categoryService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;查询分类&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;Category&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Integer type)</span> &#123;<br>        List&lt;Category&gt; list = categoryService.list(type);<br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建SetmealController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-keyword">import</span> com.sky.constant.StatusConstant;<br><span class="hljs-keyword">import</span> com.sky.entity.Setmeal;<br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> com.sky.service.SetmealService;<br><span class="hljs-keyword">import</span> com.sky.vo.DishItemVO;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController(&quot;userSetmealController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/setmeal&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;C端-套餐浏览接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetmealController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealService setmealService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 条件查询</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据分类id查询套餐&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;Setmeal&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span> &#123;<br>        <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Setmeal</span>();<br>        setmeal.setCategoryId(categoryId);<br>        setmeal.setStatus(StatusConstant.ENABLE);<br><br>        List&lt;Setmeal&gt; list = setmealService.list(setmeal);<br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据套餐id查询包含的菜品列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/dish/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据套餐id查询包含的菜品列表&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;DishItemVO&gt;&gt; <span class="hljs-title function_">dishList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        List&lt;DishItemVO&gt; list = setmealService.getDishItemById(id);<br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十-缓存菜品和套餐"><a href="#十-缓存菜品和套餐" class="headerlink" title="十. 缓存菜品和套餐"></a>十. 缓存菜品和套餐</h1><h2 id="1-缓存菜品"><a href="#1-缓存菜品" class="headerlink" title="1. 缓存菜品"></a>1. 缓存菜品</h2><h3 id="1-1-问题分析"><a href="#1-1-问题分析" class="headerlink" title="1.1 问题分析"></a>1.1 问题分析</h3><p>用户端小程序展示的菜品数据都是通过查询数据库获得，如果用户端访问量比较大，数据库访问压力随之增大。通过<strong>Redis来缓存菜品数据，减少数据库查询操作</strong>。</p><ul><li>每个分类下的菜品保存一份缓存数据</li><li>数据库中菜品数据有变更时清理缓存数据</li></ul><p>为了保证数据库和Redis中的<strong>数据保持一致</strong>，修改<strong>管理端接口 DishController</strong> 的相关方法，加入清理缓存逻辑。</p><p>需要改造的方法：</p><ul><li>新增菜品</li><li>修改菜品</li><li>批量删除菜品</li><li>起售、停售菜品</li></ul><h3 id="1-2-用户端接口DishController"><a href="#1-2-用户端接口DishController" class="headerlink" title="1.2 用户端接口DishController"></a>1.2 用户端接口DishController</h3><p><strong>修改用户端接口 DishController 的 list 方法，加入缓存处理逻辑：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据分类id查询菜品</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>   <span class="hljs-meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span><br>   <span class="hljs-keyword">public</span> Result&lt;List&lt;DishVO&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span> &#123;<br><br>       <span class="hljs-comment">//构造redis中的key，规则：dish_分类id</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dish_&quot;</span> + categoryId;<br><br>       <span class="hljs-comment">//查询redis中是否存在菜品数据</span><br>       List&lt;DishVO&gt; list = (List&lt;DishVO&gt;) redisTemplate.opsForValue().get(key);<br>       <span class="hljs-keyword">if</span>(list != <span class="hljs-literal">null</span> &amp;&amp; list.size() &gt; <span class="hljs-number">0</span>)&#123;<br>           <span class="hljs-comment">//如果存在，直接返回，无须查询数据库</span><br>           <span class="hljs-keyword">return</span> Result.success(list);<br>       &#125;<br><span class="hljs-comment">////////////////////////////////////////////////////////</span><br>       <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>       dish.setCategoryId(categoryId);<br>       dish.setStatus(StatusConstant.ENABLE);<span class="hljs-comment">//查询起售中的菜品</span><br><br>       <span class="hljs-comment">//如果不存在，查询数据库，将查询到的数据放入redis中</span><br>       list = dishService.listWithFlavor(dish);<br>       <span class="hljs-comment">////////////////////////////////////////////////////////</span><br>       redisTemplate.opsForValue().set(key, list);<br><br>       <span class="hljs-keyword">return</span> Result.success(list);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-管理端接口DishController"><a href="#1-3-管理端接口DishController" class="headerlink" title="1.3 管理端接口DishController"></a>1.3 管理端接口DishController</h3><h4 id="1-3-1-抽取清理缓存的方法"><a href="#1-3-1-抽取清理缓存的方法" class="headerlink" title="1.3.1 抽取清理缓存的方法"></a>1.3.1 抽取清理缓存的方法</h4><p>在管理端DishController中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 清理缓存数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> pattern</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanCache</span><span class="hljs-params">(String pattern)</span>&#123;<br>       <span class="hljs-type">Set</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> redisTemplate.keys(pattern);<br>       redisTemplate.delete(keys);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-2-新增菜品优化"><a href="#1-3-2-新增菜品优化" class="headerlink" title="1.3.2 新增菜品优化"></a>1.3.2 新增菜品优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 新增菜品</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dishDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping</span><br>   <span class="hljs-meta">@ApiOperation(&quot;新增菜品&quot;)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DishDTO dishDTO)</span> &#123;<br>       log.info(<span class="hljs-string">&quot;新增菜品：&#123;&#125;&quot;</span>, dishDTO);<br>       dishService.saveWithFlavor(dishDTO);<br><br>       <span class="hljs-comment">//清理缓存数据</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dish_&quot;</span> + dishDTO.getCategoryId();<br>       cleanCache(key);<br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-3-菜品批量删除优化"><a href="#1-3-3-菜品批量删除优化" class="headerlink" title="1.3.3 菜品批量删除优化"></a>1.3.3 菜品批量删除优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜品批量删除</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@DeleteMapping</span><br>   <span class="hljs-meta">@ApiOperation(&quot;菜品批量删除&quot;)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;<br>       log.info(<span class="hljs-string">&quot;菜品批量删除：&#123;&#125;&quot;</span>, ids);<br>       dishService.deleteBatch(ids);<br><br>       <span class="hljs-comment">//将所有的菜品缓存数据清理掉，所有以dish_开头的key</span><br>       cleanCache(<span class="hljs-string">&quot;dish_*&quot;</span>);<br><br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-4-修改菜品优化"><a href="#1-3-4-修改菜品优化" class="headerlink" title="1.3.4 修改菜品优化"></a>1.3.4 修改菜品优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 修改菜品</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dishDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PutMapping</span><br>   <span class="hljs-meta">@ApiOperation(&quot;修改菜品&quot;)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DishDTO dishDTO)</span> &#123;<br>       log.info(<span class="hljs-string">&quot;修改菜品：&#123;&#125;&quot;</span>, dishDTO);<br>       dishService.updateWithFlavor(dishDTO);<br><br>       <span class="hljs-comment">//将所有的菜品缓存数据清理掉，所有以dish_开头的key</span><br>       cleanCache(<span class="hljs-string">&quot;dish_*&quot;</span>);<br><br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-5-菜品起售停售优化"><a href="#1-3-5-菜品起售停售优化" class="headerlink" title="1.3.5 菜品起售停售优化"></a>1.3.5 菜品起售停售优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 菜品起售停售</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span><br>   <span class="hljs-meta">@ApiOperation(&quot;菜品起售停售&quot;)</span><br>   <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer status, Long id)</span> &#123;<br>       dishService.startOrStop(status, id);<br><br>       <span class="hljs-comment">//将所有的菜品缓存数据清理掉，所有以dish_开头的key</span><br>       cleanCache(<span class="hljs-string">&quot;dish_*&quot;</span>);<br><br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="2-缓存套餐"><a href="#2-缓存套餐" class="headerlink" title="2. 缓存套餐"></a>2. 缓存套餐</h2><h3 id="2-1-Spring-Cache"><a href="#2-1-Spring-Cache" class="headerlink" title="2.1 Spring Cache"></a>2.1 Spring Cache</h3><p>Spring Cache 是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能。</p><h4 id="2-1-1-常用注解"><a href="#2-1-1-常用注解" class="headerlink" title="2.1.1 常用注解"></a>2.1.1 常用注解</h4><p>在SpringCache中提供了很多缓存操作的注解，常见的是以下的几个：</p><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@EnableCaching</td><td>开启缓存注解功能，通常加在启动类上</td></tr><tr><td>@Cacheable</td><td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td>@CachePut</td><td>将方法的返回值放到缓存中</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table><h4 id="2-1-2-EnableCaching"><a href="#2-1-2-EnableCaching" class="headerlink" title="2.1.2 @EnableCaching"></a>2.1.2 @EnableCaching</h4><p><strong>启动类上加@EnableCaching:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.EnableCaching;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCaching</span><span class="hljs-comment">//开启缓存注解功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheDemoApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(CacheDemoApplication.class,args);<br>        log.info(<span class="hljs-string">&quot;项目启动成功...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-3-CachePut注解"><a href="#2-1-3-CachePut注解" class="headerlink" title="2.1.3 @CachePut注解"></a>2.1.3 @CachePut注解</h4><p><strong>@CachePut 说明：</strong> </p><ul><li>​作用: 将方法返回值，放入缓存</li><li>​value: 缓存的名称, 每个缓存名称下面可以有很多key</li><li>​key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</li></ul><p><strong>在save方法上加注解@CachePut</strong></p><p>当前UserController的save方法是用来保存用户信息的，我们希望在该用户信息保存到数据库的同时，也往缓存中缓存一份数据，我们可以在save方法上加上注解 @CachePut，用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* CachePut：将方法返回值放入缓存</span><br><span class="hljs-comment">* value：缓存的名称，每个缓存名称下面可以有多个key</span><br><span class="hljs-comment">* key：缓存的key</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@CachePut(value = &quot;userCache&quot;, key = &quot;#user.id&quot;)</span><span class="hljs-comment">//key的生成：userCache::1</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    userMapper.insert(user);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p>**说明：**key的写法如下</p><p>#user.id : #user指的是方法形参的名称, id指的是user的id属性 , 也就是使用user的id属性作为key ;</p><h4 id="2-1-4-Cacheable注解"><a href="#2-1-4-Cacheable注解" class="headerlink" title="2.1.4 @Cacheable注解"></a>2.1.4 @Cacheable注解</h4><p><strong>@Cacheable 说明:</strong></p><ul><li>​作用: 在方法执行前，spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</li><li>​value: 缓存的名称，每个缓存名称下面可以有多个key</li><li>​key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</li></ul><p> <strong>在getById上加注解@Cacheable</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Cacheable：在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，  *调用方法并将方法返回值放到缓存中</span><br><span class="hljs-comment">* value：缓存的名称，每个缓存名称下面可以有多个key</span><br><span class="hljs-comment">* key：缓存的key</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping</span><br><span class="hljs-meta">@Cacheable(cacheNames = &quot;userCache&quot;,key=&quot;#id&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getById(id);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-5-CacheEvict注解"><a href="#2-1-5-CacheEvict注解" class="headerlink" title="2.1.5 @CacheEvict注解"></a>2.1.5 @CacheEvict注解</h4><p><strong>@CacheEvict 说明：</strong> </p><ul><li>作用: 清理指定缓存</li><li>value: 缓存的名称，每个缓存名称下面可以有多个key</li><li>key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</li></ul><p><strong>在 delete 方法上加注解@CacheEvict</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping</span><br><span class="hljs-meta">@CacheEvict(cacheNames = &quot;userCache&quot;,key = &quot;#id&quot;)</span><span class="hljs-comment">//删除某个key对应的缓存数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>&#123;<br>    userMapper.deleteById(id);<br>&#125;<br><br><span class="hljs-meta">@DeleteMapping(&quot;/delAll&quot;)</span><br><span class="hljs-meta">@CacheEvict(cacheNames = &quot;userCache&quot;,allEntries = true)</span><span class="hljs-comment">//删除userCache下所有的缓存数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAll</span><span class="hljs-params">()</span>&#123;<br>    userMapper.deleteAll();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-实现思路"><a href="#2-2-实现思路" class="headerlink" title="2.2 实现思路"></a>2.2 实现思路</h3><p><strong>实现步骤：</strong></p><p>1). 导入Spring Cache和Redis相关maven坐标</p><p>2). 在启动类上加入@EnableCaching注解，开启缓存注解功能</p><p>3). 在用户端接口SetmealController的 list 方法上加入@Cacheable注解</p><p>4). 在管理端接口SetmealController的 save、delete、update、startOrStop等方法上加入CacheEvict注解</p><h3 id="2-3-代码开发"><a href="#2-3-代码开发" class="headerlink" title="2.3 代码开发"></a>2.3 代码开发</h3><h4 id="2-3-1-EnableCaching"><a href="#2-3-1-EnableCaching" class="headerlink" title="2.3.1 @EnableCaching"></a>2.3.1 @EnableCaching</h4><p><strong>在启动类上加入@EnableCaching注解，开启缓存注解功能</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cache.annotation.EnableCaching;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//开启注解方式的事务管理</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkyApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SkyApplication.class, args);<br>        log.info(<span class="hljs-string">&quot;server started&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-2-用户端接口"><a href="#2-3-2-用户端接口" class="headerlink" title="2.3.2 用户端接口"></a>2.3.2 用户端接口</h4><p><strong>在用户端接口SetmealController的 list 方法上加入@Cacheable注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 条件查询</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>   <span class="hljs-meta">@ApiOperation(&quot;根据分类id查询套餐&quot;)</span><br>   <span class="hljs-meta">@Cacheable(cacheNames = &quot;setmealCache&quot;,key = &quot;#categoryId&quot;)</span> <span class="hljs-comment">//key: setmealCache::100</span><br>   <span class="hljs-keyword">public</span> Result&lt;List&lt;Setmeal&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span> &#123;<br>       <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Setmeal</span>();<br>       setmeal.setCategoryId(categoryId);<br>       setmeal.setStatus(StatusConstant.ENABLE);<br><br>       List&lt;Setmeal&gt; list = setmealService.list(setmeal);<br>       <span class="hljs-keyword">return</span> Result.success(list);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-3-管理端接口"><a href="#2-3-3-管理端接口" class="headerlink" title="2.3.3 管理端接口"></a>2.3.3 管理端接口</h4><p><strong>在管理端接口SetmealController的 save、delete、update、startOrStop等方法上加入CacheEvict注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 新增套餐</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> setmealDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping</span><br>   <span class="hljs-meta">@ApiOperation(&quot;新增套餐&quot;)</span><br>   <span class="hljs-meta">@CacheEvict(cacheNames = &quot;setmealCache&quot;,key = &quot;#setmealDTO.categoryId&quot;)</span><span class="hljs-comment">//key: setmealCache::100</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;<br>       setmealService.saveWithDish(setmealDTO);<br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 批量删除套餐</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@DeleteMapping</span><br>   <span class="hljs-meta">@ApiOperation(&quot;批量删除套餐&quot;)</span><br>   <span class="hljs-meta">@CacheEvict(cacheNames = &quot;setmealCache&quot;,allEntries = true)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;<br>       setmealService.deleteBatch(ids);<br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 修改套餐</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> setmealDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PutMapping</span><br>   <span class="hljs-meta">@ApiOperation(&quot;修改套餐&quot;)</span><br>   <span class="hljs-meta">@CacheEvict(cacheNames = &quot;setmealCache&quot;,allEntries = true)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;<br>       setmealService.update(setmealDTO);<br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 套餐起售停售</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span><br>   <span class="hljs-meta">@ApiOperation(&quot;套餐起售停售&quot;)</span><br>   <span class="hljs-meta">@CacheEvict(cacheNames = &quot;setmealCache&quot;,allEntries = true)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer status, Long id)</span> &#123;<br>       setmealService.startOrStop(status, id);<br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="十一-购物车管理"><a href="#十一-购物车管理" class="headerlink" title="十一. 购物车管理"></a>十一. 购物车管理</h1><h2 id="1-添加购物车"><a href="#1-添加购物车" class="headerlink" title="1. 添加购物车"></a>1. 添加购物车</h2><h3 id="1-1-Controller层-1"><a href="#1-1-Controller层-1" class="headerlink" title="1.1 Controller层"></a>1.1 Controller层</h3><p><strong>根据添加购物车接口创建ShoppingCartController：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><br><span class="hljs-keyword">import</span> com.sky.dto.ShoppingCartDTO;<br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 购物车</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/shoppingCart&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;C端-购物车接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoppingCartController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ShoppingCartService shoppingCartService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加购物车</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shoppingCartDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;添加购物车&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ShoppingCartDTO shoppingCartDTO)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;添加购物车：&#123;&#125;&quot;</span>, shoppingCartDTO);<br>        shoppingCartService.addShoppingCart(shoppingCartDTO);<span class="hljs-comment">//后绪步骤实现</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-Service层-1"><a href="#1-2-Service层-1" class="headerlink" title="1.2 Service层"></a>1.2 Service层</h3><h4 id="1-2-1-Service层接口-1"><a href="#1-2-1-Service层接口-1" class="headerlink" title="1.2.1 Service层接口"></a>1.2.1 Service层接口</h4><p><strong>创建ShoppingCartService接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-keyword">import</span> com.sky.dto.ShoppingCartDTO;<br><span class="hljs-keyword">import</span> com.sky.entity.ShoppingCart;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShoppingCartService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加购物车</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shoppingCartDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addShoppingCart</span><span class="hljs-params">(ShoppingCartDTO shoppingCartDTO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-2-Service层实现类-1"><a href="#1-2-2-Service层实现类-1" class="headerlink" title="1.2.2 Service层实现类"></a>1.2.2 Service层实现类</h4><p><strong>创建ShoppingCartServiceImpl实现类，并实现add方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><br><span class="hljs-keyword">import</span> com.sky.context.BaseContext;<br><span class="hljs-keyword">import</span> com.sky.dto.ShoppingCartDTO;<br><span class="hljs-keyword">import</span> com.sky.entity.Dish;<br><span class="hljs-keyword">import</span> com.sky.entity.Setmeal;<br><span class="hljs-keyword">import</span> com.sky.entity.ShoppingCart;<br><span class="hljs-keyword">import</span> com.sky.mapper.DishMapper;<br><span class="hljs-keyword">import</span> com.sky.mapper.SetmealMapper;<br><span class="hljs-keyword">import</span> com.sky.service.ShoppingCartService;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoppingCartServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ShoppingCartService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ShoppingCartMapper shoppingCartMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishMapper dishMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealMapper setmealMapper;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加购物车</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shoppingCartDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addShoppingCart</span><span class="hljs-params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;<br>        <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">shoppingCart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br>        BeanUtils.copyProperties(shoppingCartDTO, shoppingCart);<br>        <span class="hljs-comment">//只能查询自己的购物车数据</span><br>        shoppingCart.setUserId(BaseContext.getCurrentId());<br><br>        <span class="hljs-comment">//判断当前商品是否在购物车中</span><br>        List&lt;ShoppingCart&gt; shoppingCartList = shoppingCartMapper.list(shoppingCart);<br><br>        <span class="hljs-keyword">if</span> (shoppingCartList != <span class="hljs-literal">null</span> &amp;&amp; shoppingCartList.size() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//如果已经存在，就更新数量，数量加1</span><br>            shoppingCart = shoppingCartList.get(<span class="hljs-number">0</span>);<br>            shoppingCart.setNumber(shoppingCart.getNumber() + <span class="hljs-number">1</span>);<br>            shoppingCartMapper.updateNumberById(shoppingCart);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//如果不存在，插入数据，数量就是1</span><br><br>            <span class="hljs-comment">//判断当前添加到购物车的是菜品还是套餐</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">dishId</span> <span class="hljs-operator">=</span> shoppingCartDTO.getDishId();<br>            <span class="hljs-keyword">if</span> (dishId != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//添加到购物车的是菜品</span><br>                <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> dishMapper.getById(dishId);<br>                shoppingCart.setName(dish.getName());<br>                shoppingCart.setImage(dish.getImage());<br>                shoppingCart.setAmount(dish.getPrice());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//添加到购物车的是套餐</span><br>                <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> setmealMapper.getById(shoppingCartDTO.getSetmealId());<br>                shoppingCart.setName(setmeal.getName());<br>                shoppingCart.setImage(setmeal.getImage());<br>                shoppingCart.setAmount(setmeal.getPrice());<br>            &#125;<br>            shoppingCart.setNumber(<span class="hljs-number">1</span>);<br>            shoppingCart.setCreateTime(LocalDateTime.now());<br>            shoppingCartMapper.insert(shoppingCart);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-Mapper层-1"><a href="#1-3-Mapper层-1" class="headerlink" title="1.3 Mapper层"></a>1.3 Mapper层</h3><p><strong>创建ShoppingCartMapper接口:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-keyword">import</span> com.sky.entity.ShoppingCart;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Delete;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Update;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShoppingCartMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 条件查询</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shoppingCart</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;ShoppingCart&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(ShoppingCart shoppingCart)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新商品数量</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shoppingCart</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Update(&quot;update shopping_cart set number = #&#123;number&#125; where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateNumberById</span><span class="hljs-params">(ShoppingCart shoppingCart)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入购物车数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shoppingCart</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Insert(&quot;insert into shopping_cart (name, user_id, dish_id, setmeal_id, dish_flavor, number, amount, image, create_time) &quot; +</span><br><span class="hljs-meta">            &quot; values (#&#123;name&#125;,#&#123;userId&#125;,#&#123;dishId&#125;,#&#123;setmealId&#125;,#&#123;dishFlavor&#125;,#&#123;number&#125;,#&#123;amount&#125;,#&#123;image&#125;,#&#123;createTime&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(ShoppingCart shoppingCart)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建ShoppingCartMapper.xml：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.ShoppingCartMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;ShoppingCart&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;ShoppingCart&quot;</span>&gt;</span><br>        select * from shopping_cart<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userId != null&quot;</span>&gt;</span><br>                and user_id = #&#123;userId&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;dishId != null&quot;</span>&gt;</span><br>                and dish_id = #&#123;dishId&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;setmealId != null&quot;</span>&gt;</span><br>                and setmeal_id = #&#123;setmealId&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;dishFlavor != null&quot;</span>&gt;</span><br>                and dish_flavor = #&#123;dishFlavor&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        order by create_time desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-查看购物车"><a href="#2-查看购物车" class="headerlink" title="2. 查看购物车"></a>2. 查看购物车</h2><h3 id="2-1-Controller层"><a href="#2-1-Controller层" class="headerlink" title="2.1 Controller层"></a>2.1 Controller层</h3><p><strong>在ShoppingCartController中创建查看购物车的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 查看购物车</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>   <span class="hljs-meta">@ApiOperation(&quot;查看购物车&quot;)</span><br>   <span class="hljs-keyword">public</span> Result&lt;List&lt;ShoppingCart&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> Result.success(shoppingCartService.showShoppingCart());<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-Service层接口"><a href="#2-2-Service层接口" class="headerlink" title="2.2 Service层接口"></a>2.2 Service层接口</h3><p><strong>在ShoppingCartService接口中声明查看购物车的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 查看购物车</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   List&lt;ShoppingCart&gt; <span class="hljs-title function_">showShoppingCart</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h3 id="2-3-Service层实现类"><a href="#2-3-Service层实现类" class="headerlink" title="2.3 Service层实现类"></a>2.3 Service层实现类</h3><p><strong>在ShoppingCartServiceImpl中实现查看购物车的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 查看购物车</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> List&lt;ShoppingCart&gt; <span class="hljs-title function_">showShoppingCart</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> shoppingCartMapper.list(ShoppingCart.<br>                                      builder().<br>                                      userId(BaseContext.getCurrentId()).<br>                                      build());<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="3-清空购物车"><a href="#3-清空购物车" class="headerlink" title="3. 清空购物车"></a>3. 清空购物车</h2><h3 id="3-1-Controller层-2"><a href="#3-1-Controller层-2" class="headerlink" title="3.1 Controller层"></a>3.1 Controller层</h3><p><strong>在ShoppingCartController中创建清空购物车的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 清空购物车商品</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@DeleteMapping(&quot;/clean&quot;)</span><br>   <span class="hljs-meta">@ApiOperation(&quot;清空购物车商品&quot;)</span><br>   <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">clean</span><span class="hljs-params">()</span>&#123;<br>       shoppingCartService.cleanShoppingCart();<br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-Service层接口"><a href="#3-2-Service层接口" class="headerlink" title="3.2 Service层接口"></a>3.2 Service层接口</h3><p><strong>在ShoppingCartService接口中声明清空购物车的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 清空购物车商品</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanShoppingCart</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h3 id="3-3-Service层实现类"><a href="#3-3-Service层实现类" class="headerlink" title="3.3 Service层实现类"></a>3.3 Service层实现类</h3><p><strong>在ShoppingCartServiceImpl中实现清空购物车的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 清空购物车商品</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanShoppingCart</span><span class="hljs-params">()</span> &#123;<br>       shoppingCartMapper.deleteByUserId(BaseContext.getCurrentId());<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-Mapper层"><a href="#3-4-Mapper层" class="headerlink" title="3.4 Mapper层"></a>3.4 Mapper层</h3><p><strong>在ShoppingCartMapper接口中创建删除购物车数据的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据用户id删除购物车数据</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Delete(&quot;delete from shopping_cart where user_id = #&#123;userId&#125;&quot;)</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByUserId</span><span class="hljs-params">(Long userId)</span>;<br></code></pre></td></tr></table></figure><h2 id="4-删除购物车中单个商品"><a href="#4-删除购物车中单个商品" class="headerlink" title="4. 删除购物车中单个商品"></a>4. 删除购物车中单个商品</h2><h3 id="4-1-ShoppingCartController"><a href="#4-1-ShoppingCartController" class="headerlink" title="4.1 ShoppingCartController"></a>4.1 ShoppingCartController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除购物车中一个商品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shoppingCartDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PostMapping(&quot;/sub&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;删除购物车中一个商品&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ShoppingCartDTO shoppingCartDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;删除购物车中一个商品，商品：&#123;&#125;&quot;</span>, shoppingCartDTO);<br>    shoppingCartService.subShoppingCart(shoppingCartDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-ShoppingCartService"><a href="#4-2-ShoppingCartService" class="headerlink" title="4.2 ShoppingCartService"></a>4.2 ShoppingCartService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除购物车中一个商品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shoppingCartDTO</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">subShoppingCart</span><span class="hljs-params">(ShoppingCartDTO shoppingCartDTO)</span>;<br></code></pre></td></tr></table></figure><h3 id="4-3-ShoppingCartServiceImpl"><a href="#4-3-ShoppingCartServiceImpl" class="headerlink" title="4.3 ShoppingCartServiceImpl"></a>4.3 ShoppingCartServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除购物车中一个商品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shoppingCartDTO</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subShoppingCart</span><span class="hljs-params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;<br>    <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">shoppingCart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br>    BeanUtils.copyProperties(shoppingCartDTO,shoppingCart);<br>    <span class="hljs-comment">//设置查询条件，查询当前登录用户的购物车数据</span><br>    shoppingCart.setUserId(BaseContext.getCurrentId());<br><br>    List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);<br><br>    <span class="hljs-keyword">if</span>(list != <span class="hljs-literal">null</span> &amp;&amp; list.size() &gt; <span class="hljs-number">0</span>)&#123;<br>        shoppingCart = list.get(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> shoppingCart.getNumber();<br>        <span class="hljs-keyword">if</span>(number == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//当前商品在购物车中的份数为1，直接删除当前记录</span><br>            shoppingCartMapper.deleteById(shoppingCart.getId());<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//当前商品在购物车中的份数不为1，修改份数即可</span><br>            shoppingCart.setNumber(shoppingCart.getNumber() - <span class="hljs-number">1</span>);<br>            shoppingCartMapper.updateNumberById(shoppingCart);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-ShoppingCartMapper"><a href="#4-4-ShoppingCartMapper" class="headerlink" title="4.4 ShoppingCartMapper"></a>4.4 ShoppingCartMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除购物车数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Delete(&quot;delete from shopping_cart where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><h1 id="十二-用户下单和订单支付"><a href="#十二-用户下单和订单支付" class="headerlink" title="十二. 用户下单和订单支付"></a>十二. 用户下单和订单支付</h1><h2 id="1-用户下单"><a href="#1-用户下单" class="headerlink" title="1. 用户下单"></a>1. 用户下单</h2><h3 id="1-1-Controller层-2"><a href="#1-1-Controller层-2" class="headerlink" title="1.1 Controller层"></a>1.1 Controller层</h3><p><strong>创建OrderController并提供用户下单方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-keyword">import</span> com.sky.dto.OrdersPaymentDTO;<br><span class="hljs-keyword">import</span> com.sky.dto.OrdersSubmitDTO;<br><span class="hljs-keyword">import</span> com.sky.result.PageResult;<br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> com.sky.service.OrderService;<br><span class="hljs-keyword">import</span> com.sky.vo.OrderPaymentVO;<br><span class="hljs-keyword">import</span> com.sky.vo.OrderSubmitVO;<br><span class="hljs-keyword">import</span> com.sky.vo.OrderVO;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController(&quot;userOrderController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/order&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;C端-订单接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户下单</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ordersSubmitDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/submit&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;用户下单&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;OrderSubmitVO&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrdersSubmitDTO ordersSubmitDTO)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;用户下单：&#123;&#125;&quot;</span>, ordersSubmitDTO);<br>        <span class="hljs-type">OrderSubmitVO</span> <span class="hljs-variable">orderSubmitVO</span> <span class="hljs-operator">=</span> orderService.submitOrder(ordersSubmitDTO);<br>        <span class="hljs-keyword">return</span> Result.success(orderSubmitVO);<br>    &#125; <br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-Service层-2"><a href="#1-2-Service层-2" class="headerlink" title="1.2 Service层"></a>1.2 Service层</h3><h4 id="1-2-1-Service接口"><a href="#1-2-1-Service接口" class="headerlink" title="1.2.1 Service接口"></a>1.2.1 Service接口</h4><p><strong>创建OrderService接口，并声明用户下单方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-keyword">import</span> com.sky.dto.*;<br><span class="hljs-keyword">import</span> com.sky.vo.OrderSubmitVO;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户下单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ordersSubmitDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    OrderSubmitVO <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrdersSubmitDTO ordersSubmitDTO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-2-Service层实现类-2"><a href="#1-2-2-Service层实现类-2" class="headerlink" title="1.2.2 Service层实现类"></a>1.2.2 Service层实现类</h4><p><strong>创建OrderServiceImpl实现OrderService接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderDetailMapper orderDetailMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ShoppingCartMapper shoppingCartMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressBookMapper addressBookMapper;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户下单</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ordersSubmitDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> OrderSubmitVO <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrdersSubmitDTO ordersSubmitDTO)</span> &#123;<br>        <span class="hljs-comment">//异常情况的处理（收货地址为空、超出配送范围、购物车为空）</span><br>        <span class="hljs-type">AddressBook</span> <span class="hljs-variable">addressBook</span> <span class="hljs-operator">=</span> addressBookMapper.getById(ordersSubmitDTO.getAddressBookId());<br>        <span class="hljs-keyword">if</span> (addressBook == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressBookBusinessException</span>(MessageConstant.ADDRESS_BOOK_IS_NULL);<br>        &#125;<br><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br>        <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">shoppingCart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br>        shoppingCart.setUserId(userId);<br><br>        <span class="hljs-comment">//查询当前用户的购物车数据</span><br>        List&lt;ShoppingCart&gt; shoppingCartList = shoppingCartMapper.list(shoppingCart);<br>        <span class="hljs-keyword">if</span> (shoppingCartList == <span class="hljs-literal">null</span> || shoppingCartList.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCartBusinessException</span>(MessageConstant.SHOPPING_CART_IS_NULL);<br>        &#125;<br><br>        <span class="hljs-comment">//构造订单数据</span><br>        <span class="hljs-type">Orders</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>        BeanUtils.copyProperties(ordersSubmitDTO,order);<br>        order.setPhone(addressBook.getPhone());<br>        order.setAddress(addressBook.getDetail());<br>        order.setConsignee(addressBook.getConsignee());<br>        order.setNumber(String.valueOf(System.currentTimeMillis()));<br>        order.setUserId(userId);<br>        order.setStatus(Orders.PENDING_PAYMENT);<br>        order.setPayStatus(Orders.UN_PAID);<br>        order.setOrderTime(LocalDateTime.now());<br><br>        <span class="hljs-comment">//向订单表插入1条数据</span><br>        orderMapper.insert(order);<br><br>        <span class="hljs-comment">//订单明细数据</span><br>        List&lt;OrderDetail&gt; orderDetailList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (ShoppingCart cart : shoppingCartList) &#123;<br>            <span class="hljs-type">OrderDetail</span> <span class="hljs-variable">orderDetail</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderDetail</span>();<br>            BeanUtils.copyProperties(cart, orderDetail);<br>            orderDetail.setOrderId(order.getId());<br>            orderDetailList.add(orderDetail);<br>        &#125;<br><br>        <span class="hljs-comment">//向明细表插入n条数据</span><br>        orderDetailMapper.insertBatch(orderDetailList);<br><br>        <span class="hljs-comment">//清理购物车中的数据</span><br>        shoppingCartMapper.deleteByUserId(userId);<br><br>        <span class="hljs-comment">//封装返回结果</span><br>        <span class="hljs-type">OrderSubmitVO</span> <span class="hljs-variable">orderSubmitVO</span> <span class="hljs-operator">=</span> OrderSubmitVO.builder()<br>                .id(order.getId())<br>                .orderNumber(order.getNumber())<br>                .orderAmount(order.getAmount())<br>                .orderTime(order.getOrderTime())<br>                .build();<br><br>        <span class="hljs-keyword">return</span> orderSubmitVO;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-Mapper层-2"><a href="#1-3-Mapper层-2" class="headerlink" title="1.3 Mapper层"></a>1.3 Mapper层</h3><h4 id="1-3-1-创建OrderMapper接口和对应的xml映射文件"><a href="#1-3-1-创建OrderMapper接口和对应的xml映射文件" class="headerlink" title="1.3.1 创建OrderMapper接口和对应的xml映射文件"></a>1.3.1 创建OrderMapper接口和对应的xml映射文件</h4><p>OrderMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入订单数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> order</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Orders order)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>OrderMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.OrderMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Orders&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into orders<br>        (number, status, user_id, address_book_id, order_time, checkout_time, pay_method, pay_status, amount, remark,<br>         phone, address, consignee, estimated_delivery_time, delivery_status, pack_amount, tableware_number,<br>         tableware_status)<br>        values (#&#123;number&#125;, #&#123;status&#125;, #&#123;userId&#125;, #&#123;addressBookId&#125;, #&#123;orderTime&#125;, #&#123;checkoutTime&#125;, #&#123;payMethod&#125;,<br>                #&#123;payStatus&#125;, #&#123;amount&#125;, #&#123;remark&#125;, #&#123;phone&#125;, #&#123;address&#125;, #&#123;consignee&#125;,<br>                #&#123;estimatedDeliveryTime&#125;, #&#123;deliveryStatus&#125;, #&#123;packAmount&#125;, #&#123;tablewareNumber&#125;, #&#123;tablewareStatus&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="1-3-2-创建OrderDetailMapper接口和对应的xml映射文件"><a href="#1-3-2-创建OrderDetailMapper接口和对应的xml映射文件" class="headerlink" title="1.3.2 创建OrderDetailMapper接口和对应的xml映射文件"></a>1.3.2 创建OrderDetailMapper接口和对应的xml映射文件</h4><p>OrderDetailMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-keyword">import</span> com.sky.entity.OrderDetail;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderDetailMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量插入订单明细数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderDetails</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBatch</span><span class="hljs-params">(List&lt;OrderDetail&gt; orderDetails)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>OrderDetailMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.OrderDetailMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        insert into order_detail<br>        (name, order_id, dish_id, setmeal_id, dish_flavor, number, amount, image)<br>        values<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;orderDetails&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;od&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            (#&#123;od.name&#125;,#&#123;od.orderId&#125;,#&#123;od.dishId&#125;,#&#123;od.setmealId&#125;,#&#123;od.dishFlavor&#125;,<br>             #&#123;od.number&#125;,#&#123;od.amount&#125;,#&#123;od.image&#125;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-订单支付"><a href="#2-订单支付" class="headerlink" title="2. 订单支付"></a>2. 订单支付</h2><h3 id="2-1-微信支付流程"><a href="#2-1-微信支付流程" class="headerlink" title="2.1 微信支付流程"></a>2.1 微信支付流程</h3><p><img src="/img/blogs/java/cangqiongtakeout/12.2.1.png"></p><h3 id="2-2-代码导入"><a href="#2-2-代码导入" class="headerlink" title="2.2 代码导入"></a>2.2 代码导入</h3><h4 id="2-2-1-Mapper层"><a href="#2-2-1-Mapper层" class="headerlink" title="2.2.1 Mapper层"></a>2.2.1 Mapper层</h4><p><strong>在OrderMapper.java中添加getByNumberAndUserId和update两个方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据订单号和用户id查询订单</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> orderNumber</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Select(&quot;select * from orders where number = #&#123;orderNumber&#125; and user_id= #&#123;userId&#125;&quot;)</span><br>   Orders <span class="hljs-title function_">getByNumberAndUserId</span><span class="hljs-params">(String orderNumber, Long userId)</span>;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 修改订单信息</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> orders</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Orders orders)</span>;<br></code></pre></td></tr></table></figure><p><strong>在OrderMapper.xml中添加</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.sky.entity.Orders&quot;</span>&gt;</span><br>        update orders<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;cancelReason != null and cancelReason!=&#x27;&#x27; &quot;</span>&gt;</span><br>                cancel_reason=#&#123;cancelReason&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;rejectionReason != null and rejectionReason!=&#x27;&#x27; &quot;</span>&gt;</span><br>                rejection_reason=#&#123;rejectionReason&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;cancelTime != null&quot;</span>&gt;</span><br>                cancel_time=#&#123;cancelTime&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;payStatus != null&quot;</span>&gt;</span><br>                pay_status=#&#123;payStatus&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;payMethod != null&quot;</span>&gt;</span><br>                pay_method=#&#123;payMethod&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;checkoutTime != null&quot;</span>&gt;</span><br>                checkout_time=#&#123;checkoutTime&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>                status = #&#123;status&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deliveryTime != null&quot;</span>&gt;</span><br>                delivery_time = #&#123;deliveryTime&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-Service层"><a href="#2-2-2-Service层" class="headerlink" title="2.2.2 Service层"></a>2.2.2 Service层</h4><p><strong>在OrderService.java中添加payment和paySuccess两个方法定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 订单支付</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> ordersPaymentDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   OrderPaymentVO <span class="hljs-title function_">payment</span><span class="hljs-params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="hljs-keyword">throws</span> Exception;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 支付成功，修改订单状态</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> outTradeNo</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">paySuccess</span><span class="hljs-params">(String outTradeNo)</span>;<br></code></pre></td></tr></table></figure><p><strong>在OrderServiceImpl.java中实现payment和paySuccess两个方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> UserMapper userMapper;<br><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> WeChatPayUtil weChatPayUtil;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 订单支付</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> ordersPaymentDTO</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> OrderPaymentVO <span class="hljs-title function_">payment</span><span class="hljs-params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-comment">// 当前登录用户id</span><br>       <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br>       <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getById(userId);<br><br>       <span class="hljs-comment">//调用微信支付接口，生成预支付交易单</span><br>       <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> weChatPayUtil.pay(<br>               ordersPaymentDTO.getOrderNumber(), <span class="hljs-comment">//商户订单号</span><br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>), <span class="hljs-comment">//支付金额，单位 元</span><br>               <span class="hljs-string">&quot;苍穹外卖订单&quot;</span>, <span class="hljs-comment">//商品描述</span><br>               user.getOpenid() <span class="hljs-comment">//微信用户的openid</span><br>       );<br><br>       <span class="hljs-keyword">if</span> (jsonObject.getString(<span class="hljs-string">&quot;code&quot;</span>) != <span class="hljs-literal">null</span> &amp;&amp; jsonObject.getString(<span class="hljs-string">&quot;code&quot;</span>).equals(<span class="hljs-string">&quot;ORDERPAID&quot;</span>)) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(<span class="hljs-string">&quot;该订单已支付&quot;</span>);<br>       &#125;<br><br>       <span class="hljs-type">OrderPaymentVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> jsonObject.toJavaObject(OrderPaymentVO.class);<br>       vo.setPackageStr(jsonObject.getString(<span class="hljs-string">&quot;package&quot;</span>));<br><br>       <span class="hljs-keyword">return</span> vo;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 支付成功，修改订单状态</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> outTradeNo</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paySuccess</span><span class="hljs-params">(String outTradeNo)</span> &#123;<br>       <span class="hljs-comment">// 当前登录用户id</span><br>       <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br><br>       <span class="hljs-comment">// 根据订单号查询当前用户的订单</span><br>       <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getByNumberAndUserId(outTradeNo, userId);<br><br>       <span class="hljs-comment">// 根据订单id更新订单的状态、支付方式、支付状态、结账时间</span><br>       <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> Orders.builder()<br>               .id(ordersDB.getId())<br>               .status(Orders.TO_BE_CONFIRMED)<br>               .payStatus(Orders.PAID)<br>               .checkoutTime(LocalDateTime.now())<br>               .build();<br><br>       orderMapper.update(orders);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-Controller层"><a href="#2-2-3-Controller层" class="headerlink" title="2.2.3 Controller层"></a>2.2.3 Controller层</h4><p><strong>在OrderController.java中添加payment方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 订单支付</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> ordersPaymentDTO</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@PutMapping(&quot;/payment&quot;)</span><br>  <span class="hljs-meta">@ApiOperation(&quot;订单支付&quot;)</span><br>  <span class="hljs-keyword">public</span> Result&lt;OrderPaymentVO&gt; <span class="hljs-title function_">payment</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrdersPaymentDTO ordersPaymentDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      log.info(<span class="hljs-string">&quot;订单支付：&#123;&#125;&quot;</span>, ordersPaymentDTO);<br>      <span class="hljs-type">OrderPaymentVO</span> <span class="hljs-variable">orderPaymentVO</span> <span class="hljs-operator">=</span> orderService.payment(ordersPaymentDTO);<br>      log.info(<span class="hljs-string">&quot;生成预支付交易单：&#123;&#125;&quot;</span>, orderPaymentVO);<br>      <span class="hljs-keyword">return</span> Result.success(orderPaymentVO);<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>导入PayNotifyController.java</strong></p><h3 id="2-3-跳过微信支付"><a href="#2-3-跳过微信支付" class="headerlink" title="2.3 跳过微信支付"></a>2.3 跳过微信支付</h3><p><a href="https://blog.csdn.net/XZY__one/article/details/135818055">跳过微信支付</a></p><h1 id="十三-用户端历史订单模块"><a href="#十三-用户端历史订单模块" class="headerlink" title="十三. 用户端历史订单模块"></a>十三. 用户端历史订单模块</h1><h2 id="1-历史订单查询"><a href="#1-历史订单查询" class="headerlink" title="1. 历史订单查询"></a>1. 历史订单查询</h2><h3 id="1-1-user-OrderController"><a href="#1-1-user-OrderController" class="headerlink" title="1.1 user&#x2F;OrderController"></a>1.1 user&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 历史订单查询</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> page</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pageSize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> status   订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 6已取消</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/historyOrders&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;历史订单查询&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-type">int</span> page, <span class="hljs-type">int</span> pageSize, Integer status)</span> &#123;<br>    <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> orderService.pageQuery4User(page, pageSize, status);<br>    <span class="hljs-keyword">return</span> Result.success(pageResult);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-OrderService"><a href="#1-2-OrderService" class="headerlink" title="1.2 OrderService"></a>1.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户端订单分页查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> page</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pageSize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>PageResult <span class="hljs-title function_">pageQuery4User</span><span class="hljs-params">(<span class="hljs-type">int</span> page, <span class="hljs-type">int</span> pageSize, Integer status)</span>;<br></code></pre></td></tr></table></figure><h3 id="1-3-OrderServiceImpl"><a href="#1-3-OrderServiceImpl" class="headerlink" title="1.3 OrderServiceImpl"></a>1.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户端订单分页查询</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageNum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">pageQuery4User</span><span class="hljs-params">(<span class="hljs-type">int</span> pageNum, <span class="hljs-type">int</span> pageSize, Integer status)</span> &#123;<br>        <span class="hljs-comment">// 设置分页</span><br>        PageHelper.startPage(pageNum, pageSize);<br><br>        <span class="hljs-type">OrdersPageQueryDTO</span> <span class="hljs-variable">ordersPageQueryDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrdersPageQueryDTO</span>();<br>        ordersPageQueryDTO.setUserId(BaseContext.getCurrentId());<br>        ordersPageQueryDTO.setStatus(status);<br><br>        <span class="hljs-comment">// 分页条件查询</span><br>        Page&lt;Orders&gt; page = orderMapper.pageQuery(ordersPageQueryDTO);<br><br>        List&lt;OrderVO&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>        <span class="hljs-comment">// 查询出订单明细，并封装入OrderVO进行响应</span><br>        <span class="hljs-keyword">if</span> (page != <span class="hljs-literal">null</span> &amp;&amp; page.getTotal() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Orders orders : page) &#123;<br>                <span class="hljs-type">Long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> orders.getId();<span class="hljs-comment">// 订单id</span><br><br>                <span class="hljs-comment">// 查询订单明细</span><br>                List&lt;OrderDetail&gt; orderDetails = orderDetailMapper.getByOrderId(orderId);<br><br>                <span class="hljs-type">OrderVO</span> <span class="hljs-variable">orderVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderVO</span>();<br>                BeanUtils.copyProperties(orders, orderVO);<br>                orderVO.setOrderDetailList(orderDetails);<br><br>                list.add(orderVO);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(page.getTotal(), list);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-OrderMapper"><a href="#1-4-OrderMapper" class="headerlink" title="1.4 OrderMapper"></a>1.4 OrderMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页条件查询并按下单时间排序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ordersPageQueryDTO</span><br><span class="hljs-comment"> */</span><br>Page&lt;Orders&gt; <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(OrdersPageQueryDTO ordersPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><h3 id="1-5-OrderMapper-xml"><a href="#1-5-OrderMapper-xml" class="headerlink" title="1.5 OrderMapper.xml"></a>1.5 OrderMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pageQuery&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Orders&quot;</span>&gt;</span><br>    select * from orders<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;number != null and number!=&#x27;&#x27;&quot;</span>&gt;</span><br>            and number like concat(&#x27;%&#x27;,#&#123;number&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null and phone!=&#x27;&#x27;&quot;</span>&gt;</span><br>            and phone like concat(&#x27;%&#x27;,#&#123;phone&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userId != null&quot;</span>&gt;</span><br>            and user_id = #&#123;userId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;beginTime != null&quot;</span>&gt;</span><br>            and order_time <span class="hljs-symbol">&amp;gt;</span>= #&#123;beginTime&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;endTime != null&quot;</span>&gt;</span><br>            and order_time <span class="hljs-symbol">&amp;lt;</span>= #&#123;endTime&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by order_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-6-OrderDetailMapper"><a href="#1-6-OrderDetailMapper" class="headerlink" title="1.6 OrderDetailMapper"></a>1.6 OrderDetailMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据订单id查询订单明细</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Select(&quot;select * from order_detail where order_id = #&#123;orderId&#125;&quot;)</span><br>List&lt;OrderDetail&gt; <span class="hljs-title function_">getByOrderId</span><span class="hljs-params">(Long orderId)</span>;<br></code></pre></td></tr></table></figure><h2 id="2-查询订单详情"><a href="#2-查询订单详情" class="headerlink" title="2. 查询订单详情"></a>2. 查询订单详情</h2><h3 id="2-1-user-OrderController"><a href="#2-1-user-OrderController" class="headerlink" title="2.1 user&#x2F;OrderController"></a>2.1 user&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询订单详情</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/orderDetail/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;查询订单详情&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;OrderVO&gt; <span class="hljs-title function_">details</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    <span class="hljs-type">OrderVO</span> <span class="hljs-variable">orderVO</span> <span class="hljs-operator">=</span> orderService.details(id);<br>    <span class="hljs-keyword">return</span> Result.success(orderVO);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-OrderService"><a href="#2-2-OrderService" class="headerlink" title="2.2 OrderService"></a>2.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询订单详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>OrderVO <span class="hljs-title function_">details</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><h3 id="2-3-OrderServiceImpl"><a href="#2-3-OrderServiceImpl" class="headerlink" title="2.3 OrderServiceImpl"></a>2.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询订单详情</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> OrderVO <span class="hljs-title function_">details</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br><br>    <span class="hljs-comment">// 查询该订单对应的菜品/套餐明细</span><br>    List&lt;OrderDetail&gt; orderDetailList = orderDetailMapper.getByOrderId(orders.getId());<br><br>    <span class="hljs-comment">// 将该订单及其详情封装到OrderVO并返回</span><br>    <span class="hljs-type">OrderVO</span> <span class="hljs-variable">orderVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderVO</span>();<br>    BeanUtils.copyProperties(orders, orderVO);<br>    orderVO.setOrderDetailList(orderDetailList);<br><br>    <span class="hljs-keyword">return</span> orderVO;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-OrderMapper"><a href="#2-4-OrderMapper" class="headerlink" title="2.4 OrderMapper"></a>2.4 OrderMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询订单</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Select(&quot;select * from orders where id=#&#123;id&#125;&quot;)</span><br>Orders <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><h2 id="3-取消订单"><a href="#3-取消订单" class="headerlink" title="3. 取消订单"></a>3. 取消订单</h2><h3 id="3-1-user-OrderController"><a href="#3-1-user-OrderController" class="headerlink" title="3.1 user&#x2F;OrderController"></a>3.1 user&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户取消订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping(&quot;/cancel/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;取消订单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">cancel</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    orderService.userCancelById(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-OrderService"><a href="#3-2-OrderService" class="headerlink" title="3.2 OrderService"></a>3.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户取消订单</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">userCancelById</span><span class="hljs-params">(Long id)</span> <span class="hljs-keyword">throws</span> Exception;<br></code></pre></td></tr></table></figure><h3 id="3-3-OrderServiceImpl"><a href="#3-3-OrderServiceImpl" class="headerlink" title="3.3 OrderServiceImpl"></a>3.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户取消订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userCancelById</span><span class="hljs-params">(Long id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br><br>    <span class="hljs-comment">// 校验订单是否存在</span><br>    <span class="hljs-keyword">if</span> (ordersDB == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_NOT_FOUND);<br>    &#125;<br><br>    <span class="hljs-comment">//订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 6已取消</span><br>    <span class="hljs-keyword">if</span> (ordersDB.getStatus() &gt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);<br>    &#125;<br><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>    orders.setId(ordersDB.getId());<br><br>    <span class="hljs-comment">// 订单处于待接单状态下取消，需要进行退款</span><br>    <span class="hljs-keyword">if</span> (ordersDB.getStatus().equals(Orders.TO_BE_CONFIRMED)) &#123;<br>        <span class="hljs-comment">//调用微信支付退款接口</span><br>        weChatPayUtil.refund(<br>                ordersDB.getNumber(), <span class="hljs-comment">//商户订单号</span><br>                ordersDB.getNumber(), <span class="hljs-comment">//商户退款单号</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>),<span class="hljs-comment">//退款金额，单位 元</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>));<span class="hljs-comment">//原订单金额</span><br><br>        <span class="hljs-comment">//支付状态修改为 退款</span><br>        orders.setPayStatus(Orders.REFUND);<br>    &#125;<br><br>    <span class="hljs-comment">// 更新订单状态、取消原因、取消时间</span><br>    orders.setStatus(Orders.CANCELLED);<br>    orders.setCancelReason(<span class="hljs-string">&quot;用户取消&quot;</span>);<br>    orders.setCancelTime(LocalDateTime.now());<br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-再来一单"><a href="#4-再来一单" class="headerlink" title="4. 再来一单"></a>4. 再来一单</h2><h3 id="4-1-user-OrderController"><a href="#4-1-user-OrderController" class="headerlink" title="4.1 user&#x2F;OrderController"></a>4.1 user&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 再来一单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(&quot;/repetition/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;再来一单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">repetition</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    orderService.repetition(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-OrderService"><a href="#4-2-OrderService" class="headerlink" title="4.2 OrderService"></a>4.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 再来一单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">repetition</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><h3 id="4-3-OrderServiceImpl"><a href="#4-3-OrderServiceImpl" class="headerlink" title="4.3 OrderServiceImpl"></a>4.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 再来一单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">repetition</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 查询当前用户id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br><br>    <span class="hljs-comment">// 根据订单id查询当前订单详情</span><br>    List&lt;OrderDetail&gt; orderDetailList = orderDetailMapper.getByOrderId(id);<br><br>    <span class="hljs-comment">// 将订单详情对象转换为购物车对象</span><br>    List&lt;ShoppingCart&gt; shoppingCartList = orderDetailList.stream().map(x -&gt; &#123;<br>        <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">shoppingCart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br><br>        <span class="hljs-comment">// 将原订单详情里面的菜品信息重新复制到购物车对象中</span><br>        BeanUtils.copyProperties(x, shoppingCart, <span class="hljs-string">&quot;id&quot;</span>);<br>        shoppingCart.setUserId(userId);<br>        shoppingCart.setCreateTime(LocalDateTime.now());<br><br>        <span class="hljs-keyword">return</span> shoppingCart;<br>    &#125;).collect(Collectors.toList());<br><br>    <span class="hljs-comment">// 将购物车对象批量添加到数据库</span><br>    shoppingCartMapper.insertBatch(shoppingCartList);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-ShoppingCartMapper-1"><a href="#4-4-ShoppingCartMapper-1" class="headerlink" title="4.4 ShoppingCartMapper"></a>4.4 ShoppingCartMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 批量插入购物车数据</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> shoppingCartList</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBatch</span><span class="hljs-params">(List&lt;ShoppingCart&gt; shoppingCartList)</span>;<br></code></pre></td></tr></table></figure><h3 id="4-5-ShoppingCartMapper-xml"><a href="#4-5-ShoppingCartMapper-xml" class="headerlink" title="4.5 ShoppingCartMapper.xml"></a>4.5 ShoppingCartMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        insert into shopping_cart<br>        (name, image, user_id, dish_id, setmeal_id, dish_flavor, number, amount, create_time)<br>        values<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;shoppingCartList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;sc&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            (#&#123;sc.name&#125;,#&#123;sc.image&#125;,#&#123;sc.userId&#125;,#&#123;sc.dishId&#125;,#&#123;sc.setmealId&#125;,#&#123;sc.dishFlavor&#125;,#&#123;sc.number&#125;,#&#123;sc.amount&#125;,#&#123;sc.createTime&#125;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="十四-商家端订单管理模块"><a href="#十四-商家端订单管理模块" class="headerlink" title="十四. 商家端订单管理模块"></a>十四. 商家端订单管理模块</h1><h2 id="1-订单搜索"><a href="#1-订单搜索" class="headerlink" title="1. 订单搜索"></a>1. 订单搜索</h2><h3 id="1-1-admin-OrderController"><a href="#1-1-admin-OrderController" class="headerlink" title="1.1 admin&#x2F;OrderController"></a>1.1 admin&#x2F;OrderController</h3><p>在admin包下创建OrderController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单管理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController(&quot;adminOrderController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/order&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;订单管理接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 订单搜索</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ordersPageQueryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/conditionSearch&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;订单搜索&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">conditionSearch</span><span class="hljs-params">(OrdersPageQueryDTO ordersPageQueryDTO)</span> &#123;<br>        <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> orderService.conditionSearch(ordersPageQueryDTO);<br>        <span class="hljs-keyword">return</span> Result.success(pageResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-OrderService-1"><a href="#1-2-OrderService-1" class="headerlink" title="1.2 OrderService"></a>1.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 条件搜索订单</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ordersPageQueryDTO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>PageResult <span class="hljs-title function_">conditionSearch</span><span class="hljs-params">(OrdersPageQueryDTO ordersPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><h3 id="1-3-OrderServiceImpl-1"><a href="#1-3-OrderServiceImpl-1" class="headerlink" title="1.3 OrderServiceImpl"></a>1.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单搜索</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ordersPageQueryDTO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">conditionSearch</span><span class="hljs-params">(OrdersPageQueryDTO ordersPageQueryDTO)</span> &#123;<br>    PageHelper.startPage(ordersPageQueryDTO.getPage(), ordersPageQueryDTO.getPageSize());<br><br>    Page&lt;Orders&gt; page = orderMapper.pageQuery(ordersPageQueryDTO);<br><br>    <span class="hljs-comment">// 部分订单状态，需要额外返回订单菜品信息，将Orders转化为OrderVO</span><br>    List&lt;OrderVO&gt; orderVOList = getOrderVOList(page);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(page.getTotal(), orderVOList);<br>&#125;<br><br><span class="hljs-keyword">private</span> List&lt;OrderVO&gt; <span class="hljs-title function_">getOrderVOList</span><span class="hljs-params">(Page&lt;Orders&gt; page)</span> &#123;<br>    <span class="hljs-comment">// 需要返回订单菜品信息，自定义OrderVO响应结果</span><br>    List&lt;OrderVO&gt; orderVOList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    List&lt;Orders&gt; ordersList = page.getResult();<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(ordersList)) &#123;<br>        <span class="hljs-keyword">for</span> (Orders orders : ordersList) &#123;<br>            <span class="hljs-comment">// 将共同字段复制到OrderVO</span><br>            <span class="hljs-type">OrderVO</span> <span class="hljs-variable">orderVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderVO</span>();<br>            BeanUtils.copyProperties(orders, orderVO);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">orderDishes</span> <span class="hljs-operator">=</span> getOrderDishesStr(orders);<br><br>            <span class="hljs-comment">// 将订单菜品信息封装到orderVO中，并添加到orderVOList</span><br>            orderVO.setOrderDishes(orderDishes);<br>            orderVOList.add(orderVO);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> orderVOList;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据订单id获取菜品信息字符串</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orders</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getOrderDishesStr</span><span class="hljs-params">(Orders orders)</span> &#123;<br>    <span class="hljs-comment">// 查询订单菜品详情信息（订单中的菜品和数量）</span><br>    List&lt;OrderDetail&gt; orderDetailList = orderDetailMapper.getByOrderId(orders.getId());<br><br>    <span class="hljs-comment">// 将每一条订单菜品信息拼接为字符串（格式：宫保鸡丁*3；）</span><br>    List&lt;String&gt; orderDishList = orderDetailList.stream().map(x -&gt; &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">orderDish</span> <span class="hljs-operator">=</span> x.getName() + <span class="hljs-string">&quot;*&quot;</span> + x.getNumber() + <span class="hljs-string">&quot;;&quot;</span>;<br>        <span class="hljs-keyword">return</span> orderDish;<br>    &#125;).collect(Collectors.toList());<br><br>    <span class="hljs-comment">// 将该订单对应的所有菜品信息拼接在一起</span><br>    <span class="hljs-keyword">return</span> String.join(<span class="hljs-string">&quot;&quot;</span>, orderDishList);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-各个状态的订单数量统计"><a href="#2-各个状态的订单数量统计" class="headerlink" title="2. 各个状态的订单数量统计"></a>2. 各个状态的订单数量统计</h2><h3 id="2-1-admin-OrderController"><a href="#2-1-admin-OrderController" class="headerlink" title="2.1 admin&#x2F;OrderController"></a>2.1 admin&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 各个状态的订单数量统计</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/statistics&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;各个状态的订单数量统计&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;OrderStatisticsVO&gt; <span class="hljs-title function_">statistics</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">OrderStatisticsVO</span> <span class="hljs-variable">orderStatisticsVO</span> <span class="hljs-operator">=</span> orderService.statistics();<br>    <span class="hljs-keyword">return</span> Result.success(orderStatisticsVO);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-OrderService-1"><a href="#2-2-OrderService-1" class="headerlink" title="2.2 OrderService"></a>2.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 各个状态的订单数量统计</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>OrderStatisticsVO <span class="hljs-title function_">statistics</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h3 id="2-3-OrderServiceImpl-1"><a href="#2-3-OrderServiceImpl-1" class="headerlink" title="2.3 OrderServiceImpl"></a>2.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 各个状态的订单数量统计</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> OrderStatisticsVO <span class="hljs-title function_">statistics</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 根据状态，分别查询出待接单、待派送、派送中的订单数量</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">toBeConfirmed</span> <span class="hljs-operator">=</span> orderMapper.countStatus(Orders.TO_BE_CONFIRMED);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">confirmed</span> <span class="hljs-operator">=</span> orderMapper.countStatus(Orders.CONFIRMED);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">deliveryInProgress</span> <span class="hljs-operator">=</span> orderMapper.countStatus(Orders.DELIVERY_IN_PROGRESS);<br><br>    <span class="hljs-comment">// 将查询出的数据封装到orderStatisticsVO中响应</span><br>    <span class="hljs-type">OrderStatisticsVO</span> <span class="hljs-variable">orderStatisticsVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderStatisticsVO</span>();<br>    orderStatisticsVO.setToBeConfirmed(toBeConfirmed);<br>    orderStatisticsVO.setConfirmed(confirmed);<br>    orderStatisticsVO.setDeliveryInProgress(deliveryInProgress);<br>    <span class="hljs-keyword">return</span> orderStatisticsVO;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-OrderMapper-1"><a href="#2-4-OrderMapper-1" class="headerlink" title="2.4 OrderMapper"></a>2.4 OrderMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据状态统计订单数量</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Select(&quot;select count(id) from orders where status = #&#123;status&#125;&quot;)</span><br>Integer <span class="hljs-title function_">countStatus</span><span class="hljs-params">(Integer status)</span>;<br></code></pre></td></tr></table></figure><h2 id="3-查询订单详情"><a href="#3-查询订单详情" class="headerlink" title="3. 查询订单详情"></a>3. 查询订单详情</h2><h3 id="3-1-admin-OrderController"><a href="#3-1-admin-OrderController" class="headerlink" title="3.1 admin&#x2F;OrderController"></a>3.1 admin&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单详情</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/details/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;查询订单详情&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;OrderVO&gt; <span class="hljs-title function_">details</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    <span class="hljs-type">OrderVO</span> <span class="hljs-variable">orderVO</span> <span class="hljs-operator">=</span> orderService.details(id);<br>    <span class="hljs-keyword">return</span> Result.success(orderVO);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-接单"><a href="#4-接单" class="headerlink" title="4. 接单"></a>4. 接单</h2><h3 id="4-1-admin-OrderController"><a href="#4-1-admin-OrderController" class="headerlink" title="4.1 admin&#x2F;OrderController"></a>4.1 admin&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping(&quot;/confirm&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;接单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">confirm</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrdersConfirmDTO ordersConfirmDTO)</span> &#123;<br>    orderService.confirm(ordersConfirmDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-OrderService-1"><a href="#4-2-OrderService-1" class="headerlink" title="4.2 OrderService"></a>4.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ordersConfirmDTO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(OrdersConfirmDTO ordersConfirmDTO)</span>;<br></code></pre></td></tr></table></figure><h3 id="4-3-OrderServiceImpl-1"><a href="#4-3-OrderServiceImpl-1" class="headerlink" title="4.3 OrderServiceImpl"></a>4.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ordersConfirmDTO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(OrdersConfirmDTO ordersConfirmDTO)</span> &#123;<br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> Orders.builder()<br>            .id(ordersConfirmDTO.getId())<br>            .status(Orders.CONFIRMED)<br>            .build();<br><br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-拒单"><a href="#5-拒单" class="headerlink" title="5. 拒单"></a>5. 拒单</h2><h3 id="5-1-admin-OrderController"><a href="#5-1-admin-OrderController" class="headerlink" title="5.1 admin&#x2F;OrderController"></a>5.1 admin&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拒单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping(&quot;/rejection&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;拒单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">rejection</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrdersRejectionDTO ordersRejectionDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    orderService.rejection(ordersRejectionDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-OrderService"><a href="#5-2-OrderService" class="headerlink" title="5.2 OrderService"></a>5.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拒单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ordersRejectionDTO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">rejection</span><span class="hljs-params">(OrdersRejectionDTO ordersRejectionDTO)</span> <span class="hljs-keyword">throws</span> Exception;<br></code></pre></td></tr></table></figure><h3 id="5-3-OrderServiceImpl"><a href="#5-3-OrderServiceImpl" class="headerlink" title="5.3 OrderServiceImpl"></a>5.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拒单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ordersRejectionDTO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rejection</span><span class="hljs-params">(OrdersRejectionDTO ordersRejectionDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(ordersRejectionDTO.getId());<br><br>    <span class="hljs-comment">// 订单只有存在且状态为2（待接单）才可以拒单</span><br>    <span class="hljs-keyword">if</span> (ordersDB == <span class="hljs-literal">null</span> || !ordersDB.getStatus().equals(Orders.TO_BE_CONFIRMED)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);<br>    &#125;<br><br>    <span class="hljs-comment">//支付状态</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">payStatus</span> <span class="hljs-operator">=</span> ordersDB.getPayStatus();<br>    <span class="hljs-keyword">if</span> (payStatus == Orders.PAID) &#123;<br>        <span class="hljs-comment">//用户已支付，需要退款</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">refund</span> <span class="hljs-operator">=</span> weChatPayUtil.refund(<br>                ordersDB.getNumber(),<br>                ordersDB.getNumber(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>));<br>        log.info(<span class="hljs-string">&quot;申请退款：&#123;&#125;&quot;</span>, refund);<br>    &#125;<br><br>    <span class="hljs-comment">// 拒单需要退款，根据订单id更新订单状态、拒单原因、取消时间</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>    orders.setId(ordersDB.getId());<br>    orders.setStatus(Orders.CANCELLED);<br>    orders.setRejectionReason(ordersRejectionDTO.getRejectionReason());<br>    orders.setCancelTime(LocalDateTime.now());<br><br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-取消订单"><a href="#6-取消订单" class="headerlink" title="6. 取消订单"></a>6. 取消订单</h2><h3 id="6-1-admin-OrderController"><a href="#6-1-admin-OrderController" class="headerlink" title="6.1 admin&#x2F;OrderController"></a>6.1 admin&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取消订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping(&quot;/cancel&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;取消订单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">cancel</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrdersCancelDTO ordersCancelDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    orderService.cancel(ordersCancelDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-OrderService"><a href="#6-2-OrderService" class="headerlink" title="6.2 OrderService"></a>6.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 商家取消订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ordersCancelDTO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(OrdersCancelDTO ordersCancelDTO)</span> <span class="hljs-keyword">throws</span> Exception;<br></code></pre></td></tr></table></figure><h3 id="6-3-OrderServiceImpl"><a href="#6-3-OrderServiceImpl" class="headerlink" title="6.3 OrderServiceImpl"></a>6.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取消订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ordersCancelDTO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(OrdersCancelDTO ordersCancelDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(ordersCancelDTO.getId());<br><br>    <span class="hljs-comment">//支付状态</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">payStatus</span> <span class="hljs-operator">=</span> ordersDB.getPayStatus();<br>    <span class="hljs-keyword">if</span> (payStatus == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">//用户已支付，需要退款</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">refund</span> <span class="hljs-operator">=</span> weChatPayUtil.refund(<br>                ordersDB.getNumber(),<br>                ordersDB.getNumber(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>));<br>        log.info(<span class="hljs-string">&quot;申请退款：&#123;&#125;&quot;</span>, refund);<br>    &#125;<br><br>    <span class="hljs-comment">// 管理端取消订单需要退款，根据订单id更新订单状态、取消原因、取消时间</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>    orders.setId(ordersCancelDTO.getId());<br>    orders.setStatus(Orders.CANCELLED);<br>    orders.setCancelReason(ordersCancelDTO.getCancelReason());<br>    orders.setCancelTime(LocalDateTime.now());<br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-派送订单"><a href="#7-派送订单" class="headerlink" title="7. 派送订单"></a>7. 派送订单</h2><h3 id="7-1-admin-OrderController"><a href="#7-1-admin-OrderController" class="headerlink" title="7.1 admin&#x2F;OrderController"></a>7.1 admin&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 派送订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping(&quot;/delivery/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;派送订单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delivery</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    orderService.delivery(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-OrderService"><a href="#7-2-OrderService" class="headerlink" title="7.2 OrderService"></a>7.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 派送订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">delivery</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><h3 id="7-3-OrderServiceImpl"><a href="#7-3-OrderServiceImpl" class="headerlink" title="7.3 OrderServiceImpl"></a>7.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 派送订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delivery</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br><br>    <span class="hljs-comment">// 校验订单是否存在，并且状态为3</span><br>    <span class="hljs-keyword">if</span> (ordersDB == <span class="hljs-literal">null</span> || !ordersDB.getStatus().equals(Orders.CONFIRMED)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);<br>    &#125;<br><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>    orders.setId(ordersDB.getId());<br>    <span class="hljs-comment">// 更新订单状态,状态转为派送中</span><br>    orders.setStatus(Orders.DELIVERY_IN_PROGRESS);<br><br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-完成订单"><a href="#8-完成订单" class="headerlink" title="8. 完成订单"></a>8. 完成订单</h2><h3 id="8-1-admin-OrderController"><a href="#8-1-admin-OrderController" class="headerlink" title="8.1 admin&#x2F;OrderController"></a>8.1 admin&#x2F;OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 完成订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping(&quot;/complete/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;完成订单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">complete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    orderService.complete(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-OrderService"><a href="#8-2-OrderService" class="headerlink" title="8.2 OrderService"></a>8.2 OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 完成订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">complete</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><h3 id="8-3-OrderServiceImpl"><a href="#8-3-OrderServiceImpl" class="headerlink" title="8.3 OrderServiceImpl"></a>8.3 OrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 完成订单</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">complete</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br><br>    <span class="hljs-comment">// 校验订单是否存在，并且状态为4</span><br>    <span class="hljs-keyword">if</span> (ordersDB == <span class="hljs-literal">null</span> || !ordersDB.getStatus().equals(Orders.DELIVERY_IN_PROGRESS)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);<br>    &#125;<br><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>    orders.setId(ordersDB.getId());<br>    <span class="hljs-comment">// 更新订单状态,状态转为完成</span><br>    orders.setStatus(Orders.COMPLETED);<br>    orders.setDeliveryTime(LocalDateTime.now());<br><br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十五-Spring-Task-和-订单状态定时处理"><a href="#十五-Spring-Task-和-订单状态定时处理" class="headerlink" title="十五. Spring Task 和 订单状态定时处理"></a>十五. Spring Task 和 订单状态定时处理</h1><h2 id="1-Spring-Task"><a href="#1-Spring-Task" class="headerlink" title="1. Spring Task"></a>1. Spring Task</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><ul><li><strong>Spring Task</strong> 是Spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑。</li><li><strong>作用</strong>定时自动执行某段Java代码</li></ul><h3 id="1-2-cron表达式"><a href="#1-2-cron表达式" class="headerlink" title="1.2 cron表达式"></a>1.2 cron表达式</h3><p><strong>cron表达式</strong>其实就是一个字符串，通过cron表达式可以<strong>定义任务触发的时间</strong></p><p>**构成规则：**分为6或7个域，由空格分隔开，每个域代表一个含义</p><p>每个域的含义分别为：秒、分钟、小时、日、月、周、年(可选)</p><p><strong>举例：</strong></p><p>2022年10月12日上午9点整 对应的cron表达式为：<strong>0 0 9 12 10 ? 2022</strong></p><h3 id="1-3-Spring-Task使用步骤"><a href="#1-3-Spring-Task使用步骤" class="headerlink" title="1.3 Spring Task使用步骤"></a>1.3 Spring Task使用步骤</h3><ol><li>导入maven坐标 spring-context</li><li>启动类添加注解 @EnableScheduling 开启任务调度</li><li>自定义定时任务类</li></ol><h2 id="2-订单状态定时处理"><a href="#2-订单状态定时处理" class="headerlink" title="2. 订单状态定时处理"></a>2. 订单状态定时处理</h2><h3 id="2-1-问题分析"><a href="#2-1-问题分析" class="headerlink" title="2.1 问题分析"></a>2.1 问题分析</h3><ul><li>下单后未支付，订单一直处于**“待支付”**状态</li><li>用户收货后管理端未点击完成按钮，订单一直处于**“派送中”**状态</li></ul><p>对于上面两种情况需要通过<strong>定时任务</strong>来修改订单状态，具体逻辑为：</p><ul><li>通过定时任务每分钟检查一次是否存在支付超时订单（下单后超过15分钟仍未支付则判定为支付超时订单），如果存在则修改订单状态为“已取消”</li><li>通过定时任务每天凌晨1点检查一次是否存在“派送中”的订单，如果存在则修改订单状态为“已完成”</li></ul><h3 id="2-2-自定义定时任务类OrderTask"><a href="#2-2-自定义定时任务类OrderTask" class="headerlink" title="2.2 自定义定时任务类OrderTask"></a>2.2 自定义定时任务类OrderTask</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.task;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义定时任务，实现订单状态定时处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderTask</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理支付超时订单</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processTimeoutOrder</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;处理支付超时订单：&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> LocalDateTime.now().plusMinutes(-<span class="hljs-number">15</span>);<br><br>        <span class="hljs-comment">// select * from orders where status = 1 and order_time &lt; 当前时间-15分钟</span><br>        List&lt;Orders&gt; ordersList = orderMapper.getByStatusAndOrdertimeLT(Orders.PENDING_PAYMENT, time);<br>        <span class="hljs-keyword">if</span>(ordersList != <span class="hljs-literal">null</span> &amp;&amp; ordersList.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            ordersList.forEach(order -&gt; &#123;<br>                order.setStatus(Orders.CANCELLED);<br>                order.setCancelReason(<span class="hljs-string">&quot;支付超时，自动取消&quot;</span>);<br>                order.setCancelTime(LocalDateTime.now());<br>                orderMapper.update(order);<br>            &#125;);<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理“派送中”状态的订单</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDeliveryOrder</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;处理派送中订单：&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-comment">// select * from orders where status = 4 and order_time &lt; 当前时间-1小时</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> LocalDateTime.now().plusMinutes(-<span class="hljs-number">60</span>);<br>        List&lt;Orders&gt; ordersList = orderMapper.getByStatusAndOrdertimeLT(Orders.DELIVERY_IN_PROGRESS, time);<br><br>        <span class="hljs-keyword">if</span>(ordersList != <span class="hljs-literal">null</span> &amp;&amp; ordersList.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            ordersList.forEach(order -&gt; &#123;<br>                order.setStatus(Orders.COMPLETED);<br>                orderMapper.update(order);<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-在OrderMapper接口中扩展方法"><a href="#2-3-在OrderMapper接口中扩展方法" class="headerlink" title="2.3 在OrderMapper接口中扩展方法"></a>2.3 在OrderMapper接口中扩展方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据状态和下单时间查询订单</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> orderTime</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Select(&quot;select * from orders where status = #&#123;status&#125; and order_time &lt; #&#123;orderTime&#125;&quot;)</span><br>   List&lt;Orders&gt; <span class="hljs-title function_">getByStatusAndOrdertimeLT</span><span class="hljs-params">(Integer status, LocalDateTime orderTime)</span>;<br></code></pre></td></tr></table></figure><h1 id="十六-WebSocket-和-用户来单催单提醒"><a href="#十六-WebSocket-和-用户来单催单提醒" class="headerlink" title="十六. WebSocket 和 用户来单催单提醒"></a>十六. WebSocket 和 用户来单催单提醒</h1><h2 id="1-WebSocket"><a href="#1-WebSocket" class="headerlink" title="1. WebSocket"></a>1. WebSocket</h2><p>WebSocket 是基于 TCP 的一种新的<strong>网络协议</strong>。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成一次握手，两者之间就可以创建<strong>持久性</strong>的连接， 并进行<strong>双向</strong>数据传输。</p><p><strong>HTTP协议和WebSocket协议对比：</strong></p><ul><li>HTTP是<strong>短连接</strong></li><li>WebSocket是<strong>长连接</strong></li><li>HTTP通信是<strong>单向</strong>的，基于请求响应模式</li><li>WebSocket支持<strong>双向</strong>通信</li><li>HTTP和WebSocket底层都是TCP连接</li></ul><h2 id="2-用户来单提醒"><a href="#2-用户来单提醒" class="headerlink" title="2. 用户来单提醒"></a>2. 用户来单提醒</h2><h3 id="2-1-实现思路"><a href="#2-1-实现思路" class="headerlink" title="2.1 实现思路"></a>2.1 实现思路</h3><ul><li>通过WebSocket实现管理端页面和服务端保持长连接状态</li><li>当客户支付后，调用WebSocket的相关API实现服务端向客户端推送消息</li><li>客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报</li><li>约定服务端发送给客户端浏览器的数据格式为JSON，字段包括：type，orderId，content<ul><li>type 为消息类型，1为来单提醒 2为客户催单</li><li>orderId 为订单id</li><li>content 为消息内容</li></ul></li></ul><h3 id="2-2-代码开发"><a href="#2-2-代码开发" class="headerlink" title="2.2 代码开发"></a>2.2 代码开发</h3><p><strong>在OrderServiceImpl中注入WebSocketServer对象，修改paySuccess方法，加入如下代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> WebSocketServer webSocketServer;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 支付成功，修改订单状态</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> outTradeNo</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paySuccess</span><span class="hljs-params">(String outTradeNo)</span> &#123;<br>       <span class="hljs-comment">// 当前登录用户id</span><br>       <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br><br>       <span class="hljs-comment">// 根据订单号查询当前用户的订单</span><br>       <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getByNumberAndUserId(outTradeNo, userId);<br><br>       <span class="hljs-comment">// 根据订单id更新订单的状态、支付方式、支付状态、结账时间</span><br>       <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> Orders.builder()<br>               .id(ordersDB.getId())<br>               .status(Orders.TO_BE_CONFIRMED)<br>               .payStatus(Orders.PAID)<br>               .checkoutTime(LocalDateTime.now())<br>               .build();<br><br>       orderMapper.update(orders);<br><span class="hljs-comment">//////////////////////////////////////////////</span><br>       <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>       map.put(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//消息类型，1表示来单提醒</span><br>       map.put(<span class="hljs-string">&quot;orderId&quot;</span>, orders.getId());<br>       map.put(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-string">&quot;订单号：&quot;</span> + outTradeNo);<br><br>       <span class="hljs-comment">//通过WebSocket实现来单提醒，向客户端浏览器推送消息</span><br>       webSocketServer.sendToAllClient(JSON.toJSONString(map));<br>       <span class="hljs-comment">///////////////////////////////////////////////////</span><br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="3-用户催单提醒"><a href="#3-用户催单提醒" class="headerlink" title="3. 用户催单提醒"></a>3. 用户催单提醒</h2><h3 id="3-1-Controller层-3"><a href="#3-1-Controller层-3" class="headerlink" title="3.1 Controller层"></a>3.1 Controller层</h3><p><strong>根据用户催单的接口定义，在user&#x2F;OrderController中创建催单方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户催单</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/reminder/&#123;id&#125;&quot;)</span><br>   <span class="hljs-meta">@ApiOperation(&quot;用户催单&quot;)</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">reminder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>       orderService.reminder(id);<br>       <span class="hljs-keyword">return</span> Result.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-Service层接口-1"><a href="#3-2-Service层接口-1" class="headerlink" title="3.2 Service层接口"></a>3.2 Service层接口</h3><p><strong>在OrderService接口中声明reminder方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户催单</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">reminder</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><h3 id="3-3-Service层实现类-1"><a href="#3-3-Service层实现类-1" class="headerlink" title="3.3 Service层实现类"></a>3.3 Service层实现类</h3><p><strong>在OrderServiceImpl中实现reminder方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户催单</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reminder</span><span class="hljs-params">(Long id)</span> &#123;<br>       <span class="hljs-comment">// 查询订单是否存在</span><br>       <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br>       <span class="hljs-keyword">if</span> (orders == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_NOT_FOUND);<br>       &#125;<br><br>       <span class="hljs-comment">//基于WebSocket实现催单</span><br>       <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>       map.put(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">//2代表用户催单</span><br>       map.put(<span class="hljs-string">&quot;orderId&quot;</span>, id);<br>       map.put(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-string">&quot;订单号：&quot;</span> + orders.getNumber());<br>       webSocketServer.sendToAllClient(JSON.toJSONString(map));<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="十七-数据统计功能"><a href="#十七-数据统计功能" class="headerlink" title="十七. 数据统计功能"></a>十七. 数据统计功能</h1><h2 id="1-营业额统计"><a href="#1-营业额统计" class="headerlink" title="1. 营业额统计"></a>1. 营业额统计</h2><h3 id="1-1-Controller层-3"><a href="#1-1-Controller层-3" class="headerlink" title="1.1 Controller层"></a>1.1 Controller层</h3><p><strong>根据接口定义创建ReportController：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> com.sky.service.ReportService;<br><span class="hljs-keyword">import</span> com.sky.vo.TurnoverReportVO;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.format.annotation.DateTimeFormat;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 报表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/report&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;统计报表相关接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReportController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ReportService reportService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 营业额数据统计</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> begin</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/turnoverStatistics&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;营业额数据统计&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;TurnoverReportVO&gt; <span class="hljs-title function_">turnoverStatistics</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="hljs-params">                    LocalDate begin,</span><br><span class="hljs-params">            <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="hljs-params">                    LocalDate end)</span> &#123;<br>        <span class="hljs-keyword">return</span> Result.success(reportService.getTurnover(begin, end));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-Service层接口"><a href="#1-2-Service层接口" class="headerlink" title="1.2 Service层接口"></a>1.2 Service层接口</h3><p><strong>创建ReportService接口，声明getTurnover方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-keyword">import</span> com.sky.vo.TurnoverReportVO;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ReportService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据时间区间统计营业额</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beginTime</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> endTime</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    TurnoverReportVO <span class="hljs-title function_">getTurnover</span><span class="hljs-params">(LocalDate beginTime, LocalDate endTime)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-Service层实现类"><a href="#1-3-Service层实现类" class="headerlink" title="1.3 Service层实现类"></a>1.3 Service层实现类</h3><p><strong>创建ReportServiceImpl实现类，实现getTurnover方法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-keyword">import</span> com.sky.entity.Orders;<br><span class="hljs-keyword">import</span> com.sky.mapper.OrderMapper;<br><span class="hljs-keyword">import</span> com.sky.service.ReportService;<br><span class="hljs-keyword">import</span> com.sky.vo.TurnoverReportVO;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReportServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReportService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据时间区间统计营业额</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> begin</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> TurnoverReportVO <span class="hljs-title function_">getTurnover</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span> &#123;<br>        List&lt;LocalDate&gt; dateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        dateList.add(begin);<br><br>        <span class="hljs-keyword">while</span> (!begin.equals(end))&#123;<br>            begin = begin.plusDays(<span class="hljs-number">1</span>);<span class="hljs-comment">//日期计算，获得指定日期后1天的日期</span><br>            dateList.add(begin);<br>        &#125;<br>        <br>       List&lt;Double&gt; turnoverList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (LocalDate date : dateList) &#123;<br>            <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MIN);<br>            <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MAX);<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, Orders.COMPLETED);<br>        map.put(<span class="hljs-string">&quot;begin&quot;</span>,beginTime);<br>        map.put(<span class="hljs-string">&quot;end&quot;</span>, endTime);<br>            <span class="hljs-type">Double</span> <span class="hljs-variable">turnover</span> <span class="hljs-operator">=</span> orderMapper.sumByMap(map); <br>            turnover = turnover == <span class="hljs-literal">null</span> ? <span class="hljs-number">0.0</span> : turnover;<br>            turnoverList.add(turnover);<br>        &#125;<br><br>        <span class="hljs-comment">//数据封装</span><br>        <span class="hljs-keyword">return</span> TurnoverReportVO.builder()<br>                .dateList(StringUtils.join(dateList,<span class="hljs-string">&quot;,&quot;</span>))<br>                .turnoverList(StringUtils.join(turnoverList,<span class="hljs-string">&quot;,&quot;</span>))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-Mapper层-1"><a href="#1-4-Mapper层-1" class="headerlink" title="1.4 Mapper层"></a>1.4 Mapper层</h3><p><strong>在OrderMapper接口声明sumByMap方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据动态条件统计营业额</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> map</span><br><span class="hljs-comment">    */</span><br>   Double <span class="hljs-title function_">sumByMap</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure><p><strong>在OrderMapper.xml文件中编写动态SQL：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sumByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Double&quot;</span>&gt;</span><br>        select sum(amount) from orders<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>                and status = #&#123;status&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null&quot;</span>&gt;</span><br>                and order_time <span class="hljs-symbol">&amp;gt;</span>= #&#123;begin&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;end != null&quot;</span>&gt;</span><br>                and order_time <span class="hljs-symbol">&amp;lt;</span>= #&#123;end&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-用户统计"><a href="#2-用户统计" class="headerlink" title="2. 用户统计"></a>2. 用户统计</h2><h3 id="2-1-Controller层-1"><a href="#2-1-Controller层-1" class="headerlink" title="2.1 Controller层"></a>2.1 Controller层</h3><p><strong>根据接口定义，在ReportController中创建userStatistics方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户数据统计</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> begin</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/userStatistics&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;用户数据统计&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;UserReportVO&gt; <span class="hljs-title function_">userStatistics</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">            <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span>&#123;<br><br>        <span class="hljs-keyword">return</span> Result.success(reportService.getUserStatistics(begin,end));            <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-Service层接口-1"><a href="#2-2-Service层接口-1" class="headerlink" title="2.2 Service层接口"></a>2.2 Service层接口</h3><p><strong>在ReportService接口中声明getUserStatistics方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据时间区间统计用户数量</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> begin</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   UserReportVO <span class="hljs-title function_">getUserStatistics</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span>;<br></code></pre></td></tr></table></figure><h3 id="2-3-Service层实现类-1"><a href="#2-3-Service层实现类-1" class="headerlink" title="2.3 Service层实现类"></a>2.3 Service层实现类</h3><p><strong>在ReportServiceImpl实现类中实现getUserStatistics方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> UserReportVO <span class="hljs-title function_">getUserStatistics</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span> &#123;<br>       List&lt;LocalDate&gt; dateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>       dateList.add(begin);<br><br>       <span class="hljs-keyword">while</span> (!begin.equals(end))&#123;<br>           begin = begin.plusDays(<span class="hljs-number">1</span>);<br>           dateList.add(begin);<br>       &#125;<br>       List&lt;Integer&gt; newUserList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">//新增用户数</span><br>       List&lt;Integer&gt; totalUserList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">//总用户数</span><br><br>       <span class="hljs-keyword">for</span> (LocalDate date : dateList) &#123;<br>           <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MIN);<br>           <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MAX);<br>           <span class="hljs-comment">//新增用户数量 select count(id) from user where create_time &gt; ? and create_time &lt; ?</span><br>           <span class="hljs-type">Integer</span> <span class="hljs-variable">newUser</span> <span class="hljs-operator">=</span> getUserCount(beginTime, endTime);<br>           <span class="hljs-comment">//总用户数量 select count(id) from user where  create_time &lt; ?</span><br>           <span class="hljs-type">Integer</span> <span class="hljs-variable">totalUser</span> <span class="hljs-operator">=</span> getUserCount(<span class="hljs-literal">null</span>, endTime);<br><br>           newUserList.add(newUser);<br>           totalUserList.add(totalUser);<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> UserReportVO.builder()<br>               .dateList(StringUtils.join(dateList,<span class="hljs-string">&quot;,&quot;</span>))<br>               .newUserList(StringUtils.join(newUserList,<span class="hljs-string">&quot;,&quot;</span>))<br>               .totalUserList(StringUtils.join(totalUserList,<span class="hljs-string">&quot;,&quot;</span>))<br>               .build();<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>在ReportServiceImpl实现类中创建私有方法getUserCount：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据时间区间统计用户数量</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> beginTime</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> endTime</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> Integer <span class="hljs-title function_">getUserCount</span><span class="hljs-params">(LocalDateTime beginTime, LocalDateTime endTime)</span> &#123;<br>       <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>       map.put(<span class="hljs-string">&quot;begin&quot;</span>,beginTime);<br>       map.put(<span class="hljs-string">&quot;end&quot;</span>, endTime);<br>       <span class="hljs-keyword">return</span> userMapper.countByMap(map);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-Mapper层-1"><a href="#2-4-Mapper层-1" class="headerlink" title="2.4 Mapper层"></a>2.4 Mapper层</h3><p><strong>在UserMapper接口中声明countByMap方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据动态条件统计用户数量</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> map</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   Integer <span class="hljs-title function_">countByMap</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure><p><strong>在UserMapper.xml文件中编写动态SQL：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;countByMap&quot;</span> resultType=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;<br>        select <span class="hljs-title function_">count</span><span class="hljs-params">(id)</span> from user<br>        &lt;where&gt;<br>            &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;begin != null&quot;</span>&gt;<br>                and create_time &amp;gt;= #&#123;begin&#125;<br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;end != null&quot;</span>&gt;<br>                and create_time &amp;lt;= #&#123;end&#125;<br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>        &lt;/where&gt;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h2 id="3-订单统计"><a href="#3-订单统计" class="headerlink" title="3. 订单统计"></a>3. 订单统计</h2><h3 id="3-1-Controller层-4"><a href="#3-1-Controller层-4" class="headerlink" title="3.1 Controller层"></a>3.1 Controller层</h3><p><strong>在ReportController中根据订单统计接口创建orderStatistics方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 订单数据统计</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> begin</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/ordersStatistics&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;用户数据统计&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;OrderReportVO&gt; <span class="hljs-title function_">orderStatistics</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="hljs-params">                    LocalDate begin,</span><br><span class="hljs-params">            <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="hljs-params">                    LocalDate end)</span>&#123;<br><br>        <span class="hljs-keyword">return</span> Result.success(reportService.getOrderStatistics(begin,end));<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-Service层接口-2"><a href="#3-2-Service层接口-2" class="headerlink" title="3.2 Service层接口"></a>3.2 Service层接口</h3><p><strong>在ReportService接口中声明getOrderStatistics方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据时间区间统计订单数量</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> begin </span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">*/</span><br>OrderReportVO <span class="hljs-title function_">getOrderStatistics</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span>;<br></code></pre></td></tr></table></figure><h3 id="3-3-Service层实现类-2"><a href="#3-3-Service层实现类-2" class="headerlink" title="3.3 Service层实现类"></a>3.3 Service层实现类</h3><p><strong>在ReportServiceImpl实现类中实现getOrderStatistics方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据时间区间统计订单数量</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> begin </span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> OrderReportVO <span class="hljs-title function_">getOrderStatistics</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span>&#123;<br>List&lt;LocalDate&gt; dateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    dateList.add(begin);<br><br>    <span class="hljs-keyword">while</span> (!begin.equals(end))&#123;<br>          begin = begin.plusDays(<span class="hljs-number">1</span>);<br>          dateList.add(begin);<br>     &#125;<br>    <span class="hljs-comment">//每天订单总数集合</span><br>     List&lt;Integer&gt; orderCountList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">//每天有效订单数集合</span><br>    List&lt;Integer&gt; validOrderCountList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (LocalDate date : dateList) &#123;<br>         <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MIN);<br>         <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MAX);<br>   <span class="hljs-comment">//查询每天的总订单数 select count(id) from orders where order_time &gt; ? and order_time &lt; ?</span><br>         <span class="hljs-type">Integer</span> <span class="hljs-variable">orderCount</span> <span class="hljs-operator">=</span> getOrderCount(beginTime, endTime, <span class="hljs-literal">null</span>);<br><br>  <span class="hljs-comment">//查询每天的有效订单数 select count(id) from orders where order_time &gt; ? and order_time &lt; ? and status = ?</span><br>         <span class="hljs-type">Integer</span> <span class="hljs-variable">validOrderCount</span> <span class="hljs-operator">=</span> getOrderCount(beginTime, endTime, Orders.COMPLETED);<br><br>         orderCountList.add(orderCount);<br>         validOrderCountList.add(validOrderCount);<br>        &#125;<br><br>    <span class="hljs-comment">//时间区间内的总订单数</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">totalOrderCount</span> <span class="hljs-operator">=</span> orderCountList.stream().reduce(Integer::sum).get();<br>    <span class="hljs-comment">//时间区间内的总有效订单数</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">validOrderCount</span> <span class="hljs-operator">=</span> validOrderCountList.stream().reduce(Integer::sum).get();<br>    <span class="hljs-comment">//订单完成率</span><br>    <span class="hljs-type">Double</span> <span class="hljs-variable">orderCompletionRate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">if</span>(totalOrderCount != <span class="hljs-number">0</span>)&#123;<br>         orderCompletionRate = validOrderCount.doubleValue() / totalOrderCount;<br>     &#125;<br>    <span class="hljs-keyword">return</span> OrderReportVO.builder()<br>                .dateList(StringUtils.join(dateList, <span class="hljs-string">&quot;,&quot;</span>))<br>                .orderCountList(StringUtils.join(orderCountList, <span class="hljs-string">&quot;,&quot;</span>))<br>                .validOrderCountList(StringUtils.join(validOrderCountList, <span class="hljs-string">&quot;,&quot;</span>))<br>                .totalOrderCount(totalOrderCount)<br>                .validOrderCount(validOrderCount)<br>                .orderCompletionRate(orderCompletionRate)<br>                .build();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在ReportServiceImpl实现类中提供私有方法getOrderCount：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据时间区间统计指定状态的订单数量</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> beginTime</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> endTime</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> Integer <span class="hljs-title function_">getOrderCount</span><span class="hljs-params">(LocalDateTime beginTime, LocalDateTime endTime, Integer status)</span> &#123;<br><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;status&quot;</span>, status);<br>map.put(<span class="hljs-string">&quot;begin&quot;</span>,beginTime);<br>map.put(<span class="hljs-string">&quot;end&quot;</span>, endTime);<br><span class="hljs-keyword">return</span> orderMapper.countByMap(map);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-Mapper层-1"><a href="#3-4-Mapper层-1" class="headerlink" title="3.4 Mapper层"></a>3.4 Mapper层</h3><p><strong>在OrderMapper接口中声明countByMap方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*根据动态条件统计订单数量</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> map</span><br><span class="hljs-comment">*/</span><br>Integer <span class="hljs-title function_">countByMap</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure><p><strong>在OrderMapper.xml文件中编写动态SQL：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;countByMap&quot;</span> resultType=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;<br>        select <span class="hljs-title function_">count</span><span class="hljs-params">(id)</span> from orders<br>        &lt;where&gt;<br>            &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;status != null&quot;</span>&gt;<br>                <span class="hljs-type">and</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> #&#123;status&#125;<br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;begin != null&quot;</span>&gt;<br>                and order_time &amp;gt;= #&#123;begin&#125;<br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;end != null&quot;</span>&gt;<br>                and order_time &amp;lt;= #&#123;end&#125;<br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>        &lt;/where&gt;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><h2 id="4-销量排名Top10"><a href="#4-销量排名Top10" class="headerlink" title="4. 销量排名Top10"></a>4. 销量排名Top10</h2><h3 id="4-1-Controller层-1"><a href="#4-1-Controller层-1" class="headerlink" title="4.1 Controller层"></a>4.1 Controller层</h3><p><strong>在ReportController中根据销量排名接口创建top10方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 销量排名统计</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> begin</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping(&quot;/top10&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;销量排名统计&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;SalesTop10ReportVO&gt; <span class="hljs-title function_">top10</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span>&#123;<br><span class="hljs-keyword">return</span> Result.success(reportService.getSalesTop10(begin,end));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-Service层接口"><a href="#4-2-Service层接口" class="headerlink" title="4.2 Service层接口"></a>4.2 Service层接口</h3><p><strong>在ReportService接口中声明getSalesTop10方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询指定时间区间内的销量排名top10 </span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> begin</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>SalesTop10ReportVO <span class="hljs-title function_">getSalesTop10</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span>;<br></code></pre></td></tr></table></figure><h3 id="4-3-Service层实现类"><a href="#4-3-Service层实现类" class="headerlink" title="4.3 Service层实现类"></a>4.3 Service层实现类</h3><p><strong>在ReportServiceImpl实现类中实现getSalesTop10方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询指定时间区间内的销量排名top10</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> begin</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">public</span> SalesTop10ReportVO <span class="hljs-title function_">getSalesTop10</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span>&#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(begin, LocalTime.MIN);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(end, LocalTime.MAX);<br>        List&lt;GoodsSalesDTO&gt; goodsSalesDTOList = orderMapper.getSalesTop10(beginTime, endTime);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nameList</span> <span class="hljs-operator">=</span> StringUtils.join(goodsSalesDTOList.stream().map(GoodsSalesDTO::getName).collect(Collectors.toList()),<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">numberList</span> <span class="hljs-operator">=</span> StringUtils.join(goodsSalesDTOList.stream().map(GoodsSalesDTO::getNumber).collect(Collectors.toList()),<span class="hljs-string">&quot;,&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> SalesTop10ReportVO.builder()<br>                .nameList(nameList)<br>                .numberList(numberList)<br>                .build();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-Mapper层"><a href="#4-4-Mapper层" class="headerlink" title="4.4 Mapper层"></a>4.4 Mapper层</h3><p><strong>在OrderMapper接口中声明getSalesTop10方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询商品销量排名</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> begin</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">*/</span><br>List&lt;GoodsSalesDTO&gt; <span class="hljs-title function_">getSalesTop10</span><span class="hljs-params">(LocalDateTime begin, LocalDateTime end)</span>;<br></code></pre></td></tr></table></figure><p><strong>在OrderMapper.xml文件中编写动态SQL：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getSalesTop10&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sky.dto.GoodsSalesDTO&quot;</span>&gt;</span><br>        select od.name name,sum(od.number) number from order_detail od ,orders o<br>        where od.order_id = o.id<br>            and o.status = 5<br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null&quot;</span>&gt;</span><br>                and order_time <span class="hljs-symbol">&amp;gt;</span>= #&#123;begin&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;end != null&quot;</span>&gt;</span><br>                and order_time <span class="hljs-symbol">&amp;lt;</span>= #&#123;end&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        group by name<br>        order by number desc<br>        limit 0, 10<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="十八-Apache-POI-和-导出运营数据"><a href="#十八-Apache-POI-和-导出运营数据" class="headerlink" title="十八. Apache POI 和 导出运营数据"></a>十八. Apache POI 和 导出运营数据</h1><h2 id="1-Apache-POI"><a href="#1-Apache-POI" class="headerlink" title="1. Apache POI"></a>1. Apache POI</h2><p>一般情况下，POI 都是用于操作 Excel 文件。</p><h3 id="1-1-将数据写入Excel文件"><a href="#1-1-将数据写入Excel文件" class="headerlink" title="1.1 将数据写入Excel文件"></a>1.1 将数据写入Excel文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.test;<br><br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">POITest</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 基于POI向Excel文件写入数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//在内存中创建一个Excel文件对象</span><br>        <span class="hljs-type">XSSFWorkbook</span> <span class="hljs-variable">excel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>();<br>        <span class="hljs-comment">//创建Sheet页</span><br>        <span class="hljs-type">XSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> excel.createSheet(<span class="hljs-string">&quot;itcast&quot;</span>);<br><br>        <span class="hljs-comment">//在Sheet页中创建行，0表示第1行</span><br>        <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">row1</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//创建单元格并在单元格中设置值，单元格编号也是从0开始，1表示第2个单元格</span><br>        row1.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;姓名&quot;</span>);<br>        row1.createCell(<span class="hljs-number">2</span>).setCellValue(<span class="hljs-string">&quot;城市&quot;</span>);<br><br>        <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">row2</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">1</span>);<br>        row2.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;张三&quot;</span>);<br>        row2.createCell(<span class="hljs-number">2</span>).setCellValue(<span class="hljs-string">&quot;北京&quot;</span>);<br><br>        <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">row3</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">2</span>);<br>        row3.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;李四&quot;</span>);<br>        row3.createCell(<span class="hljs-number">2</span>).setCellValue(<span class="hljs-string">&quot;上海&quot;</span>);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\itcast.xlsx&quot;</span>));<br>        <span class="hljs-comment">//通过输出流将内存中的Excel文件写入到磁盘上</span><br>        excel.write(out);<br><br>        <span class="hljs-comment">//关闭资源</span><br>        out.flush();<br>        out.close();<br>        excel.close();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        write();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-读取Excel文件中的数据"><a href="#1-2-读取Excel文件中的数据" class="headerlink" title="1.2 读取Excel文件中的数据"></a>1.2 读取Excel文件中的数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.test;<br><br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">POITest</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 基于POI读取Excel文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\itcast.xlsx&quot;</span>));<br>        <span class="hljs-comment">//通过输入流读取指定的Excel文件</span><br>        <span class="hljs-type">XSSFWorkbook</span> <span class="hljs-variable">excel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(in);<br>        <span class="hljs-comment">//获取Excel文件的第1个Sheet页</span><br>        <span class="hljs-type">XSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> excel.getSheetAt(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">//获取Sheet页中的最后一行的行号</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastRowNum</span> <span class="hljs-operator">=</span> sheet.getLastRowNum();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= lastRowNum; i++) &#123;<br>            <span class="hljs-comment">//获取Sheet页中的行</span><br>            <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">titleRow</span> <span class="hljs-operator">=</span> sheet.getRow(i);<br>            <span class="hljs-comment">//获取行的第2个单元格</span><br>            <span class="hljs-type">XSSFCell</span> <span class="hljs-variable">cell1</span> <span class="hljs-operator">=</span> titleRow.getCell(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//获取单元格中的文本内容</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">cellValue1</span> <span class="hljs-operator">=</span> cell1.getStringCellValue();<br>            <span class="hljs-comment">//获取行的第3个单元格</span><br>            <span class="hljs-type">XSSFCell</span> <span class="hljs-variable">cell2</span> <span class="hljs-operator">=</span> titleRow.getCell(<span class="hljs-number">2</span>);<br>            <span class="hljs-comment">//获取单元格中的文本内容</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">cellValue2</span> <span class="hljs-operator">=</span> cell2.getStringCellValue();<br><br>            System.out.println(cellValue1 + <span class="hljs-string">&quot; &quot;</span> +cellValue2);<br>        &#125;<br><br>        <span class="hljs-comment">//关闭资源</span><br>        in.close();<br>        excel.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-导出运营数据Excel报表"><a href="#2-导出运营数据Excel报表" class="headerlink" title="2. 导出运营数据Excel报表"></a>2. 导出运营数据Excel报表</h2><h3 id="2-1-实现步骤"><a href="#2-1-实现步骤" class="headerlink" title="2.1 实现步骤"></a>2.1 实现步骤</h3><ol><li>设计Excel模板文件</li><li>查询近30天的运营数据</li><li>将查询到的运营数据写入模板文件</li><li>通过输出流将Excel文件下载到客户端浏览器</li></ol><h3 id="2-2-Controller层-1"><a href="#2-2-Controller层-1" class="headerlink" title="2.2 Controller层"></a>2.2 Controller层</h3><p><strong>根据接口定义，在ReportController中创建export方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 导出运营数据报表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/export&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;导出运营数据报表&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">export</span><span class="hljs-params">(HttpServletResponse response)</span>&#123;<br>    reportService.exportBusinessData(response);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-Service层接口"><a href="#2-3-Service层接口" class="headerlink" title="2.3 Service层接口"></a>2.3 Service层接口</h3><p><strong>在ReportService接口中声明导出运营数据报表的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 导出近30天的运营数据报表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">exportBusinessData</span><span class="hljs-params">(HttpServletResponse response)</span>;<br></code></pre></td></tr></table></figure><h3 id="2-4-Service层实现类"><a href="#2-4-Service层实现类" class="headerlink" title="2.4 Service层实现类"></a>2.4 Service层实现类</h3><p><strong>在ReportServiceImpl实现类中实现导出运营数据报表的方法:</strong></p><p>提前将资料中的<strong>运营数据报表模板.xlsx</strong>拷贝到项目的resources&#x2F;template目录中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**导出近30天的运营数据报表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportBusinessData</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> LocalDate.now().minusDays(<span class="hljs-number">30</span>);<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> LocalDate.now().minusDays(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//查询概览运营数据，提供给Excel模板文件</span><br>    <span class="hljs-type">BusinessDataVO</span> <span class="hljs-variable">businessData</span> <span class="hljs-operator">=</span> workspaceService.getBusinessData(LocalDateTime.of(begin,LocalTime.MIN), LocalDateTime.of(end, LocalTime.MAX));<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;template/运营数据报表模板.xlsx&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//基于提供好的模板文件创建一个新的Excel表格对象</span><br>        <span class="hljs-type">XSSFWorkbook</span> <span class="hljs-variable">excel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(inputStream);<br>        <span class="hljs-comment">//获得Excel文件中的一个Sheet页</span><br>        <span class="hljs-type">XSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> excel.getSheet(<span class="hljs-string">&quot;Sheet1&quot;</span>);<br><br>        sheet.getRow(<span class="hljs-number">1</span>).getCell(<span class="hljs-number">1</span>).setCellValue(begin + <span class="hljs-string">&quot;至&quot;</span> + end);<br>        <span class="hljs-comment">//获得第4行</span><br>        <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//获取单元格</span><br>        row.getCell(<span class="hljs-number">2</span>).setCellValue(businessData.getTurnover());<br>        row.getCell(<span class="hljs-number">4</span>).setCellValue(businessData.getOrderCompletionRate());<br>        row.getCell(<span class="hljs-number">6</span>).setCellValue(businessData.getNewUsers());<br>        row = sheet.getRow(<span class="hljs-number">4</span>);<br>        row.getCell(<span class="hljs-number">2</span>).setCellValue(businessData.getValidOrderCount());<br>        row.getCell(<span class="hljs-number">4</span>).setCellValue(businessData.getUnitPrice());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>            <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> begin.plusDays(i);<br>           <span class="hljs-comment">//准备明细数据</span><br>            businessData = workspaceService.getBusinessData(LocalDateTime.of(date,LocalTime.MIN), LocalDateTime.of(date, LocalTime.MAX));<br>            row = sheet.getRow(<span class="hljs-number">7</span> + i);<br>            row.getCell(<span class="hljs-number">1</span>).setCellValue(date.toString());<br>            row.getCell(<span class="hljs-number">2</span>).setCellValue(businessData.getTurnover());<br>            row.getCell(<span class="hljs-number">3</span>).setCellValue(businessData.getValidOrderCount());<br>            row.getCell(<span class="hljs-number">4</span>).setCellValue(businessData.getOrderCompletionRate());<br>            row.getCell(<span class="hljs-number">5</span>).setCellValue(businessData.getUnitPrice());<br>            row.getCell(<span class="hljs-number">6</span>).setCellValue(businessData.getNewUsers());<br>        &#125;<br>        <span class="hljs-comment">//通过输出流将文件下载到客户端浏览器中</span><br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        excel.write(out);<br>        <span class="hljs-comment">//关闭资源</span><br>        out.flush();<br>        out.close();<br>        excel.close();<br><br>    &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>javase</tag>
      
      <tag>苍穹外卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>苍穹外卖订单支付跳过微信支付及解决后续订单取消、拒单等问题</title>
    <link href="/2025/03/03/JAVA/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96DebugAndResolve/"/>
    <url>/2025/03/03/JAVA/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96DebugAndResolve/</url>
    
    <content type="html"><![CDATA[<h1 align="center">苍穹外卖订单支付跳过微信支付及解决后续订单取消、拒单等问题</h1><h2 id="1-导入订单支付代码"><a href="#1-导入订单支付代码" class="headerlink" title="1. 导入订单支付代码"></a>1. 导入订单支付代码</h2><p>在完成用户下单相关模块任务后，导入黑马资料中提供的订单支付代码(根据课程教学导入)。<br><strong>注意：不要再配置微信支付相关的application.yml和application-dev.yml文件</strong></p><p><img src="/img/blogs/java/cangqiongtakeout/solve.1.png"></p><h2 id="2-跳过微信支付"><a href="#2-跳过微信支付" class="headerlink" title="2. 跳过微信支付"></a>2. 跳过微信支付</h2><p><a href="https://blog.csdn.net/XZY__one/article/details/135818055">跳过微信支付</a></p><p>按照上面文章做即可跳过微信支付模块，但是后续在写用户端和商家端订单取消、商家端拒单等接口时出错，请按照下面的步骤进行修改即可修复</p><h2 id="3-用户端取消订单接口出错"><a href="#3-用户端取消订单接口出错" class="headerlink" title="3. 用户端取消订单接口出错"></a>3. 用户端取消订单接口出错</h2><p>在Service层实现类<strong>OrderServiceImpl</strong>中注释以下代码(该段代码依然调用了微信支付相关接口，所以要注释掉)</p><p><img src="/img/blogs/java/cangqiongtakeout/solve.2.png"></p><p>修改后的userCancelById(用户取消订单)方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户取消订单</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userCancelById</span><span class="hljs-params">(Long id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 根据id查询订单</span><br>        <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br><br>        <span class="hljs-comment">// 校验订单是否存在</span><br>        <span class="hljs-keyword">if</span> (ordersDB == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_NOT_FOUND);<br>        &#125;<br><br>        <span class="hljs-comment">//订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 6已取消</span><br>        <span class="hljs-keyword">if</span> (ordersDB.getStatus() &gt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);<br>        &#125;<br><br>        <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>        orders.setId(ordersDB.getId());<br><br>        <span class="hljs-comment">// 订单处于待接单状态下取消，需要进行退款</span><br>        <span class="hljs-keyword">if</span> (ordersDB.getStatus().equals(Orders.TO_BE_CONFIRMED)) &#123;<br><span class="hljs-comment">//            //调用微信支付退款接口</span><br><span class="hljs-comment">//            weChatPayUtil.refund(</span><br><span class="hljs-comment">//                    ordersDB.getNumber(), //商户订单号</span><br><span class="hljs-comment">//                    ordersDB.getNumber(), //商户退款单号</span><br><span class="hljs-comment">//                    new BigDecimal(0.01),//退款金额，单位 元</span><br><span class="hljs-comment">//                    new BigDecimal(0.01));//原订单金额</span><br><br>            <span class="hljs-comment">//支付状态修改为 退款</span><br>            orders.setPayStatus(Orders.REFUND);<br>        &#125;<br><br>        <span class="hljs-comment">// 更新订单状态、取消原因、取消时间</span><br>        orders.setStatus(Orders.CANCELLED);<br>        orders.setCancelReason(<span class="hljs-string">&quot;用户取消&quot;</span>);<br>        orders.setCancelTime(LocalDateTime.now());<br>        orderMapper.update(orders);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="4-商家端拒单接口出错"><a href="#4-商家端拒单接口出错" class="headerlink" title="4. 商家端拒单接口出错"></a>4. 商家端拒单接口出错</h2><h3 id="4-1-注释微信支付相关接口"><a href="#4-1-注释微信支付相关接口" class="headerlink" title="4.1 注释微信支付相关接口"></a>4.1 注释微信支付相关接口</h3><p>在Service层实现类<strong>OrderServiceImpl</strong>中注释以下代码(该段代码依然调用了微信支付相关接口，所以要注释掉)</p><p><img src="/img/blogs/java/cangqiongtakeout/solve.3.png"></p><h3 id="4-2-更新语句放在if语句中"><a href="#4-2-更新语句放在if语句中" class="headerlink" title="4.2 更新语句放在if语句中"></a>4.2 更新语句放在if语句中</h3><ol><li>然后，把更新语句放在if语句中，如果支付状态是已支付，就更新订单状态等数据</li><li>此外要把创建的orders对象放到if语句之上</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//支付状态</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">payStatus</span> <span class="hljs-operator">=</span> ordersDB.getPayStatus();<br>        <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>        <span class="hljs-keyword">if</span> (payStatus == Orders.PAID) &#123;<br><span class="hljs-comment">//            //用户已支付，需要退款</span><br><span class="hljs-comment">//            String refund = weChatPayUtil.refund(</span><br><span class="hljs-comment">//                    ordersDB.getNumber(),</span><br><span class="hljs-comment">//                    ordersDB.getNumber(),</span><br><span class="hljs-comment">//                    new BigDecimal(0.01),</span><br><span class="hljs-comment">//                    new BigDecimal(0.01));</span><br><span class="hljs-comment">//            log.info(&quot;申请退款：&#123;&#125;&quot;, refund);</span><br><br>            <span class="hljs-comment">// 拒单需要退款，根据订单id更新订单状态、拒单原因、取消时间</span><br>            orders.setId(ordersDB.getId());<br>            orders.setStatus(Orders.CANCELLED);<br>            orders.setRejectionReason(ordersRejectionDTO.getRejectionReason());<br>            orders.setCancelTime(LocalDateTime.now());<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-修改后的rejection-拒单-方法"><a href="#4-3-修改后的rejection-拒单-方法" class="headerlink" title="4.3 修改后的rejection(拒单)方法"></a>4.3 修改后的rejection(拒单)方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 拒单</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ordersRejectionDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rejection</span><span class="hljs-params">(OrdersRejectionDTO ordersRejectionDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 根据id查询订单</span><br>        <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(ordersRejectionDTO.getId());<br><br>        <span class="hljs-comment">// 订单只有存在且状态为2（待接单）才可以拒单</span><br>        <span class="hljs-keyword">if</span> (ordersDB == <span class="hljs-literal">null</span> || !ordersDB.getStatus().equals(Orders.TO_BE_CONFIRMED)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">//支付状态</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">payStatus</span> <span class="hljs-operator">=</span> ordersDB.getPayStatus();<br>        <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>        <span class="hljs-keyword">if</span> (payStatus == Orders.PAID) &#123;<br><span class="hljs-comment">//            //用户已支付，需要退款</span><br><span class="hljs-comment">//            String refund = weChatPayUtil.refund(</span><br><span class="hljs-comment">//                    ordersDB.getNumber(),</span><br><span class="hljs-comment">//                    ordersDB.getNumber(),</span><br><span class="hljs-comment">//                    new BigDecimal(0.01),</span><br><span class="hljs-comment">//                    new BigDecimal(0.01));</span><br><span class="hljs-comment">//            log.info(&quot;申请退款：&#123;&#125;&quot;, refund);</span><br><br>            <span class="hljs-comment">// 拒单需要退款，根据订单id更新订单状态、拒单原因、取消时间</span><br>            orders.setId(ordersDB.getId());<br>            orders.setStatus(Orders.CANCELLED);<br>            orders.setRejectionReason(ordersRejectionDTO.getRejectionReason());<br>            orders.setCancelTime(LocalDateTime.now());<br>        &#125;<br><br>        orderMapper.update(orders);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="5-商家端取消订单接口出错"><a href="#5-商家端取消订单接口出错" class="headerlink" title="5. 商家端取消订单接口出错"></a>5. 商家端取消订单接口出错</h2><ul><li>在Service层实现类<strong>OrderServiceImpl</strong>中</li><li>与上面拒单接口出错原因一样，修改的步骤也一样，直接放修改后的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消订单</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ordersCancelDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(OrdersCancelDTO ordersCancelDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 根据id查询订单</span><br>        <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(ordersCancelDTO.getId());<br><br>        <span class="hljs-comment">//支付状态</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">payStatus</span> <span class="hljs-operator">=</span> ordersDB.getPayStatus();<br>        <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>        <span class="hljs-keyword">if</span> (payStatus == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">//            //用户已支付，需要退款</span><br><span class="hljs-comment">//            String refund = weChatPayUtil.refund(</span><br><span class="hljs-comment">//                    ordersDB.getNumber(),</span><br><span class="hljs-comment">//                    ordersDB.getNumber(),</span><br><span class="hljs-comment">//                    new BigDecimal(0.01),</span><br><span class="hljs-comment">//                    new BigDecimal(0.01));</span><br><span class="hljs-comment">//            log.info(&quot;申请退款：&#123;&#125;&quot;, refund);</span><br><br><br>            <span class="hljs-comment">// 管理端取消订单需要退款，根据订单id更新订单状态、取消原因、取消时间</span><br>            orders.setId(ordersCancelDTO.getId());<br>            orders.setStatus(Orders.CANCELLED);<br>            orders.setCancelReason(ordersCancelDTO.getCancelReason());<br>            orders.setCancelTime(LocalDateTime.now());<br>        &#125;<br>        orderMapper.update(orders);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="6-用户下单提醒功能出错"><a href="#6-用户下单提醒功能出错" class="headerlink" title="6. 用户下单提醒功能出错"></a>6. 用户下单提醒功能出错</h2><p>按照视频教学添加的代码无法完成用户下单后，商家端界面提醒的功能</p><ul><li><strong>原因</strong>：我们跳过微信支付功能，导致也跳过了PayNotifyController接口功能，所以<strong>在OrderServiceImpl类中的paySuccess方法从始至终都不会被调用</strong>，我们添加的代码自然也不会实现。</li><li><strong>解决方法</strong>：将用户下单提醒功能代码添加到<strong>OrderServiceImpl类中的payment方法</strong>即可</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">// 消息类型，1表示来单提醒</span><br><span class="hljs-comment">//获取订单id</span><br>Orders orders=orderMapper.getByNumberAndUserId(orderNumber, userId);<br>map.put(<span class="hljs-string">&quot;orderId&quot;</span>, orders.getId());<br>map.put(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-string">&quot;订单号：&quot;</span> + orderNumber);<br><br><span class="hljs-comment">// 通过WebSocket实现来单提醒，向客户端浏览器推送消息</span><br>webSocketServer.sendToAllClient(JSON.toJSONString(map));<br>log.info(<span class="hljs-string">&quot;来单提醒：&#123;&#125;&quot;</span>, JSON.toJSONString(map));<br></code></pre></td></tr></table></figure><p><strong>添加位置如下</strong>：</p><p><img src="/img/blogs/java/cangqiongtakeout/solve.4.png"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>javase</tag>
      
      <tag>苍穹外卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习笔记</title>
    <link href="/2025/02/23/DeveloperTools/git/"/>
    <url>/2025/02/23/DeveloperTools/git/</url>
    
    <content type="html"><![CDATA[<h1 align="center">Git学习笔记</h1><h1 id="1-git介绍"><a href="#1-git介绍" class="headerlink" title="1. git介绍"></a>1. git介绍</h1><p>Git是一个分布式版本控制工具，用于管理开发过程中的源代码文件(Java类、xml文件、html页面等)</p><ul><li>Git仓库分为两种：<ul><li>本地仓库: 开发人员自己电脑上的Git仓库</li><li>远程仓库: 远程服务器上的Git仓库</li></ul></li></ul><p><img src="/img/blogs/git/1.1.png"></p><ul><li>commit:提交,将本地文件和版本信息保存到本地仓库</li><li>push:推送,将本地仓库文件和版本信息上传到远程仓库</li><li>pull:拉取,将远程仓库文件和版本信息下载到本地仓库</li></ul><h1 id="2-Git代码托管服务"><a href="#2-Git代码托管服务" class="headerlink" title="2. Git代码托管服务"></a>2. Git代码托管服务</h1><p>Git存在两种类型的仓库(本地仓库和远程仓库),借助互联网上提供的一些代码托管服务实现搭建Git远程仓库</p><ul><li>使用gitee作为代码托管服务<br><a href="https://gitee.com/">gitee</a></li></ul><h1 id="3-Git常用命令"><a href="#3-Git常用命令" class="headerlink" title="3. Git常用命令"></a>3. Git常用命令</h1><h2 id="3-1-Git全局设置"><a href="#3-1-Git全局设置" class="headerlink" title="3.1 Git全局设置"></a>3.1 Git全局设置</h2><h3 id="3-1-1-配置用户名和邮箱"><a href="#3-1-1-配置用户名和邮箱" class="headerlink" title="3.1.1 配置用户名和邮箱"></a>3.1.1 配置用户名和邮箱</h3><p>在Git命令行中执行下面命令:</p><ul><li>设置用户信息(用户名和邮箱随意设置)<ul><li><code>git config --global user.name &quot;ranzier&quot;</code></li><li><code>git config --global user.email &quot;ranzier@la.com&quot;</code></li></ul></li><li>查看配置信息<ul><li><code>git config --list</code></li></ul></li></ul><h3 id="3-1-2-获取Git仓库–从远程仓库克隆"><a href="#3-1-2-获取Git仓库–从远程仓库克隆" class="headerlink" title="3.1.2 获取Git仓库–从远程仓库克隆"></a>3.1.2 获取Git仓库–从远程仓库克隆</h3><ol><li>在本地初始化一个Git仓库(不常用)</li><li>从远程仓库克隆(常用)</li></ol><p>命令：<code>git clone [远程仓库地址]</code></p><h2 id="3-2-Git一些概念"><a href="#3-2-Git一些概念" class="headerlink" title="3.2 Git一些概念"></a>3.2 Git一些概念</h2><h3 id="3-2-1-工作区、版本库、暂存区概念"><a href="#3-2-1-工作区、版本库、暂存区概念" class="headerlink" title="3.2.1 工作区、版本库、暂存区概念"></a>3.2.1 工作区、版本库、暂存区概念</h3><ul><li>版本库: 前面看到的.git隐藏文件夹就是版本库,版本库中存储了很多配置信息、日志信息和文件版本信息等</li><li>工作区: 包含.git文件夹的目录就是工作区,也称为工作目录,主要用于存放开发的代码</li><li>暂存区: .git文件夹中有很多文件,其中有一个index文件就是暂存区,也可以叫做stage。暂存区是一个临时保存修改文件的地方</li></ul><p><img src="/img/blogs/git/3.1.png"></p><h3 id="3-2-2-Git工作区中文件的状态"><a href="#3-2-2-Git工作区中文件的状态" class="headerlink" title="3.2.2 Git工作区中文件的状态"></a>3.2.2 Git工作区中文件的状态</h3><p>Git工作区中的文件存在两种状态:</p><ul><li>untracked未跟踪(未被纳入版本控制)</li><li>tracked已跟踪(被纳入版本控制)<ol><li>Unmodified 未修改状态</li><li>Modified已修改状态</li><li>Staged已暂存状态</li></ol></li></ul><h2 id="3-3-本地仓库操作"><a href="#3-3-本地仓库操作" class="headerlink" title="3.3 本地仓库操作"></a>3.3 本地仓库操作</h2><p>本地仓库常用命令如下:</p><ul><li>git status: 查看文件状态</li><li>git add: 将文件的修改加入暂存区</li><li>git reset: 将暂存区的文件取消暂存或者是切换到指定版本</li><li>git commit: 将暂存区的文件修改提交到版本库</li><li>git log: 查看日志</li></ul><h2 id="3-4-远程仓库操作"><a href="#3-4-远程仓库操作" class="headerlink" title="3.4 远程仓库操作"></a>3.4 远程仓库操作</h2><ul><li>git remote  查看远程仓库</li><li>git remote add   添加远程仓库</li><li>git clone   从远程仓库克隆</li><li>git pull  从远程仓库拉取</li><li>git push  推送到远程仓库</li></ul><ol><li><p>添加远程仓库</p><ul><li>运行<code>git remote add &lt;shortname&gt; &lt;url&gt;</code>添加一个新的远程Git仓库,同时指定一个可以引用的简写。</li></ul></li><li><p>从远程仓库拉取</p><ul><li><code>git pull</code>命令的作用是从远程仓库获取最新版本并合并到本地仓库,命令格式:<code>git pull [short-name] [branch-name]</code></li></ul></li></ol><h2 id="3-5-分支操作"><a href="#3-5-分支操作" class="headerlink" title="3.5 分支操作"></a>3.5 分支操作</h2><ul><li>使用分支意味着你可以把你的工作从开发主线上分离开来,以免影响开发主线。</li><li>同一个仓库可以有多个分支,各个分支相互独立,互不干扰。</li><li>通过<strong>git init</strong>命令创建本地仓库时默认会创建一个<strong>master分支</strong>。</li></ul><p>分支命令</p><ul><li><p>git branch  查看分支</p></li><li><p>git branch [name] 创建分支</p></li><li><p>git checkout [name] 切换分支</p></li><li><p>git push [shortName] [name] 推送至远程仓库分支</p></li><li><p>git merge [name]  合并分支</p></li><li><p>查看分支</p><ul><li>git branch  列出所有本地分支</li><li>git branch -r 列出所有远程分支</li><li>git branch -a 列出所有本地分支和远程分支</li></ul></li></ul><h2 id="3-6-标签操作"><a href="#3-6-标签操作" class="headerlink" title="3.6 标签操作"></a>3.6 标签操作</h2><ul><li>Git中的标签,指的是<code>某个分支某个特定时间点的状态</code>。通过标签,可以很方便的切换到标记时的状态。</li><li>比较有代表性的是人们会使用这个功能来标记发布结点(v1.0、v1.2等)。</li></ul><p>标签命令：</p><ul><li>git tag 列出已有的标签</li><li>git tag [name]  创建标签</li><li>git push [shortName] [name] 将标签推送至远程仓库</li><li>git checkout -b [branch] [name] 检出标签</li></ul><h1 id="4-在IDEA中使用Git"><a href="#4-在IDEA中使用Git" class="headerlink" title="4. 在IDEA中使用Git"></a>4. 在IDEA中使用Git</h1><p><a href="https://jhguo.blog.csdn.net/article/details/128949057?spm=1001.2014.3001.5502">在IDEA中使用Git</a></p>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>开发工具</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb学习笔记</title>
    <link href="/2025/02/22/JAVA/javaweb/"/>
    <url>/2025/02/22/JAVA/javaweb/</url>
    
    <content type="html"><![CDATA[<h1 align="center">JavaWeb学习笔记</h1><h1 id="一-前端开发"><a href="#一-前端开发" class="headerlink" title="一. 前端开发"></a>一. 前端开发</h1><h2 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1. HTML"></a>1. HTML</h2><p><a href="https://ranzier.github.io/2024/10/31/FrontEnd/HTML%E7%AC%94%E8%AE%B0/">HTML学习笔记</a></p><h2 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2. CSS"></a>2. CSS</h2><p><a href="https://ranzier.github.io/2024/10/31/FrontEnd/CSS%E7%AC%94%E8%AE%B0/">CSS学习笔记</a></p><h2 id="3-JavaScript"><a href="#3-JavaScript" class="headerlink" title="3. JavaScript"></a>3. JavaScript</h2><p><a href="https://ranzier.github.io/2024/12/18/FrontEnd/JS%E7%AC%94%E8%AE%B0/">JavaScript学习笔记</a></p><h2 id="4-Vue"><a href="#4-Vue" class="headerlink" title="4. Vue"></a>4. Vue</h2><h4 id="A-Vue简介"><a href="#A-Vue简介" class="headerlink" title="A. Vue简介"></a>A. Vue简介</h4><p>Vue是一套前端<strong>框架</strong>，免除JS的DOM操作，简化书写</p><ul><li>新建HTML页面,引入Vue.js文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在JS代码区域,创建Vue核心对象,定义数据模型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello Vue!&quot;</span><br>            &#125;<br>        &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>编写视图</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    &#123;&#123; message &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="B-Vue常用指令"><a href="#B-Vue常用指令" class="headerlink" title="B. Vue常用指令"></a>B. Vue常用指令</h4><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值,如设置href,css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if&#x2F;v-else-if&#x2F;v-else</td><td>条件性的渲染某元素,判定为true时渲染,否则不渲染</td></tr><tr><td>v-show</td><td>根据条件展示某元素,区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>列表渲染,遍历容器的元素或者对象的属性</td></tr></tbody></table><ol><li><p><strong>v-bind</strong>：用来绑定 HTML 标签的属性，比如动态改变 <code>href</code>，<code>src</code>，<code>class</code>，<code>style</code> 等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>v-model</strong>：用于在表单元素上实现双向数据绑定，通常用于 <code>input</code>、<code>textarea</code> 或 <code>select</code> 元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>v-on</strong>：绑定事件处理程序，可以监听用户的交互操作，如点击、鼠标移入等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;submitForm&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>v-if&#x2F;v-else-if&#x2F;v-else</strong>：用于条件渲染，如果条件为真，渲染元素，否则不渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isVisible&quot;</span>&gt;</span>这是一个条件渲染的段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>v-show</strong>：与 <code>v-if</code> 类似，不过 <code>v-show</code> 不会移除 DOM 元素，而是通过控制 <code>display</code> 样式来显示或隐藏元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isVisible&quot;</span>&gt;</span>这段内容根据条件展示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>v-for</strong>：用于列表渲染，遍历数组或对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="C-Vue生命周期"><a href="#C-Vue生命周期" class="headerlink" title="C. Vue生命周期"></a>C. Vue生命周期</h4><p>Vue的生命周期指Vue对象创建和销毁的过程<br><code>mounted</code>: 挂载完成，Vue初始化成功，HTML页面渲染成功(发送请求到服务端，加载数据)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Vue挂载完毕,发送请求获取数据&quot;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-Ajax"><a href="#5-Ajax" class="headerlink" title="5. Ajax"></a>5. Ajax</h2><h4 id="A-介绍"><a href="#A-介绍" class="headerlink" title="A. 介绍"></a>A. 介绍</h4><p>Asynchronous JavaScript And XML(异步的JavaScript和XML)<br><strong>作用</strong></p><ul><li>数据交换: 通过Ajax可以向服务器发送请求和接收服务器响应的数据</li><li>异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分页面的技术。如搜索联想功能</li></ul><h4 id="B-Axios"><a href="#B-Axios" class="headerlink" title="B. Axios"></a>B. Axios</h4><p>对原生的Ajax进行封装，简化书写，快速开发</p><ol><li>引入Axios的JS文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用Axios发送请求，并获取响应结果</li></ol><ul><li>axios.get(url [, config])</li><li>axios.delete(url [, config])</li><li>axios.post(url [, data[, config]])</li><li>axios.put(url [, data[, config]])</li></ul><p><strong>发送GET请求</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">axios.get(&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;).then((result) =&gt; &#123;<br>    console.log(result.data);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>发送POST请求</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">axios.post(&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteByld&quot;,&quot;id=1&quot;).then((result) =&gt; &#123;<br>    console.log(result.data);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="6-前端工程化"><a href="#6-前端工程化" class="headerlink" title="6. 前端工程化"></a>6. 前端工程化</h2><h4 id="A-YAPI-接口文档管理平台"><a href="#A-YAPI-接口文档管理平台" class="headerlink" title="A. YAPI(接口文档管理平台)"></a>A. YAPI(接口文档管理平台)</h4><p><a href="https://yapi.pro/">YAPI官网</a></p><h4 id="B-Vue项目创建"><a href="#B-Vue项目创建" class="headerlink" title="B. Vue项目创建"></a>B. Vue项目创建</h4><p>新建一个文件夹，在该文件夹中打开cmd，输入<code>vue ui</code><br><a href="https://blog.csdn.net/Monsters___/article/details/126552454?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522c9c78d176b906f788231ea91150061aa%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=c9c78d176b906f788231ea91150061aa&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-126552454-null-null.142%5Ev101%5Epc_search_result_base2&utm_term=vue%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA&spm=1018.2226.3001.4187">创建vue项目</a></p><h4 id="C-Element"><a href="#C-Element" class="headerlink" title="C. Element"></a>C. Element</h4><p><a href="https://element.eleme.cn/#/zh-CN">Element官网</a><br>Vue组件库，用于创建更好看的组件(下图右边是基于Element)</p><p><img src="/img/blogs/java/javaweb/1.6.1.png"></p><h5 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h5><ul><li><p>安装ElementUI组件库(在当前工程的目录下),在命令行执行指令:<br><code>npm install element-ui@2.15.3</code></p></li><li><p>引入ElementUI组件库</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br></code></pre></td></tr></table></figure><ul><li>访问官网，复制组件代码，调整</li></ul><h5 id="2-常用组件"><a href="#2-常用组件" class="headerlink" title="2. 常用组件"></a>2. 常用组件</h5><ul><li><p>Table表格<br><a href="https://element.eleme.cn/#/zh-CN/component/table">表格</a></p></li><li><p>pagination分页<br><a href="https://element.eleme.cn/#/zh-CN/component/pagination">分页</a></p></li><li><p>Dialog对话框<br><a href="https://element.eleme.cn/#/zh-CN/component/dialog">对话框</a></p></li><li><p>Form表单<br><a href="https://element.eleme.cn/#/zh-CN/component/form">表单</a></p></li></ul><h4 id="D-Vue路由"><a href="#D-Vue路由" class="headerlink" title="D. Vue路由"></a>D. Vue路由</h4><p>前端路由：URL中的hash(#号)与组件之间的对应关系</p><ul><li><code>VueRouter</code>:路由器类,根据路由请求在路由视图中动态渲染选中的组件</li><li><code>&lt;router-link&gt;</code>:请求链接组件,浏览器会解析成<code>&lt;a&gt;</code></li><li><code>&lt;router-view&gt;</code>:动态视图组件,用来渲染展示与路由路径对应的组件</li></ul><h4 id="E-打包部署"><a href="#E-打包部署" class="headerlink" title="E. 打包部署"></a>E. 打包部署</h4><p><a href="https://nginx.org/">nginx官网</a></p><h1 id="二-Maven"><a href="#二-Maven" class="headerlink" title="二. Maven"></a>二. Maven</h1><p>是管理和构建java项目的工具<br><a href="https://maven.apache.org/">Maven官网</a></p><h2 id="1-Maven介绍"><a href="#1-Maven介绍" class="headerlink" title="1. Maven介绍"></a>1. Maven介绍</h2><p><img src="/img/blogs/java/javaweb/2.1.1.png"></p><h2 id="2-在idea中创建Maven项目和导入Maven项目"><a href="#2-在idea中创建Maven项目和导入Maven项目" class="headerlink" title="2. 在idea中创建Maven项目和导入Maven项目"></a>2. 在idea中创建Maven项目和导入Maven项目</h2><p><strong>创建</strong><br><img src="/img/blogs/java/javaweb/2.2.1.png"></p><p><strong>导入</strong><br><img src="/img/blogs/java/javaweb/2.2.2.png"></p><h2 id="3-依赖管理"><a href="#3-依赖管理" class="headerlink" title="3. 依赖管理"></a>3. 依赖管理</h2><p>依赖：就指项目运行所需要的jar包，一个项目可以引入多个依赖</p><h4 id="A-依赖配置-导入jar包"><a href="#A-依赖配置-导入jar包" class="headerlink" title="A. 依赖配置(导入jar包)"></a>A. 依赖配置(导入jar包)</h4><ol><li>在pom.xml中编写<code>&lt;dependencies&gt;</code>标签</li><li>在<code>&lt;dependencies&gt;</code>标签中 使用<code>&lt;dependency&gt;</code>引入坐标</li><li>定义坐标的 groupld,artifactld, version</li><li>点击刷新按钮,引入最新加入的坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="B-依赖传递和排除依赖"><a href="#B-依赖传递和排除依赖" class="headerlink" title="B. 依赖传递和排除依赖"></a>B. 依赖传递和排除依赖</h4><p>依赖具有传递性<br><img src="/img/blogs/java/javaweb/2.3.1.png"></p><p><strong>排除依赖</strong><br>使用<code>&lt;exclusions&gt;&lt;/exclusions&gt;</code>标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="C-依赖范围"><a href="#C-依赖范围" class="headerlink" title="C. 依赖范围"></a>C. 依赖范围</h4><p>依赖的jar包，在默认情况下，可以在任何地方使用<br>可以通过<code>&lt;scope&gt;&lt;/scope&gt;</code>设置其作用范围</p><table><thead><tr><th>scope值</th><th>主程序(main)</th><th>测试程序(test)</th><th>打包(运行)</th><th>示例</th></tr></thead><tbody><tr><td>compile(默认)</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>N</td><td>Y</td><td>N</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>N</td><td>servlet-api</td></tr><tr><td>runtime</td><td>N</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><h4 id="D-生命周期"><a href="#D-生命周期" class="headerlink" title="D. 生命周期"></a>D. 生命周期</h4><p>Maven中有3套相互独立的生命周期:</p><ul><li>clean:清理工作。</li><li>default:核心工作,如:编译、测试、打包、安装、部署等。</li><li>site:生成报告、发布站点等。</li></ul><h1 id="三-Web入门"><a href="#三-Web入门" class="headerlink" title="三. Web入门"></a>三. Web入门</h1><h2 id="1-SpringBootWeb入门"><a href="#1-SpringBootWeb入门" class="headerlink" title="1. SpringBootWeb入门"></a>1. SpringBootWeb入门</h2><ol><li>创建springboot工程，勾选spring web<br><img src="/img/blogs/java/javaweb/3.1.1.png"></li></ol><p><img src="/img/blogs/java/javaweb/3.1.2.png"></p><ol start="2"><li>创建请求处理类HelloController,添加请求处理方法hello,添加注释</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloControll</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello-world&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span> <span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World ~&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World ~&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的启动类必须是请求处理类的父包</p><ol start="3"><li>运行启动类，打开浏览器测试<br>打开localhost:8080&#x2F;hello-world端口</li></ol><h2 id="2-HTTP协议"><a href="#2-HTTP协议" class="headerlink" title="2. HTTP协议"></a>2. HTTP协议</h2><h4 id="A-介绍-1"><a href="#A-介绍-1" class="headerlink" title="A. 介绍"></a>A. 介绍</h4><p>Hyper Text Transfer Protocol(超文本传输协议)<br>规定浏览器和服务器之间数据传输的规则</p><ul><li>基于TCP协议</li><li>基于请求-响应模型</li><li>是无状态的协议：每次请求-响应都是独立的</li></ul><h4 id="B-请求协议"><a href="#B-请求协议" class="headerlink" title="B. 请求协议"></a>B. 请求协议</h4><p><img src="/img/blogs/java/javaweb/3.2.1.png"></p><h4 id="C-响应协议"><a href="#C-响应协议" class="headerlink" title="C. 响应协议"></a>C. 响应协议</h4><p><img src="/img/blogs/java/javaweb/3.2.2.png"></p><p><img src="/img/blogs/java/javaweb/3.2.3.png"></p><p><img src="/img/blogs/java/javaweb/3.2.4.png"></p><h2 id="3-WEB服务器-Tomcat"><a href="#3-WEB服务器-Tomcat" class="headerlink" title="3. WEB服务器-Tomcat"></a>3. WEB服务器-Tomcat</h2><p>一个轻量级的WEB服务器，是一个软件程序，对HTTP协议的操作进行封装，也称为web容器、servlet容器</p><h2 id="4-请求响应"><a href="#4-请求响应" class="headerlink" title="4. 请求响应"></a>4. 请求响应</h2><h4 id="A-请求"><a href="#A-请求" class="headerlink" title="A. 请求"></a>A. 请求</h4><h5 id="1-简单参数"><a href="#1-简单参数" class="headerlink" title="1. 简单参数"></a>1. 简单参数</h5><p>SpringBoot方式：参数名与形参变量名相同，定义形参即可接收参数,会自动进行类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(String name , Integer age)</span> &#123;<br>    System.out.println(name + <span class="hljs-string">&quot; : &quot;</span> + age);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>@RequestParam注解</p><ul><li>方法形参名称与请求参数名称不匹配,通过该注解完成映射</li><li>该注解的require属性默认是true,代表请求参数必须传递</li></ul><h5 id="2-实体参数"><a href="#2-实体参数" class="headerlink" title="2. 实体参数"></a>2. 实体参数</h5><p><strong>简单实体对象</strong>：请求参数名和形参对象属性名相同，定义POJO接收即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/simplePojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simplePojo</span><span class="hljs-params">(User user)</span>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建user类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p>postman中：GET: <code>http://localhost:8080/simpleParam?name=abc&amp;age=111</code></p><p><strong>复杂实体对象</strong>：请求参数名和形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Address address;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span>&#123;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br>&#125;<br></code></pre></td></tr></table></figure><p>postman中:GET:<code>http://localhost:8080/simpleParam?name=abc&amp;age=111&amp;address.province=北京&amp;address.city=北京</code></p><h5 id="3-数组集合参数"><a href="#3-数组集合参数" class="headerlink" title="3. 数组集合参数"></a>3. 数组集合参数</h5><p><strong>数组参数</strong>：请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/arrayParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">arrayParam</span><span class="hljs-params">(String[] hobby)</span>&#123;<br>    System.out.println(Arrays.toString(hobby));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>postman中:GET: <code>http://localhost:8080/arrayParam?hobby=game&amp;hobby=java</code></p><p><strong>集合参数</strong>：请求参数名与形参中数组变量名相同，通过@RequestParam绑定参数关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/listParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">listParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;String&gt; hobby)</span> &#123;<br>    System.out.println(hobby);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>postman中:GET: <code>http://localhost:8080/listParam?hobby=game&amp;hobby=java&amp;hobby=sing</code></p><h5 id="4-日期参数"><a href="#4-日期参数" class="headerlink" title="4. 日期参数"></a>4. 日期参数</h5><p>使用@DateTimeFormat注解完成日期参数格式转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/dateParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dateParam</span><span class="hljs-params">(<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span> &#123;<br>    System.out.println(updateTime);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>postman中:GET:<code>http://localhost:8080/dateParam?updateTime=2025-1-1 13:14:05</code></p><h5 id="5-json参数"><a href="#5-json参数" class="headerlink" title="5. json参数"></a>5. json参数</h5><p><strong>JSON参数</strong>：JSON数据键名与形参对象属性名相同,定义POJO类型形参即可接收参数,需要使用@RequestBody标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jsonParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jsonParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>postman中:GET:<code>http://localhost:8080/jsonParam</code></p><h5 id="6-路径参数"><a href="#6-路径参数" class="headerlink" title="6. 路径参数"></a>6. 路径参数</h5><p><strong>路径参数</strong>：通过请求URL直接传递参数,使用{ .. }来标识该路径参数,需要使用@PathVariable获取路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">pathParam</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>    System.out.println(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>postman中:GET:<code>http://localhost:8080/path/1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">pathParam2</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id, <span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>    System.out.println(id+<span class="hljs-string">&quot; : &quot;</span> +name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>postman中:GET:<code>http://localhost:8080/path/1/abc</code></p><h4 id="B-响应"><a href="#B-响应" class="headerlink" title="B. 响应"></a>B. 响应</h4><h5 id="1-ResponseBody"><a href="#1-ResponseBody" class="headerlink" title="1. @ResponseBody"></a>1. @ResponseBody</h5><ul><li>类型:方法注解、类注解</li><li>位置:Controller方法上&#x2F;类上</li><li>作用:将方法返回值直接响应,如果返回值类型是<strong>实体对象&#x2F;集合</strong>,将会转换为<strong>JSON格式</strong>响应</li><li>说明:@RestController&#x3D;@Controller+@ResponseBody;</li></ul><h5 id="2-统一响应结果"><a href="#2-统一响应结果" class="headerlink" title="2. 统一响应结果"></a>2. 统一响应结果</h5><p><code>Result(code,msg,data)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br>    <span class="hljs-comment">//响应码,1代表成功;0代表失败</span><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-comment">//提示信息</span><br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-comment">//返回的数据</span><br>    <span class="hljs-keyword">private</span> Object data;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-分层解耦"><a href="#5-分层解耦" class="headerlink" title="5. 分层解耦"></a>5. 分层解耦</h2><p><a href="https://blog.csdn.net/qq_41071754/article/details/129903630?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522887c301fb2e8bb5eab3e420bd5cd0932%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=887c301fb2e8bb5eab3e420bd5cd0932&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-129903630-null-null.142%5Ev101%5Epc_search_result_base2&utm_term=javaweb%E7%9A%84%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6&spm=1018.2226.3001.4187">别人的笔记</a></p><h4 id="A-三层架构"><a href="#A-三层架构" class="headerlink" title="A. 三层架构"></a>A. 三层架构</h4><p><img src="/img/blogs/java/javaweb/3.5.1.png"></p><p><img src="/img/blogs/java/javaweb/3.5.2.png"></p><h4 id="B-解耦"><a href="#B-解耦" class="headerlink" title="B. 解耦"></a>B. 解耦</h4><ul><li><p>内聚:软件中各个功能模块内部的功能联系。</p></li><li><p>耦合:衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</p></li><li><p>高内聚低耦合</p></li><li><p>控制反转:Inversion Of Control,简称IOC。<strong>对象的创建控制权由程序自身转移到外部(容器)</strong>,这种思想称为控制反转。</p></li><li><p>依赖注入:Dependency Injection,简称DI。<strong>容器为应用程序提供运行时,所依赖的资源</strong>称之为依赖注入。</p></li><li><p>Bean对象:<strong>IOC容器中创建、管理的对象</strong>,称之为bean。</p></li></ul><h4 id="C-IOC控制反转"><a href="#C-IOC控制反转" class="headerlink" title="C. IOC控制反转"></a>C. IOC控制反转</h4><p>Bean的声明<br>要把某个对象交给IOC容器管理，需要在对应的类上加上以下注解之一：</p><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Componert</td><td>声明bean的基础注解</td><td>不属于以下三类时,用此注解</td></tr><tr><td>@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td>@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td>@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上(由于与mybatis整合,用的少)</td></tr></tbody></table><p>注意事项：</p><ul><li><p>声明bean的时候,可以通过value属性指定bean的名字,如果没有指定,默认为类名首字母小写。</p></li><li><p>使用以上四个注解都可以声明bean,但是在springboot集成web开发中,声明控制器bean只能用@Controller。</p></li><li><p>@SpringBootApplication具有包扫描作用，默认扫描当前包及其子包</p></li></ul><h4 id="D-DI依赖注入"><a href="#D-DI依赖注入" class="headerlink" title="D. DI依赖注入"></a>D. DI依赖注入</h4><ul><li>@Autowired:默认按照类型自动装配。</li><li>如果同类型的bean存在多个:<ul><li>@Primary</li><li>@Autowired+@Qualifier(“bean的名称”)</li><li>@Resource(name&#x3D;”bean的名称”)</li></ul></li><li>@Resource 与 @Autowired区别<ul><li>@Autowired 是spring框架提供的注解,而@Resource是JDK提供的注解。</li><li>@Autowired 默认是按照类型注入,而@Resource默认是按照名称注入。</li></ul></li></ul><h1 id="四-MySQL数据库"><a href="#四-MySQL数据库" class="headerlink" title="四. MySQL数据库"></a>四. MySQL数据库</h1><h2 id="1-数据库概述"><a href="#1-数据库概述" class="headerlink" title="1. 数据库概述"></a>1. 数据库概述</h2><h4 id="A-数据库介绍"><a href="#A-数据库介绍" class="headerlink" title="A. 数据库介绍"></a>A. 数据库介绍</h4><ul><li>数据库：DataBase(DB),是存储和管理数据的仓库</li><li>数据库管理系统:DataBase Management System(DBMS),操纵和管理数据库的大型软件。</li><li>SQL: Structured Query Language,操作关系型数据库的编程语言,定义了一套操作关系型数据库统一标准。</li></ul><p>mysql启动：<code>net start mysql</code><br>mysql关闭: <code>net stop mysql</code><br>mysql连接：<code>mysql -u用户名 -p密码 /mysql -h数据库服务器IP地址 -P端口号</code><br><code>mysql -uroot -p123456 / mysql -h192.168.150.101 -P3306 -uroot -p123456</code></p><h4 id="B-MySQL数据模型和SQL简介"><a href="#B-MySQL数据模型和SQL简介" class="headerlink" title="B. MySQL数据模型和SQL简介"></a>B. MySQL数据模型和SQL简介</h4><h5 id="1-MySQL数据模型"><a href="#1-MySQL数据模型" class="headerlink" title="1. MySQL数据模型"></a>1. MySQL数据模型</h5><p>关系型数据库：建立在关系模型基础上，由多张相互连接的<strong>二维表</strong>组成的数据库</p><h5 id="2-SQL简介"><a href="#2-SQL简介" class="headerlink" title="2. SQL简介"></a>2. SQL简介</h5><ul><li>SQL语句可以单行或多行书写,以<strong>分号</strong>结尾。</li><li>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</li><li>MySQL数据库的SQL语句<strong>不区分大小写</strong>。</li><li>注释:<br>  单行注释: <code>-- 注释内容</code>或<code>#注释内容</code>(MySQL特有)<br>  多行注释:&#x2F;* 注释内容 *&#x2F;</li></ul><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言,用来定义数据库对象(数据库,表,字段)</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言,用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言,用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言,用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h2 id="2-DDL语句"><a href="#2-DDL语句" class="headerlink" title="2. DDL语句"></a>2. DDL语句</h2><p>数据定义语言</p><h4 id="A-操作数据库"><a href="#A-操作数据库" class="headerlink" title="A. 操作数据库"></a>A. 操作数据库</h4><ul><li>查询所有数据库：<code>show databases;</code></li><li>查询当前数据库：<code>select database();</code></li><li>使用数据库:<code>use 数据库名;</code></li><li>创建数据库:<code>create database [if not exists] 数据库名;</code></li><li>删除数据库:<code>drop database[if exists] 数据库名;</code></li></ul><h4 id="B-表操作-创建"><a href="#B-表操作-创建" class="headerlink" title="B. 表操作-创建"></a>B. 表操作-创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> 表名(<br>    字段<span class="hljs-number">1</span> 字段类型[约束][comment 字段<span class="hljs-number">1</span>注释],<br>    ...<br>    字段n 字段类型[约束][comment 字段n注释]<br>)[comment 表注释];<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> tb_user<br>(<br>    id       <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;ID,唯一标识&#x27;</span>,<br>    username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    name     <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age      <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    gender   <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;性别&#x27;</span><br>)comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="C-约束"><a href="#C-约束" class="headerlink" title="C. 约束"></a>C. 约束</h4><ul><li>概念:约束是作用于表中字段上的规则,用于限制存储在表中的数据。</li><li>目的:保证数据库中数据的正确性、有效性和完整性。</li></ul><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段值不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识,要求非空且唯一</td><td>primary key</td></tr><tr><td>默认约束</td><td>保存数据时,如果未指定该字段值,则采用默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表的数据建立连接,保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> tb_user<br>(<br>    id       <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span> comment <span class="hljs-string">&#x27;ID,唯一标识&#x27;</span>,<br>    username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not null</span> <span class="hljs-keyword">unique</span> comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    name     <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age      <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    gender   <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;男&#x27;</span> comment <span class="hljs-string">&#x27;性别&#x27;</span><br>)comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="D-数据类型"><a href="#D-数据类型" class="headerlink" title="D. 数据类型"></a>D. 数据类型</h4><p>三大类数据类型：<code>数值类型</code>,<code>字符串类型</code>,<code>日期类型</code></p><p><strong>数值类型</strong></p><table><thead><tr><th>类型</th><th>描述</th><th>存储大小</th><th>取值范围</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>小整数</td><td>1字节</td><td>-128 到 127（有符号） &#x2F; 0 到 255（无符号）</td></tr><tr><td><code>SMALLINT</code></td><td>较小的整数</td><td>2字节</td><td>-32,768 到 32,767（有符号） &#x2F; 0 到 65,535（无符号）</td></tr><tr><td><code>MEDIUMINT</code></td><td>中等大小的整数</td><td>3字节</td><td>-8,388,608 到 8,388,607（有符号） &#x2F; 0 到 16,777,215（无符号）</td></tr><tr><td><code>INT</code></td><td>标准整数</td><td>4字节</td><td>-2,147,483,648 到 2,147,483,647（有符号） &#x2F; 0 到 4,294,967,295（无符号）</td></tr><tr><td><code>BIGINT</code></td><td>大整数</td><td>8字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807（有符号） &#x2F; 0 到 18,446,744,073,709,551,615（无符号）</td></tr><tr><td><code>FLOAT</code></td><td>单精度浮动点数</td><td>4字节</td><td>-3.402823466E+38 到 3.402823466E+38（可选精度）</td></tr><tr><td><code>DOUBLE</code></td><td>双精度浮动点数</td><td>8字节</td><td>-1.7976931348623157E+308 到 1.7976931348623157E+308</td></tr><tr><td><code>DECIMAL</code></td><td>精确的定点数（用于高精度运算）</td><td>根据定义大小</td><td>精确存储数字，指定精度和小数位数，例如 <code>DECIMAL(10,2)</code></td></tr></tbody></table><p><strong>日期和时间类型</strong></p><table><thead><tr><th>类型</th><th>描述</th><th>存储大小</th><th>取值范围</th></tr></thead><tbody><tr><td><code>DATE</code></td><td>存储日期（年-月-日）</td><td>3字节</td><td>‘1000-01-01’ 到 ‘9999-12-31’</td></tr><tr><td><code>TIME</code></td><td>存储时间（时:分:秒）</td><td>3字节</td><td>‘-838:59:59’ 到 ‘838:59:59’</td></tr><tr><td><code>DATETIME</code></td><td>存储日期和时间（年-月-日 时:分:秒）</td><td>8字节</td><td>‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td></tr><tr><td><code>TIMESTAMP</code></td><td>存储日期和时间，自动记录插入&#x2F;更新时的时间</td><td>4字节</td><td>‘1970-01-01 00:00:01’ 到 ‘2038-01-19 03:14:07’</td></tr><tr><td><code>YEAR</code></td><td>存储年份（四位数）</td><td>1字节</td><td>1901 到 2155</td></tr></tbody></table><p><strong>字符串类型</strong></p><table><thead><tr><th>类型</th><th>描述</th><th>存储大小</th><th>取值范围</th></tr></thead><tbody><tr><td><code>CHAR(n)</code></td><td>固定长度字符串</td><td>n 字节（固定长度）</td><td>存储 n 个字符（最大 255）</td></tr><tr><td><code>VARCHAR(n)</code></td><td>可变长度字符串</td><td>n 字节（实际长度）</td><td>存储 n 个字符（最大 65,535）</td></tr><tr><td><code>TEXT</code></td><td>长文本（适用于较大的文本数据）</td><td>2 字节 + 数据长度</td><td>最大 65,535 个字符</td></tr><tr><td><code>TINYTEXT</code></td><td>极小文本（适用于较小的文本数据）</td><td>1 字节 + 数据长度</td><td>最大 255 个字符</td></tr><tr><td><code>MEDIUMTEXT</code></td><td>中等大小文本</td><td>3 字节 + 数据长度</td><td>最大 16,777,215 个字符</td></tr><tr><td><code>LONGTEXT</code></td><td>超大文本</td><td>4 字节 + 数据长度</td><td>最大 4,294,967,295 个字符</td></tr><tr><td><code>BLOB</code></td><td>二进制大对象（用于存储二进制数据，如图片）</td><td>2 字节 + 数据长度</td><td>最大 65,535 字节（与 TEXT 类似）</td></tr><tr><td><code>TINYBLOB</code></td><td>极小二进制对象</td><td>1 字节 + 数据长度</td><td>最大 255 字节</td></tr><tr><td><code>MEDIUMBLOB</code></td><td>中等大小二进制对象</td><td>3 字节 + 数据长度</td><td>最大 16,777,215 字节</td></tr><tr><td><code>LONGBLOB</code></td><td>超大二进制对象</td><td>4 字节 + 数据长度</td><td>最大 4,294,967,295 字节</td></tr></tbody></table><h4 id="E-表结构-查询修改删除"><a href="#E-表结构-查询修改删除" class="headerlink" title="E. 表结构-查询修改删除"></a>E. 表结构-查询修改删除</h4><p>一般都是用图形化页面工具<br><strong>查询</strong></p><ul><li>查询当前数据库所有表:<code>show tables;</code></li><li>查询表结构:<code>desc 表名;</code></li><li>查询建表语句:<code>show create table 表名;</code></li></ul><p><strong>修改</strong></p><ul><li>添加字段:<code>alter table 表名 add 字段名 类型(长度)[comment 注释][约束];</code></li><li>修改字段类型:<code>alter table 表名 modify 字段名 新数据类型(长度);</code></li><li>修改字段名和字段类型:<code>alter table 表名 change 旧字段名 新字段名 类型(长度)[comment注释][约束];</code></li><li>删除字段:<code>alter table 表名 drop column 字段名;</code></li><li>修改表名:<code>rename table 表名 to 新表名;</code></li></ul><p><strong>删除</strong><br>    <code>drop table [if exists] 表名;</code></p><h2 id="3-DML语句"><a href="#3-DML语句" class="headerlink" title="3. DML语句"></a>3. DML语句</h2><p>数据操作语言，用来对数据库中表的数据记录进行增删改操作<br>添加<code>INSERT</code>,修改<code>UPDATE</code>,删除<code>DELETE</code></p><h4 id="A-添加-INSERT"><a href="#A-添加-INSERT" class="headerlink" title="A. 添加-INSERT"></a>A. 添加-INSERT</h4><ul><li>指定字段添加数据:<code>insert into 表名(字段名1,字段名2)values(值1,值2);</code></li><li>全部字段添加数据:<code>insert into 表名 values(值1,值2,…);</code></li><li>批量添加数据(指定字段):<code>insert into 表名(字段名1,字段名2)values(值1,值2),(值1,值2);</code></li><li>批量添加数据(全部字段):<code>insert into 表名 values(值1,值2,…),(值1,值2, …. );</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 向tb_emp表的username、name、gender字段插入数据</span><br><span class="hljs-keyword">insert into</span> tb_emp(username, name, gender, create_time, update_time) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;wuji&#x27;</span>, <span class="hljs-string">&#x27;张无忌&#x27;</span>, <span class="hljs-number">1</span>, now(), now());<br><br><span class="hljs-comment">-- 向tb_emp表的所有字段插入数据</span><br><span class="hljs-keyword">insert into</span> tb_emp(id, username, password, name, gender, image, job, entrydate, create_time, update_time)<span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;zhirou&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;周芷若&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;1.jpg&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2010-01-01&#x27;</span>, now(), now());<br><br><span class="hljs-comment">--批量向tb_emp表的username、name、gender字段插入数据</span><br><span class="hljs-keyword">insert into</span> tb_emp(username, name, gender, create_time, update_time)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;weifuwang&#x27;</span>, <span class="hljs-string">&#x27;韦一笑&#x27;</span>, <span class="hljs-number">1</span>, now(), now()),<br>       (<span class="hljs-string">&#x27;fengzi&#x27;</span>, <span class="hljs-string">&#x27;张三疯&#x27;</span>, <span class="hljs-number">1</span>, now(), now());<br></code></pre></td></tr></table></figure><h4 id="B-修改-UPDATE"><a href="#B-修改-UPDATE" class="headerlink" title="B. 修改-UPDATE"></a>B. 修改-UPDATE</h4><p>语法：<code>update 表名 set 字段名1 = 值1 , 字段名2 = 值2 , .... [where 条件];</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 将tb_emp表中id为1的员工，姓名name字段更新为’张三’</span><br><span class="hljs-keyword">update</span> tb_emp <span class="hljs-keyword">set</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;张三&#x27;</span>,update_time<span class="hljs-operator">=</span>now() <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-comment">-- 将tb_emp表的所有员工入职日期更新为’2010-01-01’</span><br><span class="hljs-keyword">update</span> tb_emp <span class="hljs-keyword">set</span> entrydate<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2010-01-01&#x27;</span>,update_time<span class="hljs-operator">=</span>now();<br></code></pre></td></tr></table></figure><ul><li>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</li></ul><h4 id="C-删除-DELETE"><a href="#C-删除-DELETE" class="headerlink" title="C. 删除-DELETE"></a>C. 删除-DELETE</h4><p>语法：<code>delete from 表名  [where  条件];</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除tb_emp表中id为1的员工</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">-- 删除tb_emp表中所有员工 </span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_emp;<br></code></pre></td></tr></table></figure><h2 id="4-DQL语句"><a href="#4-DQL语句" class="headerlink" title="4. DQL语句"></a>4. DQL语句</h2><p>数据查询语言，用于查询数据库表中的记录</p><h4 id="A-语法"><a href="#A-语法" class="headerlink" title="A. 语法"></a>A. 语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>字段列表<br><span class="hljs-keyword">FROM</span><br>表名列表<br><span class="hljs-keyword">WHERE</span><br>条件列表<br><span class="hljs-keyword">GROUP</span>  <span class="hljs-keyword">BY</span><br>分组字段列表<br><span class="hljs-keyword">HAVING</span><br>分组后条件列表<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>排序字段列表<br>LIMIT<br>分页参数<br></code></pre></td></tr></table></figure><h4 id="B-基本查询"><a href="#B-基本查询" class="headerlink" title="B. 基本查询"></a>B. 基本查询</h4><ul><li>查询多个字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, 字段<span class="hljs-number">3</span> <span class="hljs-keyword">from</span>  表名;<br></code></pre></td></tr></table></figure><ul><li>查询所有字段（通配符）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><ul><li>设置别名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span> [ <span class="hljs-keyword">as</span> 别名<span class="hljs-number">1</span> ] , 字段<span class="hljs-number">2</span> [ <span class="hljs-keyword">as</span> 别名<span class="hljs-number">2</span> ]  <span class="hljs-keyword">from</span>  表名;<br></code></pre></td></tr></table></figure><ul><li>去除重复记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 字段列表 <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询指定字段 name，entrydate并返回</span><br><span class="hljs-keyword">select</span> name,entrydate <span class="hljs-keyword">from</span> tb_emp;<br><br><span class="hljs-comment">-- 查询返回所有字段</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_emp;<br><br><span class="hljs-comment">-- 查询所有员工的 name,entrydate，并起别名(姓名、入职日期)</span><br><span class="hljs-comment">-- 方式1：</span><br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">AS</span> 姓名, entrydate <span class="hljs-keyword">AS</span> 入职日期 <span class="hljs-keyword">from</span> tb_emp;<br><span class="hljs-comment">-- 方式2： 别名中有特殊字符时，使用&#x27;&#x27;或&quot;&quot;包含</span><br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;姓 名&#x27;</span>, entrydate <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;入职日期&#x27;</span> <span class="hljs-keyword">from</span> tb_emp;<br><span class="hljs-comment">-- 方式3：</span><br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">AS</span> &quot;姓名&quot;, entrydate <span class="hljs-keyword">AS</span> &quot;入职日期&quot; <span class="hljs-keyword">from</span> tb_emp;<br><br><span class="hljs-comment">-- 查询已有的员工关联了哪几种职位(不要重复)</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> job <span class="hljs-keyword">from</span> tb_emp;<br></code></pre></td></tr></table></figure><h4 id="C-条件查询"><a href="#C-条件查询" class="headerlink" title="C. 条件查询"></a>C. 条件查询</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  字段列表 <span class="hljs-keyword">from</span>  表名  <span class="hljs-keyword">where</span>  条件列表 ; <span class="hljs-comment">-- 条件列表：意味着可以有多个条件</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between … and …</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>is null</td><td>是null</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr><td>or 或</td><td>或者 (多个条件任意一个成立)</td></tr><tr><td>not 或 !</td><td>非 , 不是</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询 姓名 为 杨逍 的员工</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;杨逍&#x27;</span>;<br><br><span class="hljs-comment">-- 查询 id小于等于5 的员工信息</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;=</span><span class="hljs-number">5</span>;<br><br><span class="hljs-comment">-- 查询 没有分配职位 的员工信息</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> job <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> ;<br><br><span class="hljs-comment">-- 查询 密码不等于 ‘123456’ 的员工信息</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> password <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-comment">-- 查询 入职日期 在 ‘2000-01-01’ (包含) 到 ‘2010-01-01’(包含) 之间的员工信息</span><br><span class="hljs-comment">-- 方式1：</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> entrydate<span class="hljs-operator">&gt;=</span><span class="hljs-string">&#x27;2000-01-01&#x27;</span> <span class="hljs-keyword">and</span> entrydate<span class="hljs-operator">&lt;=</span><span class="hljs-string">&#x27;2010-01-01&#x27;</span>;<br><span class="hljs-comment">-- 方式2： between...and</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> entrydate <span class="hljs-keyword">between</span> <span class="hljs-string">&#x27;2000-01-01&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;2010-01-01&#x27;</span>;<br><br><span class="hljs-comment">-- 查询 职位是2 (讲师), 3 (学工主管), 4 (教研主管)的员工信息</span><br><span class="hljs-comment">-- 方式1：使用or连接多个条件</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> job<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">or</span> job<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">or</span> job<span class="hljs-operator">=</span><span class="hljs-number">4</span>;<br><span class="hljs-comment">-- 方式2：in关键字</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> job <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">-- 查询姓名为两个字的员工信息</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;__&#x27;</span>;  <span class="hljs-comment">-- 通配符 &quot;_&quot; 代表任意1个字符</span><br><br><span class="hljs-comment">-- 查询姓‘张’的员工信息</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;张%&#x27;</span>;  <span class="hljs-comment">-- 通配符 &quot;%&quot; 代表任意个字符（0个 ~ 多个）</span><br></code></pre></td></tr></table></figure><h4 id="D-聚合函数"><a href="#D-聚合函数" class="headerlink" title="D. 聚合函数"></a>D. 聚合函数</h4><p>之前我们做的查询都是横向查询，就是根据条件一行一行的进行判断，而使用聚合函数查询就是纵向查询，它是对一列的值进行计算，然后返回一个结果值。（将一列数据作为一个整体，进行纵向计算）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  聚合函数(字段列表)  <span class="hljs-keyword">from</span>  表名 ;<br></code></pre></td></tr></table></figure><table><thead><tr><th>聚合函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量，按照列去统计有多少行的数据</td></tr><tr><td>max</td><td>最大值，计算指定列的最大值</td></tr><tr><td>min</td><td>最小值，计算指定列的最小值</td></tr><tr><td>avg</td><td>平均值，计算指定列的平均值</td></tr><tr><td>sum</td><td>求和，计算指定列的数值和，如果不是数值类型，那么计算结果为0</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 统计该企业员工数量</span><br><span class="hljs-comment">-- count(字段)</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(id) <span class="hljs-keyword">from</span> tb_emp;<span class="hljs-comment">-- 结果：29</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(job) <span class="hljs-keyword">from</span> tb_emp;<span class="hljs-comment">-- 结果：28 （聚合函数对NULL值不做计算）</span><br><span class="hljs-comment">-- count(常量)</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> tb_emp;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-keyword">from</span> tb_emp;<br><span class="hljs-comment">-- count(*)  推荐此写法（MySQL底层进行了优化）</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> tb_emp;<br><br><span class="hljs-comment">-- 统计该企业最早入职的员工</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(entrydate) <span class="hljs-keyword">from</span> tb_emp;<br><br><span class="hljs-comment">-- 统计该企业最迟入职的员工</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(entrydate) <span class="hljs-keyword">from</span> tb_emp;<br><br><span class="hljs-comment">-- 统计该企业员工 ID 的平均值</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(id) <span class="hljs-keyword">from</span> tb_emp;<br><br><span class="hljs-comment">-- 统计该企业员工的 ID 之和</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(id) <span class="hljs-keyword">from</span> tb_emp;<br></code></pre></td></tr></table></figure><h4 id="E-分组查询"><a href="#E-分组查询" class="headerlink" title="E. 分组查询"></a>E. 分组查询</h4><ul><li>分组其实就是按列进行分类(指定列下相同的数据归为一类)，然后可以对分类完的数据进行合并计算。</li><li>分组查询通常会使用聚合函数进行计算。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  字段列表  <span class="hljs-keyword">from</span>  表名  [<span class="hljs-keyword">where</span> 条件]  <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段名  [<span class="hljs-keyword">having</span> 分组后过滤条件];<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 根据性别分组 , 统计男性和女性员工的数量</span><br><span class="hljs-keyword">select</span> gender, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender; <span class="hljs-comment">-- 按照gender字段进行分组（gender字段下相同的数据归为一组）</span><br><br><span class="hljs-comment">-- 查询入职时间在 ‘2015-01-01’ (包含) 以前的员工 , 并对结果根据职位分组 , 获取员工数量大于等于2的职位</span><br><span class="hljs-keyword">select</span> job, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> entrydate <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;2015-01-01&#x27;</span>   <span class="hljs-comment">-- 分组前条件</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> job                      <span class="hljs-comment">-- 按照job字段分组</span><br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">2</span>;             <span class="hljs-comment">-- 分组后条件</span><br></code></pre></td></tr></table></figure><ul><li>where与having区别（面试题）<ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li><li>执行顺序：where &gt; 聚合函数 &gt; having</li></ul></li></ul><h4 id="F-排序查询"><a href="#F-排序查询" class="headerlink" title="F. 排序查询"></a>F. 排序查询</h4><p>有升序排序，也有降序排序。<br>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  字段列表  <br><span class="hljs-keyword">from</span>   表名   <br>[<span class="hljs-keyword">where</span>  条件列表] <br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>  分组字段] <br><span class="hljs-keyword">order</span>  <span class="hljs-keyword">by</span>  字段<span class="hljs-number">1</span>  排序方式<span class="hljs-number">1</span> , 字段<span class="hljs-number">2</span>  排序方式<span class="hljs-number">2</span> … ;<br></code></pre></td></tr></table></figure><p>排序方式：</p><ul><li>ASC ：升序（默认值）</li><li>DESC：降序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 根据入职时间对公司的员工进行升序排序，入职时间相同，再按照更新时间进行降序排序</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> entrydate <span class="hljs-keyword">ASC</span> , update_time <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h4 id="G-分页查询"><a href="#G-分页查询" class="headerlink" title="G. 分页查询"></a>G. 分页查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  字段列表  <span class="hljs-keyword">from</span>   表名  limit  起始索引, 查询记录数 ;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 从起始索引0开始查询员工数据, 每页展示5条记录</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br>limit <span class="hljs-number">0</span> , <span class="hljs-number">5</span>; <span class="hljs-comment">-- 从索引0开始，向后取5条记录</span><br><br><span class="hljs-comment">-- 查询 第3页 员工数据, 每页展示5条记录</span><br><span class="hljs-keyword">select</span> id, username, password, name, gender, image, job, entrydate, create_time, update_time<br><span class="hljs-keyword">from</span> tb_emp<br>limit <span class="hljs-number">10</span> , <span class="hljs-number">5</span>; <span class="hljs-comment">-- 从索引10开始，向后取5条记录</span><br></code></pre></td></tr></table></figure><ul><li>注意事项:<br>  起始索引从0开始。 计算公式 ： 起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数</li></ul><h2 id="5-多表设计"><a href="#5-多表设计" class="headerlink" title="5. 多表设计"></a>5. 多表设计</h2><p>一对多(多对一)，多对多，一对一</p><h4 id="A-一对多"><a href="#A-一对多" class="headerlink" title="A. 一对多"></a>A. 一对多</h4><h5 id="1-设计多表"><a href="#1-设计多表" class="headerlink" title="1. 设计多表"></a>1. 设计多表</h5><p>创建部门表和员工表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database db03;<br>use db03;<br><br><span class="hljs-comment">-- 部门表</span><br><span class="hljs-keyword">create table</span> tb_dept<br>(<br>    id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">primary key</span> auto_increment comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not null</span> <span class="hljs-keyword">unique</span>  comment <span class="hljs-string">&#x27;部门名称&#x27;</span>,<br>    create_time datetime <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    update_time datetime <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;修改时间&#x27;</span><br>) comment <span class="hljs-string">&#x27;部门表&#x27;</span>;<br><br><span class="hljs-comment">-- 员工表</span><br><span class="hljs-keyword">create table</span> tb_emp<br>(<br>    id          <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">primary key</span> auto_increment comment <span class="hljs-string">&#x27;ID&#x27;</span>,<br>    username    <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)      <span class="hljs-keyword">not null</span> <span class="hljs-keyword">unique</span> comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    password    <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;123456&#x27;</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    name        <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)      <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    gender      tinyint unsigned <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;性别, 说明: 1 男, 2 女&#x27;</span>,<br>    image       <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>) comment <span class="hljs-string">&#x27;图像&#x27;</span>,<br>    job         tinyint unsigned comment <span class="hljs-string">&#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;</span>,<br>    entrydate   <span class="hljs-type">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span>,<br>    dept_id     <span class="hljs-type">int</span> unsigned comment <span class="hljs-string">&#x27;部门ID&#x27;</span>, <span class="hljs-comment">-- 员工的归属部门</span><br>    create_time datetime         <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    update_time datetime         <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;修改时间&#x27;</span><br>) comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>一对多关系实现：在数据库表中多的一方，添加字段，来关联属于一这方的主键。</li></ul><h5 id="2-外键约束"><a href="#2-外键约束" class="headerlink" title="2. 外键约束"></a>2. 外键约束</h5><ul><li>让两张表的数据建立连接，<strong>保证数据的一致性和完整性</strong>。</li><li>对应的关键字：<code>foreign key</code></li></ul><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表时指定</span><br><span class="hljs-keyword">create table</span> 表名(<br>字段名    数据类型,<br>...<br>[<span class="hljs-keyword">constraint</span>]   [外键名称]  <span class="hljs-keyword">foreign  key</span> (外键字段名)   <span class="hljs-keyword">references</span>   主表 (主表列名)<br>);<br><br><span class="hljs-comment">-- 建完表后，添加外键</span><br><span class="hljs-keyword">alter table</span>  表名  <span class="hljs-keyword">add constraint</span>  外键名称  <span class="hljs-keyword">foreign key</span>(外键字段名) <span class="hljs-keyword">references</span> 主表(主表列名);<br></code></pre></td></tr></table></figure><p>通过SQL语句操作，为员工表的dept_id 建立外键约束，来关联部门表的主键。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改表： 添加外键约束</span><br><span class="hljs-keyword">alter table</span> tb_emp  <br><span class="hljs-keyword">add  constraint</span>  fk_dept_id  <span class="hljs-keyword">foreign key</span> (dept_id)  <span class="hljs-keyword">references</span>  tb_dept(id);<br></code></pre></td></tr></table></figure><h5 id="3-物理外键和逻辑外键"><a href="#3-物理外键和逻辑外键" class="headerlink" title="3. 物理外键和逻辑外键"></a>3. 物理外键和逻辑外键</h5><p>物理外键概念：使用foreign key定义外键关联另外一张表。<br>缺点：</p><ul><li>影响增、删、改的效率（需要检查外键关系）。</li><li>仅用于单节点数据库，不适用与分布式、集群场景。</li><li>容易引发数据库的死锁问题，消耗性能。</li></ul><p>逻辑外键概念：在业务层逻辑中，解决外键关联。</p><ul><li>通过逻辑外键，就可以很方便的解决上述问题。</li></ul><p><strong>在现在的企业开发中，很少会使用物理外键，都是使用逻辑外键。 甚至在一些数据库开发规范中，会明确指出禁止使用物理外键 foreign key</strong></p><h4 id="B-一对一"><a href="#B-一对一" class="headerlink" title="B. 一对一"></a>B. 一对一</h4><p>在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p><ul><li>一对一的应用场景： 用户表(基本信息+身份信息)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用户基本信息表</span><br><span class="hljs-keyword">create table</span> tb_user(<br>    id <span class="hljs-type">int</span> unsigned  <span class="hljs-keyword">primary key</span> auto_increment comment <span class="hljs-string">&#x27;ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    gender tinyint unsigned <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;性别, 1 男  2 女&#x27;</span>,<br>    phone <span class="hljs-type">char</span>(<span class="hljs-number">11</span>) comment <span class="hljs-string">&#x27;手机号&#x27;</span>,<br>    degree <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;学历&#x27;</span><br>) comment <span class="hljs-string">&#x27;用户基本信息表&#x27;</span>;<br><br><br><span class="hljs-comment">-- 用户身份信息表</span><br><span class="hljs-keyword">create table</span> tb_user_card(<br>    id <span class="hljs-type">int</span> unsigned  <span class="hljs-keyword">primary key</span> auto_increment comment <span class="hljs-string">&#x27;ID&#x27;</span>,<br>    nationality <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;民族&#x27;</span>,<br>    birthday <span class="hljs-type">date</span> <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;生日&#x27;</span>,<br>    idcard <span class="hljs-type">char</span>(<span class="hljs-number">18</span>) <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;身份证号&#x27;</span>,<br>    issued <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;签发机关&#x27;</span>,<br>    expire_begin <span class="hljs-type">date</span> <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;有效期限-开始&#x27;</span>,<br>    expire_end <span class="hljs-type">date</span> comment <span class="hljs-string">&#x27;有效期限-结束&#x27;</span>,<br>    user_id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">not null</span> <span class="hljs-keyword">unique</span> comment <span class="hljs-string">&#x27;用户ID&#x27;</span>,<br>    <span class="hljs-keyword">constraint</span> fk_user_id <span class="hljs-keyword">foreign key</span> (user_id) <span class="hljs-keyword">references</span> tb_user(id)<br>) comment <span class="hljs-string">&#x27;用户身份信息表&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="C-多对多"><a href="#C-多对多" class="headerlink" title="C. 多对多"></a>C. 多对多</h4><ul><li>学生和老师的关系，一个学生可以有多个授课老师，一个授课老师也可以有多个学生。</li><li>学生和课程的关系，一个学生可以选修多门课程，一个课程也可以供多个学生选修。</li></ul><p><img src="/img/blogs/java/javaweb/4.5.1.png"></p><ul><li>中间表包含两个外键，分别关联两方主键</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 学生表</span><br><span class="hljs-keyword">create table</span> tb_student(<br>    id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary key</span> comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    <span class="hljs-keyword">no</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;学号&#x27;</span><br>) comment <span class="hljs-string">&#x27;学生表&#x27;</span>;<br><br><br><span class="hljs-comment">-- 课程表</span><br><span class="hljs-keyword">create table</span> tb_course(<br>   id <span class="hljs-type">int</span> auto_increment <span class="hljs-keyword">primary key</span> comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>   name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;课程名称&#x27;</span><br>) comment <span class="hljs-string">&#x27;课程表&#x27;</span>;<br><br><br><span class="hljs-comment">-- 学生课程表（中间表）</span><br><span class="hljs-keyword">create table</span> tb_student_course(<br>   id <span class="hljs-type">int</span> auto_increment comment <span class="hljs-string">&#x27;主键&#x27;</span> <span class="hljs-keyword">primary key</span>,<br>   student_id <span class="hljs-type">int</span> <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;学生ID&#x27;</span>,<br>   course_id  <span class="hljs-type">int</span> <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;课程ID&#x27;</span>,<br>   <span class="hljs-keyword">constraint</span> fk_courseid <span class="hljs-keyword">foreign key</span> (course_id) <span class="hljs-keyword">references</span> tb_course (id),<br>   <span class="hljs-keyword">constraint</span> fk_studentid <span class="hljs-keyword">foreign key</span> (student_id) <span class="hljs-keyword">references</span> tb_student (id)<br>)comment <span class="hljs-string">&#x27;学生课程中间表&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="6-多表查询"><a href="#6-多表查询" class="headerlink" title="6. 多表查询"></a>6. 多表查询</h2><p>指从多张表中查询数据</p><h4 id="A-笛卡尔积"><a href="#A-笛卡尔积" class="headerlink" title="A. 笛卡尔积"></a>A. 笛卡尔积</h4><ul><li><p>笛卡尔乘积是指在数学中，两个集合(A集合和B集合)的所有组合情况。<br><img src="/img/blogs/java/javaweb/4.6.1.png"></p></li><li><p>在多表查询时，需要消除无效的笛卡尔积，只<strong>保留表关联部分的数据</strong></p></li></ul><h4 id="B-内连接查询"><a href="#B-内连接查询" class="headerlink" title="B. 内连接查询"></a>B. 内连接查询</h4><p>查询两表或多表中交集部分数据,分为<code>隐式内连接</code>和<code>显式内连接</code></p><ul><li>隐式内连接语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  字段列表   <span class="hljs-keyword">from</span>   表<span class="hljs-number">1</span> , 表<span class="hljs-number">2</span>   <span class="hljs-keyword">where</span>  条件 ... ;<br></code></pre></td></tr></table></figure><ul><li>显式内连接语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  字段列表   <span class="hljs-keyword">from</span>   表<span class="hljs-number">1</span>  [ <span class="hljs-keyword">inner</span> ]  <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span>  <span class="hljs-keyword">on</span>  连接条件 ... ;<br></code></pre></td></tr></table></figure><p>查询员工的姓名及所属的部门名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 隐式内连接实现</span><br><span class="hljs-keyword">select</span> tb_emp.name , tb_dept.name <span class="hljs-comment">-- 分别查询两张表中的数据</span><br><span class="hljs-keyword">from</span> tb_emp , tb_dept <span class="hljs-comment">-- 关联两张表</span><br><span class="hljs-keyword">where</span> tb_emp.dept_id <span class="hljs-operator">=</span> tb_dept.id; <span class="hljs-comment">-- 消除笛卡尔积</span><br><br><span class="hljs-comment">-- 显式内连接实现</span><br><span class="hljs-keyword">select</span> tb_emp.name , tb_dept.name<br><span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_dept<br><span class="hljs-keyword">on</span> tb_emp.dept_id <span class="hljs-operator">=</span> tb_dept.id;<br></code></pre></td></tr></table></figure><h4 id="C-多表查询时给表起别名"><a href="#C-多表查询时给表起别名" class="headerlink" title="C. 多表查询时给表起别名"></a>C. 多表查询时给表起别名</h4><p><code>tableA as 别名1 , tableB as 别名2 ;</code><br><code>tableA 别名1 , tableB 别名2 ;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> emp.name , dept.name<br><span class="hljs-keyword">from</span> tb_emp emp <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_dept dept<br><span class="hljs-keyword">on</span> emp.dept_id <span class="hljs-operator">=</span> dept.id;<br></code></pre></td></tr></table></figure><h4 id="D-外连接查询"><a href="#D-外连接查询" class="headerlink" title="D. 外连接查询"></a>D. 外连接查询</h4><p>外连接分为两种：<code>左外连接</code> 和 <code>右外连接</code></p><ul><li>左外连接相当于查询表1(左表)的所有数据,包含表1和表2交集部分</li><li>右外连接相当于查询表2(右表)的所有数据,包含表1和表2交集部分</li></ul><p><strong>左外连接语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  字段列表   <span class="hljs-keyword">from</span>   表<span class="hljs-number">1</span>  <span class="hljs-keyword">left</span>  [ <span class="hljs-keyword">outer</span> ]  <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span>  <span class="hljs-keyword">on</span>  连接条件 ... ;<br></code></pre></td></tr></table></figure><p><strong>右外连接语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>  字段列表   <span class="hljs-keyword">from</span>   表<span class="hljs-number">1</span>  <span class="hljs-keyword">right</span>  [ <span class="hljs-keyword">outer</span> ]  <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span>  <span class="hljs-keyword">on</span>  连接条件 ... ;<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询员工表中所有员工的姓名, 和对应的部门名称</span><br><span class="hljs-comment">-- 左外连接：以left join关键字左边的表为主表，查询主表中所有数据，以及和主表匹配的右边表中的数据</span><br><span class="hljs-keyword">select</span> emp.name , dept.name<br><span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">AS</span> emp <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> tb_dept <span class="hljs-keyword">AS</span> dept <br>     <span class="hljs-keyword">on</span> emp.dept_id <span class="hljs-operator">=</span> dept.id;<br><br><br><span class="hljs-comment">-- 查询部门表中所有部门的名称, 和对应的员工名称</span><br><span class="hljs-comment">-- 右外连接</span><br><span class="hljs-keyword">select</span> dept.name , emp.name<br><span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">AS</span> emp <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span>  tb_dept <span class="hljs-keyword">AS</span> dept<br>     <span class="hljs-keyword">on</span> emp.dept_id <span class="hljs-operator">=</span> dept.id;<br></code></pre></td></tr></table></figure><h4 id="E-子查询-嵌套查询"><a href="#E-子查询-嵌套查询" class="headerlink" title="E. 子查询(嵌套查询)"></a>E. 子查询(嵌套查询)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span>  <span class="hljs-keyword">FROM</span>   t1   <span class="hljs-keyword">WHERE</span>  column1 <span class="hljs-operator">=</span>  (<span class="hljs-keyword">SELECT</span>  column1  <span class="hljs-keyword">FROM</span>  t2 ... );<br></code></pre></td></tr></table></figure><p>分为</p><ol><li>标量子查询（子查询结果为单个值[一行一列]）</li><li>列子查询（子查询结果为一列，但可以是多行）</li><li>行子查询（子查询结果为一行，但可以是多列）</li><li>表子查询（子查询结果为多行多列[相当于子查询结果是一张表]）</li></ol><ul><li>子查询可以书写的位置：<code>where之后</code>,<code>from之后</code>,<code>select之后</code></li></ul><h5 id="1-标量子查询"><a href="#1-标量子查询" class="headerlink" title="1. 标量子查询"></a>1. 标量子查询</h5><p>子查询返回的结果是单个值(数字、字符串、日期等)</p><ul><li>查询”教研部”的所有员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1.查询&quot;教研部&quot;部门ID</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tb_dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;教研部&#x27;</span>;    <span class="hljs-comment">--查询结果：2</span><br><span class="hljs-comment">-- 2.根据&quot;教研部&quot;部门ID, 查询员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">-- 合并出上两条SQL语句</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tb_dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;教研部&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="2-列子查询"><a href="#2-列子查询" class="headerlink" title="2. 列子查询"></a>2. 列子查询</h5><p>子查询返回的结果是一列(可以是多行)</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr></tbody></table><ul><li>查询”教研部”和”咨询部”的所有员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1.查询&quot;销售部&quot;和&quot;市场部&quot;的部门ID</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tb_dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;教研部&#x27;</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;咨询部&#x27;</span>;    <span class="hljs-comment">-- 查询结果：3,2</span><br><span class="hljs-comment">-- 2.根据部门ID, 查询员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-keyword">in</span> (<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">-- 合并以上两条SQL语句</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tb_dept <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;教研部&#x27;</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;咨询部&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="3-行子查询"><a href="#3-行子查询" class="headerlink" title="3. 行子查询"></a>3. 行子查询</h5><p>子查询返回的结果是一行(可以是多行)<br>常用的操作符：<code>= 、&lt;&gt; 、IN 、NOT IN</code></p><ul><li>查询与”韦一笑”的入职日期及职位都相同的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询&quot;韦一笑&quot;的入职日期 及 职位</span><br><span class="hljs-keyword">select</span> entrydate , job <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;韦一笑&#x27;</span>;  <span class="hljs-comment">-- 查询结果： 2007-01-01 , 2</span><br><span class="hljs-comment">-- 查询与&quot;韦一笑&quot;的入职日期及职位相同的员工信息</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> (entrydate,job) <span class="hljs-operator">=</span> (<span class="hljs-string">&#x27;2007-01-01&#x27;</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">-- 合并以上两条SQL语句</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> (entrydate,job) <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> entrydate , job <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;韦一笑&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="4-表子查询"><a href="#4-表子查询" class="headerlink" title="4. 表子查询"></a>4. 表子查询</h5><p>子查询返回的结果是多行多列，常作为临时表</p><ul><li>查询入职日期是 “2006-01-01” 之后的员工信息 , 及其部门信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> entrydate <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2006-01-01&#x27;</span>;<br><br><span class="hljs-keyword">select</span> e.<span class="hljs-operator">*</span>, d.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> entrydate <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;2006-01-01&#x27;</span>) e <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept d <span class="hljs-keyword">on</span> e.dept_id <span class="hljs-operator">=</span> d.id ;<br></code></pre></td></tr></table></figure><h2 id="7-事务"><a href="#7-事务" class="headerlink" title="7. 事务"></a>7. 事务</h2><h4 id="A-事务的介绍"><a href="#A-事务的介绍" class="headerlink" title="A. 事务的介绍"></a>A. 事务的介绍</h4><p>事务是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><ul><li>事务作用：保证<code>在一个事务中多次操作数据库表中数据时</code>，<code>要么全都成功,要么全都失败</code>。</li></ul><h4 id="B-事务的操作"><a href="#B-事务的操作" class="headerlink" title="B. 事务的操作"></a>B. 事务的操作</h4><table><thead><tr><th>SQL语句</th><th>描述</th></tr></thead><tbody><tr><td>start transaction; &#x2F; begin ;</td><td>开启手动控制事务</td></tr><tr><td>commit;</td><td>提交事务</td></tr><tr><td>rollback;</td><td>回滚事务</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">start</span> transaction ;<br><br><span class="hljs-comment">-- 删除学工部</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_dept <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">-- 删除学工部的员工</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">-- 提交事务 (成功时执行)</span><br><span class="hljs-keyword">commit</span> ;<br><br><span class="hljs-comment">-- 回滚事务 (出错时执行)</span><br><span class="hljs-keyword">rollback</span> ;<br></code></pre></td></tr></table></figure><h4 id="C-事务的四大特性-ACID"><a href="#C-事务的四大特性-ACID" class="headerlink" title="C. 事务的四大特性(ACID)"></a>C. 事务的四大特性(ACID)</h4><ul><li>原子性（Atomicity）：事务是不可分割的最小单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h2 id="8-索引"><a href="#8-索引" class="headerlink" title="8. 索引"></a>8. 索引</h2><h4 id="A-索引的介绍"><a href="#A-索引的介绍" class="headerlink" title="A. 索引的介绍"></a>A. 索引的介绍</h4><p>索引是帮助数据库<code>高效获取数据</code>的<code>数据结构</code>,使用索引可以<code>提高查询的效率</code></p><p>优点：</p><ul><li><code>提高数据查询的效率</code>，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。</li></ul><p>缺点：</p><ul><li>索引会<code>占用存储空间</code>。</li><li>索引大大提高了查询效率，同时却也<code>降低了insert、update、delete的效率</code>。</li></ul><h4 id="B-索引的数据结构"><a href="#B-索引的数据结构" class="headerlink" title="B. 索引的数据结构"></a>B. 索引的数据结构</h4><p>MySQL中用<code>B+树索引</code>数据结构，B+Tree(多路平衡搜索树)</p><p><img src="/img/blogs/java/javaweb/4.8.1.png"></p><p>B+Tree结构：</p><ul><li>每一个节点，可以存储多个key（有n个key，就有n个指针）</li><li>节点分为：叶子节点、非叶子节点<ul><li>叶子节点，就是最后一层子节点，所有的数据都存储在叶子节点上</li><li>非叶子节点，不是树结构最下面的节点，用于索引数据，存储的的是：key+指针</li></ul></li><li>为了提高范围查询效率，叶子节点形成了一个双向链表，便于数据的排序及区间范围查询</li></ul><h4 id="C-语法"><a href="#C-语法" class="headerlink" title="C. 语法"></a>C. 语法</h4><ol><li>创建索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span>  [ <span class="hljs-keyword">unique</span> ]  index 索引名 <span class="hljs-keyword">on</span>  表名 (字段名,... ) ;<br></code></pre></td></tr></table></figure><ol start="2"><li>查看索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span>  index  <span class="hljs-keyword">from</span>  表名;<br></code></pre></td></tr></table></figure><ol start="3"><li>删除索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span>  index  索引名  <span class="hljs-keyword">on</span>  表名;<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 为tb_emp表的name字段建立一个索引</span><br><span class="hljs-keyword">create</span> index idx_emp_name <span class="hljs-keyword">on</span> tb_emp(name);<br><br><span class="hljs-comment">-- 查询 tb_emp 表的索引信息</span><br><span class="hljs-keyword">show</span>  index  <span class="hljs-keyword">from</span>  tb_emp;<br><br><span class="hljs-comment">-- 删除 tb_emp 表中name字段的索引</span><br><span class="hljs-keyword">drop</span> index idx_emp_name <span class="hljs-keyword">on</span> tb_emp;<br></code></pre></td></tr></table></figure><h1 id="五-MyBatis"><a href="#五-MyBatis" class="headerlink" title="五. MyBatis"></a>五. MyBatis</h1><h2 id="1-MyBatis简介"><a href="#1-MyBatis简介" class="headerlink" title="1. MyBatis简介"></a>1. MyBatis简介</h2><p>MyBatis就是用Java程序操作数据库<br><img src="/img/blogs/java/javaweb/5.1.1.png"></p><ol><li><strong>application.properties</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//驱动类名称</span><br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<br><span class="hljs-comment">//数据库连接的url</span><br>spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/mybatis</span><br><span class="hljs-comment">//连接数据库的用户名</span><br>spring.datasource.username=root<br><span class="hljs-comment">//连接数据库的密码</span><br>spring.datasource.password=<span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>Mapper接口（编写SQL语句）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select id, name, age, gender, phone from user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-JDBC-了解"><a href="#2-JDBC-了解" class="headerlink" title="2. JDBC(了解)"></a>2. JDBC(了解)</h2><p>就是使用Java语言操作关系型数据库的一套API</p><ul><li>使用SpringBoot+Mybatis的方式操作数据库，能够提升开发效率、降低资源浪费</li></ul><h2 id="3-数据库连接池"><a href="#3-数据库连接池" class="headerlink" title="3. 数据库连接池"></a>3. 数据库连接池</h2><h4 id="A-数据库连接池介绍"><a href="#A-数据库连接池介绍" class="headerlink" title="A. 数据库连接池介绍"></a>A. 数据库连接池介绍</h4><ul><li><p>数据库连接池是个<strong>容器，负责分配、管理数据库连接</strong>(Connection)</p></li><li><p>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</p></li><li><p>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏<br><img src="/img/blogs/java/javaweb/5.3.1.png"></p></li><li><p>数据库连接池的好处：</p><ul><li><strong>资源重用</strong></li><li><strong>提升系统响应速度</strong></li><li>避免数据库连接遗漏</li></ul></li></ul><h4 id="B-实现数据库连接池"><a href="#B-实现数据库连接池" class="headerlink" title="B. 实现数据库连接池"></a>B. 实现数据库连接池</h4><p>官方(sun)提供了数据库连接池标准（javax.sql.DataSource接口）<br>功能：获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException;<br></code></pre></td></tr></table></figure><p><strong>想把默认的数据库连接池切换为Druid数据库连接池</strong></p><ol><li>在pom.xml文件中引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Druid连接池依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在application.properties中引入数据库连接配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver<br>spring.datasource.druid.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/mybatis</span><br>spring.datasource.druid.username=root<br>spring.datasource.druid.password=<span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><h2 id="4-lombok工具包"><a href="#4-lombok工具包" class="headerlink" title="4. lombok工具包"></a>4. lombok工具包</h2><p>Lombok是一个实用的Java类库，可以通过简单的注解来简化和消除一些必须有但显得很臃肿的Java代码</p><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Getter&#x2F;@Setter</td><td>为所有的属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易阅读的toString方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写 equals 方法和 hashCode 方法</td></tr><tr><td><strong>@Data</strong></td><td>提供了更综合的生成代码功能（@Getter + @Setter + @ToString+@EqualsAndHashCode）</td></tr><tr><td><strong>@NoArgsConstructo</strong></td><td>为实体类生成无参的构造器方法</td></tr><tr><td><strong>@AllArgsConstructor</strong></td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法</td></tr></tbody></table><p>在pom.xml文件中引入依赖(lombok)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在springboot的父工程中，已经集成了lombok并指定了版本号，故当前引入依赖时不需要指定version --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-Mybatis基础操作"><a href="#5-Mybatis基础操作" class="headerlink" title="5. Mybatis基础操作"></a>5. Mybatis基础操作</h2><h4 id="A-准备"><a href="#A-准备" class="headerlink" title="A. 准备"></a>A. 准备</h4><p><a href="https://blog.csdn.net/sinat_38316216/article/details/142700670?spm=1001.2014.3001.5502">准备工作</a></p><h4 id="B-删除"><a href="#B-删除" class="headerlink" title="B. 删除"></a>B. 删除</h4><h5 id="1-功能实现"><a href="#1-功能实现" class="headerlink" title="1. 功能实现"></a>1. 功能实现</h5><p>根据主键删除数据</p><ol><li>接口方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span> <span class="hljs-comment">//使用#&#123;key&#125;方式获取方法中的参数值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在单元测试类中通过@Autowired注解注入EmpMapper类型对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//从Spring的IOC容器中，获取类型是EmpMapper的对象并注入</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//调用删除方法</span><br>        empMapper.delete(<span class="hljs-number">16</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-MyBatis的日志输出"><a href="#2-MyBatis的日志输出" class="headerlink" title="2. MyBatis的日志输出"></a>2. MyBatis的日志输出</h5><ol><li>打开application.properties文件</li><li>开启mybatis的日志，并指定输出到控制台<br> <code>mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</code></li></ol><h5 id="3-预编译SQL"><a href="#3-预编译SQL" class="headerlink" title="3. 预编译SQL"></a>3. 预编译SQL</h5><ul><li>性能更高</li><li>更安全(防止SQL注入)</li></ul><p>在项目开发中，建议使用<code>#{}</code>，生成预编译SQL，防止SQL注入安全。</p><h4 id="C-新增"><a href="#C-新增" class="headerlink" title="C. 新增"></a>C. 新增</h4><h5 id="1-功能实现-1"><a href="#1-功能实现-1" class="headerlink" title="1. 功能实现"></a>1. 功能实现</h5><ol><li>接口方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建员工对象</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setUsername(<span class="hljs-string">&quot;tom&quot;</span>);<br>        emp.setName(<span class="hljs-string">&quot;汤姆&quot;</span>);<br>        emp.setImage(<span class="hljs-string">&quot;1.jpg&quot;</span>);<br>        emp.setGender((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>);<br>        emp.setJob((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>);<br>        emp.setEntrydate(LocalDate.of(<span class="hljs-number">2000</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<br>        emp.setCreateTime(LocalDateTime.now());<br>        emp.setUpdateTime(LocalDateTime.now());<br>        emp.setDeptId(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//调用添加方法</span><br>        empMapper.insert(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-主键返回"><a href="#2-主键返回" class="headerlink" title="2. 主键返回"></a>2. 主键返回</h5><p>在数据添加成功后，需要获取插入数据库数据的主键<br>如果我们想要拿到主键值，需要在Mapper接口中的方法上添加一个<code>Options注解</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span><br></code></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//会自动将生成的主键值，赋值给emp对象的id属性</span><br>    <span class="hljs-meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span><br>    <span class="hljs-meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="D-更新-修改"><a href="#D-更新-修改" class="headerlink" title="D. 更新(修改)"></a>D. 更新(修改)</h4><ol><li>接口方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id修改员工信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> emp</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Update(&quot;update emp set username=#&#123;username&#125;, name=#&#123;name&#125;, gender=#&#123;gender&#125;, image=#&#123;image&#125;, job=#&#123;job&#125;, entrydate=#&#123;entrydate&#125;, dept_id=#&#123;deptId&#125;, update_time=#&#123;updateTime&#125; where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>测试类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//要修改的员工信息</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setId(<span class="hljs-number">23</span>);<br>        emp.setUsername(<span class="hljs-string">&quot;songdaxia&quot;</span>);<br>        emp.setPassword(<span class="hljs-literal">null</span>);<br>        emp.setName(<span class="hljs-string">&quot;老宋&quot;</span>);<br>        emp.setImage(<span class="hljs-string">&quot;2.jpg&quot;</span>);<br>        emp.setGender((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>);<br>        emp.setJob((<span class="hljs-type">short</span>)<span class="hljs-number">2</span>);<br>        emp.setEntrydate(LocalDate.of(<span class="hljs-number">2012</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<br>        emp.setCreateTime(<span class="hljs-literal">null</span>);<br>        emp.setUpdateTime(LocalDateTime.now());<br>        emp.setDeptId(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//调用方法，修改员工数据</span><br>        empMapper.update(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="E-查询"><a href="#E-查询" class="headerlink" title="E. 查询"></a>E. 查询</h4><h5 id="1-根据ID查询"><a href="#1-根据ID查询" class="headerlink" title="1. 根据ID查询"></a>1. 根据ID查询</h5><ol><li>接口方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>测试类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> empMapper.getById(<span class="hljs-number">1</span>);<br>        System.out.println(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>而在测试的过程中，我们会发现有几个字段(deptId、createTime、updateTime)是没有数据值的</li></ul><h5 id="2-数据封装"><a href="#2-数据封装" class="headerlink" title="2. 数据封装"></a>2. 数据封装</h5><ul><li>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装。</li><li>如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</li></ul><p><img src="/img/blogs/java/javaweb/5.5.1.png"></p><ol><li>起别名:在SQL语句中,对不一样的列名起别名,别名和实体类属性名一样。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id deptld, create_time createTime, update_time updateTime from emp where id = #&#123;id&#125; &quot;)</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getByld</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>手动结果映射:通过@Results及@Result进行手动结果映射。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">    @Result(column =&quot;dept_id&quot;, property = &quot;deptld&quot;),</span><br><span class="hljs-meta">    @Result(column =&quot;create_time&quot;, property = &quot;createTime&quot;),</span><br><span class="hljs-meta">    @Result(column =&quot;update_time&quot;, property = &quot;updateTime&quot;)&#125;)</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getByld</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>开启驼峰命名(推荐)：如果字段名与属性名符合驼峰命名规则，mybatis会自动通过驼峰命名规则映射</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在application.properties中添加：</span><br>mybatis.configuration.map-underscore-to-camel-<span class="hljs-keyword">case</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="3-条件查询"><a href="#3-条件查询" class="headerlink" title="3. 条件查询"></a>3. 条件查询</h5><p>解决SQL注入风险,使用MySQL提供的字符串拼接函数：<code>concat(&#39;%&#39; , &#39;关键字&#39; , &#39;%&#39;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from emp &quot; +</span><br><span class="hljs-meta">            &quot;where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) &quot; +</span><br><span class="hljs-meta">            &quot;and gender = #&#123;gender&#125; &quot; +</span><br><span class="hljs-meta">            &quot;and entrydate between #&#123;begin&#125; and #&#123;end&#125; &quot; +</span><br><span class="hljs-meta">            &quot;order by update_time desc&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-XML映射文件"><a href="#6-XML映射文件" class="headerlink" title="6. XML映射文件"></a>6. XML映射文件</h2><p>Mybatis的开发有两种方式：</p><ol><li>注解</li><li>XML</li></ol><p>在Mybatis中使用XML映射文件方式开发，需要符合一定的规范：</p><ol><li>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）</li><li>XML映射文件的namespace属性为Mapper接口全限定名一致</li><li>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--查询操作--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp<br>        where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>              and gender = #&#123;gender&#125;<br>              and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>        order by update_time desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>MybatisX</code>是一款基于IDEA的快速开发Mybatis的插件</p><h2 id="7-MyBatis动态SQL"><a href="#7-MyBatis动态SQL" class="headerlink" title="7. MyBatis动态SQL"></a>7. MyBatis动态SQL</h2><p>SQL语句会随着用户的输入或外部条件的变化而变化，我们称为：动态SQL</p><h4 id="A"><a href="#A" class="headerlink" title="A. &lt;if&gt;"></a>A. <code>&lt;if&gt;</code></h4><ul><li><code>&lt;if&gt;</code>用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL</li><li><code>&lt;where&gt;</code>:只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR</li><li><code>&lt;set&gt;</code>：动态地在行首插入 SET 关键字，并会删掉额外的逗号。（用在update语句中）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;条件表达式&quot;</span>&gt;</span><br>   //要拼接的sql语句<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>原来的SQL语句</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp<br>        where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>              and gender = #&#123;gender&#125;<br>              and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>        order by update_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>动态SQL语句</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>             <span class="hljs-comment">&lt;!-- if做为where标签的子元素 --&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                 and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>                 and gender = #&#123;gender&#125;<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;</span><br>                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        order by update_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//只有性别</span><br>    List&lt;Emp&gt; list = empMapper.list(<span class="hljs-literal">null</span>, (<span class="hljs-type">short</span>)<span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">for</span>(Emp emp : list)&#123;<br>        System.out.println(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="B-foreach"><a href="#B-foreach" class="headerlink" title="B. foreach"></a>B. <code>foreach</code></h4><p>员工删除功能（既支持删除单条记录，又支持批量删除）<br>使用<code>&lt;foreach&gt;</code>遍历deleteByIds方法中传递的参数ids集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;集合名称&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;集合遍历出来的元素/项&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;每一次遍历使用的分隔符&quot;</span> </span><br><span class="hljs-tag">         <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;遍历开始前拼接的片段&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;遍历结束后拼接的片段&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>    delete from emp where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="C-sql-include"><a href="#C-sql-include" class="headerlink" title="C. sql&amp;include"></a>C. <code>sql&amp;include</code></h4><p>我们可以<code>对重复的代码片段进行抽取</code>，将其通过<code>&lt;sql&gt;</code>标签封装到一个SQL片段，然后再通过<code>&lt;include&gt;</code>标签进行引用。</p><ul><li><code>&lt;sql&gt;</code>：定义可重用的SQL片段</li><li><code>&lt;include&gt;</code>：通过属性refid，指定包含的SQL片段</li></ul><ol><li>SQL片段： 抽取重复的代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;commonSelect&quot;</span>&gt;</span><br> select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>通过<code>&lt;include&gt;</code>标签在原来抽取的地方进行引用</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;commonSelect&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>            and gender = #&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;</span><br>            and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by update_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="六-事务管理"><a href="#六-事务管理" class="headerlink" title="六. 事务管理"></a>六. 事务管理</h1><h2 id="1-事务回顾"><a href="#1-事务回顾" class="headerlink" title="1. 事务回顾"></a>1. 事务回顾</h2><p>事务是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体，一起向数据库提交或者是撤销操作请求。所以这组操作要么<code>同时成功，要么同时失败</code>。</p><p>事务的操作主要有三步：</p><ol><li>开启事务（一组操作开始前，开启事务）：start transaction &#x2F; begin;</li><li>提交事务（这组操作全部成功后，提交事务）：commit ;</li><li>回滚事务（中间任何一个操作出现异常，回滚事务）：rollback ;</li></ol><h2 id="2-Spring事务管理"><a href="#2-Spring事务管理" class="headerlink" title="2. Spring事务管理"></a>2. Spring事务管理</h2><p>Transactional注解<br>@Transactional作用：就是在当前这个方法执行开始之前来开启事务，<code>方法执行完毕之后提交事务</code>。如果在这个方法执行的过程当中<code>出现了异常，就会进行事务的回滚操作</code></p><p>@Transactional注解：我们一般会<code>在业务层当中来控制事务</code>，因为在业务层当中，一个业务功能可能会包含多个数据访问的操作。在业务层来控制事务，我们就可以将多个数据访问操作控制在一个事务范围内。</p><p>@Transactional注解书写位置：</p><ul><li>方法:当前方法交给spring进行事务管理</li><li>类:当前类中所有的方法都交由spring进行事务管理</li><li>接口:接口下所有的实现类当中所有的方法都交给spring 进行事务管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span>  <span class="hljs-comment">//当前方法添加了事务管理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-comment">//根据部门id删除部门信息</span><br>        deptMapper.deleteById(id);<br>        <br>        <span class="hljs-comment">//模拟：异常发生</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//删除部门下的所有员工信息</span><br>        empMapper.deleteByDeptId(id);   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以在application.yml配置文件中开启事务管理日志，这样就可以在控制看到和事务相关的日志信息了</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#spring事务管理日志</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">org.springframework.jdbc.support.JdbcTransactionManager:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><h2 id="3-rollbackFor-异常回滚"><a href="#3-rollbackFor-异常回滚" class="headerlink" title="3. rollbackFor(异常回滚)"></a>3. rollbackFor(异常回滚)</h2><p>在Spring的事务管理中，默认只有<code>运行时异常 RuntimeException</code>才会回滚。如果还需要回滚指定类型的异常，可以通过<code>rollbackFor</code>属性来指定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional(rollbackFor=Exception.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>        <span class="hljs-comment">//根据部门id删除部门信息</span><br>        deptMapper.deleteById(id);<br>        <span class="hljs-comment">//模拟：异常发生</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> id/<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//删除部门下的所有员工信息</span><br>        empMapper.deleteByDeptId(id);   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-propagation"><a href="#4-propagation" class="headerlink" title="4. propagation"></a>4. propagation</h2><h4 id="A-事务传播行为"><a href="#A-事务传播行为" class="headerlink" title="A. 事务传播行为"></a>A. 事务传播行为</h4><p>就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。<br>例如：两个事务方法，一个A方法，一个B方法。在这两个方法上都添加了@Transactional注解，就代表这两个方法都具有事务，而在A方法当中又去调用了B方法。<br><img src="/img/blogs/java/javaweb/6.4.1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span> (propagation = Propagation.REQUIRED<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span> <span class="hljs-params">()</span> &#123;<br>    .....<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>常用属性值</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED</td><td>【默认值】需要事务，有则加入，无则创建新事务</td></tr><tr><td>REQUIRES_NEW</td><td>需要新事务，无论有无，总是创建新事务</td></tr></tbody></table><ul><li>REQUIRED ：大部分情况下都是用该传播行为即</li><li>REQUIRES_NEW ：当我们不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与否，都需要保证日志记录能够记录成功。</li></ul><h1 id="七-AOP"><a href="#七-AOP" class="headerlink" title="七. AOP"></a>七. AOP</h1><h2 id="1-AOP基础"><a href="#1-AOP基础" class="headerlink" title="1. AOP基础"></a>1. AOP基础</h2><h4 id="A-AOP介绍"><a href="#A-AOP介绍" class="headerlink" title="A. AOP介绍"></a>A. AOP介绍</h4><p>面向特定方法编程</p><ul><li><p>AOP常见的应用场景如下：</p><ul><li>记录系统的操作日志</li><li>权限控制</li><li>事务管理</li></ul></li><li><p>AOP面向切面编程的一些优势：</p><ul><li>代码无侵入：没有修改原始的业务方法，就已经对原始的业务方法进行了功能的增强或者是功能的改变</li><li>减少了重复代码</li><li>提高开发效率</li><li>维护方便</li></ul></li></ul><h4 id="B-AOP核心概念"><a href="#B-AOP核心概念" class="headerlink" title="B. AOP核心概念"></a>B. AOP核心概念</h4><ul><li>连接点:JoinPoint,可以被AOP控制的方法(暗含方法执行时的相关信息)</li><li>通知:Advice,指哪些重复的逻辑,也就是共性功能(最终体现为一个方法)</li><li>切入点:PointCut,匹配连接点的条件,通知仅会在切入点方法执行时被应用</li><li>切面:Aspect,描述通知与切入点的对应关系(通知+切入点)</li><li>目标对象:Target,通知所应用的对象</li></ul><p>Spring的AOP底层是基于动态代理技术来实现的，也就是说在程序运行的时候，会自动的基于动态代理技术为目标对象生成一个对应的代理对象。在代理对象当中就会对目标对象当中的原始方法进行功能的增强。</p><h2 id="2-AOP进阶"><a href="#2-AOP进阶" class="headerlink" title="2. AOP进阶"></a>2. AOP进阶</h2><h4 id="A-通知类型"><a href="#A-通知类型" class="headerlink" title="A. 通知类型"></a>A. 通知类型</h4><p>Spring中AOP的通知类型：</p><ol><li>@Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li><li>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</li><li>@After ：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li><li>@AfterReturning ： 返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li><li>@AfterThrowing ： 异常后通知，此注解标注的通知方法发生异常后执行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect1</span> &#123;<br><br>    <span class="hljs-comment">//切入点方法（公共的切入点表达式）</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//前置通知（引用切入点）</span><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;before ...&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;around before ...&quot;</span>);<br><br>        <span class="hljs-comment">//调用目标对象的原始方法执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br>        <span class="hljs-comment">//原始方法在执行时：发生异常</span><br>        <span class="hljs-comment">//后续代码不在执行</span><br><br>        log.info(<span class="hljs-string">&quot;around after ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@After(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;after ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//返回后通知（程序在正常执行的情况下，会执行的后置通知）</span><br>    <span class="hljs-meta">@AfterReturning(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterReturning ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//异常通知（程序在出现异常的情况下，执行的后置通知）</span><br>    <span class="hljs-meta">@AfterThrowing(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterThrowing ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="B-通知顺序"><a href="#B-通知顺序" class="headerlink" title="B. 通知顺序"></a>B. 通知顺序</h4><ul><li>不同的切面类当中，默认情况下通知的执行顺序是与切面类的<code>类名字母排序</code>是有关系的</li><li>可以在切面类上面加上<code>@Order注解</code>，来控制不同的切面类通知的执行顺序</li></ul><h4 id="C-切入点表达式"><a href="#C-切入点表达式" class="headerlink" title="C. 切入点表达式"></a>C. 切入点表达式</h4><p>主要用来决定项目中的哪些方法需要加入通知</p><h5 id="1-execution"><a href="#1-execution" class="headerlink" title="1. execution"></a>1. execution</h5><p>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：<br><code>execution(访问修饰符?  返回值  包名.类名.?方法名(方法参数) throws 异常?)</code>（带?的可以省略）</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;execution(void com.itheima.service.impl.DeptServiceImpl.delete(java.lang.Integer))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>可以使用通配符描述切入点</p><ol><li><code>*</code>：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</li><li><code>..</code> ：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</li></ol><h5 id="2-annotation"><a href="#2-annotation" class="headerlink" title="2. @annotation"></a>2. @annotation</h5><p>用于匹配标识有特定注解的方法<br><code>@annotation(com.itheima.anno.Log)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;@annotation(com.itheima.anno.Log)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span> <span class="hljs-params">()</span> &#123;<br>    log.info(<span class="hljs-string">&quot;before..&quot;</span>) ;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="D-连接点"><a href="#D-连接点" class="headerlink" title="D. 连接点"></a>D. 连接点</h4><p>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p><ul><li>对于@Around通知，获取连接点信息只能使用ProceedingJoinPoint类型</li><li>对于其他四种通知，获取连接点信息只能使用JoinPoint，它是ProceedingJoinPoint的父类型</li></ul><h1 id="八-Springboot原理篇"><a href="#八-Springboot原理篇" class="headerlink" title="八. Springboot原理篇"></a>八. Springboot原理篇</h1><h2 id="1-配置优先级"><a href="#1-配置优先级" class="headerlink" title="1. 配置优先级"></a>1. 配置优先级</h2><p>SpringBoot项目当中支持的三类配置文件和两种配置方法：</p><ul><li>application.properties</li><li>application.yml</li><li>application.yaml</li><li>Java系统属性配置 (格式： -Dkey&#x3D;value)(-Dserver.port&#x3D;9000)</li><li>命令行参数 （格式：–key&#x3D;value）(–server.port&#x3D;10010)</li></ul><p>配置优先级排名（从高到低）：</p><ol><li>命令行参数</li><li>Java系统属性配置</li><li>properties配置文件</li><li>yml配置文件(常用)</li><li>yaml配置文件</li></ol><h2 id="2-Bean管理"><a href="#2-Bean管理" class="headerlink" title="2. Bean管理"></a>2. Bean管理</h2><h4 id="A-获取Bean"><a href="#A-获取Bean" class="headerlink" title="A. 获取Bean"></a>A. 获取Bean</h4><p>默认情况下，SpringBoot项目在启动的时候会自动的创建IOC容器(也称为Spring容器)，并且在启动的过程当中会自动的将bean对象都创建好，存放在IOC容器当中。应用程序在运行时需要依赖什么bean对象，就直接进行依赖注入就可以了。<br>而在Spring容器中提供了一些方法，可以主动从IOC容器中获取到bean对象，下面介绍3种常用方式：</p><ol><li>根据name获取bean<br> <code>Object getBean(String name)</code></li><li>根据类型获取bean<br> <code>&lt;T&gt; T getBean(Class&lt;T&gt; requiredType)</code></li><li>根据name获取bean（带类型转换）<br> <code>&lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType)</code></li></ol><h4 id="B-Bean作用域"><a href="#B-Bean作用域" class="headerlink" title="B. Bean作用域"></a>B. Bean作用域</h4><ul><li>在Spring中支持五种作用域，后三种在web环境才生效：</li></ul><table><thead><tr><th>作用域</th><th>说明</th></tr></thead><tbody><tr><td>singleton</td><td>容器内同名称的bean只有一个实例（单例）（默认）</td></tr><tr><td>prototype</td><td>每次使用该bean时会创建新的实例（非单例）</td></tr></tbody></table><ul><li>可以借助Spring中的<code>@Scope注解</code>来进行配置作用域</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="C-第三方bean"><a href="#C-第三方bean" class="headerlink" title="C. 第三方bean"></a>C. 第三方bean</h4><p>如果要管理的bean对象来自于第三方（不是自定义的），是无法用@Component 及衍生注解声明bean的，就需要用到@Bean注解。</p><ol><li>在启动类上添加@Bean标识的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringbootWebConfig2Application.class, args);<br>    &#125;<br><br>    <span class="hljs-comment">//声明第三方bean</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span><br>    <span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">saxReader</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在配置类中定义@Bean标识的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类  (在配置类当中对第三方bean进行集中的配置管理)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonConfig</span> &#123;<br>    <span class="hljs-comment">//声明第三方bean</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span><br>          <span class="hljs-comment">//通过@Bean注解的name/value属性指定bean名称, 如果未指定, 默认是方法名</span><br>    <span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">reader</span><span class="hljs-params">(DeptService deptService)</span>&#123;<br>        System.out.println(deptService);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-SpringBoot原理"><a href="#3-SpringBoot原理" class="headerlink" title="3. SpringBoot原理"></a>3. SpringBoot原理</h2><h4 id="A-起步依赖"><a href="#A-起步依赖" class="headerlink" title="A. 起步依赖"></a>A. 起步依赖</h4><p>原理就是maven的依赖传递</p><h4 id="B-自动配置"><a href="#B-自动配置" class="headerlink" title="B. 自动配置"></a>B. 自动配置</h4><h5 id="1-自动配置的概述"><a href="#1-自动配置的概述" class="headerlink" title="1. 自动配置的概述"></a>1. 自动配置的概述</h5><p>SpringBoot的自动配置就是当Spring容器启动后，一些配置类、bean对象就自动存入到了IOC容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p><h5 id="2-自动配置的原理"><a href="#2-自动配置的原理" class="headerlink" title="2. 自动配置的原理"></a>2. 自动配置的原理</h5><p>方案一： <code>@ComponentScan组件扫描</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.itheima&quot;,&quot;com.example&quot;&#125;)</span> <span class="hljs-comment">//指定要扫描的包</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebConfig2Application</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>方案二：<code>@Import导入</code>.使用@Import导入的类会被Spring加载到IOC容器中</p><ul><li>导入普通类,交给IOC管理</li><li>导入配置类</li><li>导入ImportSelector接口实现类</li><li>@EnableXxxx注解，封装@Import注解</li></ul><p><strong>@Conditional注解</strong>：</p><ul><li>作用：按照一定的条件进行判断，在满足给定条件后才会注册对应的bean对象到Spring的IOC容器中。</li><li>位置：方法、类</li><li>@Conditional本身是一个父注解，派生出大量的子注解：<ul><li>@ConditionalOnClass：判断环境中有对应字节码文件，才注册bean到IOC容器。</li><li>@ConditionalOnMissingBean：判断环境中没有对应的bean(类型或名称)，才注册bean到IOC容器。</li><li>@ConditionalOnProperty：判断配置文件中有对应属性和值，才注册bean到IOC容器。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnClass(name=&quot;io.jsonwebtoken.Jwts&quot;)</span><span class="hljs-comment">//当前环境存在指定的这个类时,才声明该bean</span><br><span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123; ... &#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><span class="hljs-comment">//当不存在当前类型的bean时,才声明该bean</span><br><span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123; ... &#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnProperty(name=&quot;name&quot;,havingValue=&quot;itheima&quot;)</span><span class="hljs-comment">//配置文件中存在对应的属性和值,才注册bean到IOC容器。</span><br><span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123; ... &#125;<br></code></pre></td></tr></table></figure><h2 id="4-WEB后端开发总结"><a href="#4-WEB后端开发总结" class="headerlink" title="4. WEB后端开发总结"></a>4. WEB后端开发总结</h2><p><img src="/img/blogs/java/javaweb/8.4.1.png"></p><p><img src="/img/blogs/java/javaweb/8.4.2.png"></p><h1 id="九-Maven高级"><a href="#九-Maven高级" class="headerlink" title="九. Maven高级"></a>九. Maven高级</h1><h2 id="1-分模块设计与开发"><a href="#1-分模块设计与开发" class="headerlink" title="1. 分模块设计与开发"></a>1. 分模块设计与开发</h2><p>将项目按照功能拆分为若干个子模块，方便项目的管理维护、扩展，方便模块间的相互调用、资源共享</p><h2 id="2-继承与聚合"><a href="#2-继承与聚合" class="headerlink" title="2. 继承与聚合"></a>2. 继承与聚合</h2><h4 id="A-继承"><a href="#A-继承" class="headerlink" title="A. 继承"></a>A. 继承</h4><h5 id="1-继承的介绍"><a href="#1-继承的介绍" class="headerlink" title="1. 继承的介绍"></a>1. 继承的介绍</h5><ul><li>概念:继承描述的是两个工程间的关系,与java中的继承相似,子工程可以继承父工程中的配置信息,常见于依赖关系的继承。</li><li>作用:简化依赖配置、统一管理依赖</li><li>实现 :<code>&lt;parent&gt; ..&lt;/parent&gt;</code></li></ul><p><img src="/img/blogs/java/javaweb/9.2.1.png"></p><h5 id="2-继承关系实现"><a href="#2-继承关系实现" class="headerlink" title="2. 继承关系实现"></a>2. 继承关系实现</h5><ol><li>创建maven模块tlias-parent,该工程为父工程,设置打包方式pom(默认jar)。</li><li>在子工程的pom.xml文件中,配置继承关系。</li><li>在父工程中配置各个工程共有的依赖(子工程会自动继承父工程的依赖)。</li></ol><p><img src="/img/blogs/java/javaweb/9.2.2.png"></p><h5 id="3-版本锁定"><a href="#3-版本锁定" class="headerlink" title="3. 版本锁定"></a>3. 版本锁定</h5><p>在maven中,可以在父工程的pom文件中通过<code>&lt;dependencyManagement&gt;</code>来统一管理依赖版本。</p><p>在父工程中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- JWT令牌 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/blogs/java/javaweb/9.2.3.png"></p><p><code>&lt;dependencyManagement&gt;</code>与<code>&lt;dependencies&gt;</code>的区别是什么?</p><ul><li><code>&lt;dependencies&gt;</code>是直接依赖,在父工程配置了依赖,子工程会直接继承下来。</li><li><code>&lt;dependencyManagement&gt;</code>是统一管理依赖版本,不会直接依赖,还需要在子工程中引入所需依赖(无需指定版本)</li></ul><h4 id="B-聚合"><a href="#B-聚合" class="headerlink" title="B. 聚合"></a>B. 聚合</h4><ul><li><p>将多个模块组成一个整体，同时进行项目的构建</p></li><li><p>聚合工程：一个不具有业务功能的空工程(有且只有一个pom文件)</p></li><li><p>作用：快速构建项目</p></li><li><p>maven中可以通过<code>&lt;modules&gt;</code>设置当前聚合工程所包含的子模块名称</p></li></ul><p>父工程(聚合工程)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 聚合 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span> .. /tlias-pojo<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span> .. /tlias-utils<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span> .. /tlias-web-management<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="C-继承与聚合的关联"><a href="#C-继承与聚合的关联" class="headerlink" title="C. 继承与聚合的关联"></a>C. 继承与聚合的关联</h4><ul><li><p>作用</p><ul><li>聚合用于快速构建项目</li><li>继承用于简化依赖配置、统一管理依赖</li></ul></li><li><p>相同点:</p><ul><li>聚合与继承的pom.xml文件打包方式均为pom,可以将两种关系制作到同一个pom文件中</li><li>聚合与继承均属于设计型模块,并无实际的模块内容</li></ul></li><li><p>不同点:</p><ul><li>聚合是在聚合工程中配置关系,聚合可以感知到参与聚合的模块有哪些</li><li>继承是在子模块中配置关系,父模块无法感知哪些子模块继承了自己</li></ul></li></ul><h2 id="3-私服"><a href="#3-私服" class="headerlink" title="3. 私服"></a>3. 私服</h2><p>私服是一种特殊的远程仓库,它是架设在<code>局域网内的仓库服务</code>,用来代理位于外部的中央仓库,用于解决团队内部的资源共享与资源同步问题。</p><p><img src="/img/blogs/java/javaweb/9.3.1.png"></p><p>依赖查找顺序：<br>本地仓库-&gt;私服-&gt;中央仓库</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>JAVA</tag>
      
      <tag>javaweb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE学习笔记</title>
    <link href="/2025/02/11/JAVA/javase/"/>
    <url>/2025/02/11/JAVA/javase/</url>
    
    <content type="html"><![CDATA[<h1 id="一-JAVA基础语法"><a href="#一-JAVA基础语法" class="headerlink" title="一. JAVA基础语法"></a>一. JAVA基础语法</h1><h2 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h2><ul><li>单行注释： <code>//</code></li><li>多行注释： <code>/* */</code></li><li>文档注释： <code>/** */</code></li></ul><h2 id="2-字面量"><a href="#2-字面量" class="headerlink" title="2. 字面量"></a>2. 字面量</h2><p>分为整数类型、小数类型、字符串类型、字符类型、布尔类型和空类型</p><ul><li>特殊字符<ul><li><code>&#39;\t&#39;</code>: 制表符，把前面字符串的长度补齐到8或者8的整数倍，让数据对齐</li><li><code>&#39;\r&#39;</code>:回车符</li><li><code>&#39;\n&#39;</code>:换行符</li></ul></li></ul><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><p><code>数据类型 变量名 = 数据值;</code></p><h2 id="4-计算机存储规则"><a href="#4-计算机存储规则" class="headerlink" title="4. 计算机存储规则"></a>4. 计算机存储规则</h2><p>任意数据都是用二进制的形式存储的</p><h2 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5. 数据类型"></a>5. 数据类型</h2><h4 id="A-基本数据类型"><a href="#A-基本数据类型" class="headerlink" title="A. 基本数据类型"></a>A. 基本数据类型</h4><table>    <tr>        <th>数据类型</th>         <th>关键字</th>     </tr>    <tr>        <td rowspan="4">整数</td>        <td>byte</td>    </tr>    <tr>        <td>short</td>    </tr>    <tr>        <td>int</td>    </tr>        <tr>        <td>long</td>    </tr>    <tr>        <td rowspan="2">浮点数</td>        <td>float</td>    </tr>    <tr>        <td>double</td>    </tr>    <tr>        <td>字符</td>        <td>char</td>    </tr>    <tr>        <td>布尔</td>        <td>boolean</td>    </tr></table><h4 id="B-引用数据类型"><a href="#B-引用数据类型" class="headerlink" title="B. 引用数据类型"></a>B. 引用数据类型</h4><h2 id="6-标识符"><a href="#6-标识符" class="headerlink" title="6. 标识符"></a>6. 标识符</h2><p>自己给变量、类等起名字</p><ul><li>由数字、字母、下划线和美元符($)组成</li><li>小驼峰命名(方法、变量)<ol><li>标识符为一个单词，全部小写：<code>name</code></li><li>标识符为多个单词组成，第一个单词首字母小写，其他单词首字母大写：<code>firstName</code></li></ol></li><li>大驼峰命名(类名)<ol><li>标识符为一个单词，首字母大写：<code>Student</code></li><li>标识符由多个单词组成，每个单词首字母大写：<code>GoodStudent</code></li></ol></li></ul><h2 id="7-键盘录入"><a href="#7-键盘录入" class="headerlink" title="7. 键盘录入"></a>7. 键盘录入</h2><p>用<code>Scanner</code>类接收键盘输入的数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.导包</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//2.创建对象</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入第一个数字&quot;</span>);<br>        <span class="hljs-comment">//3.接收数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;请输入第二个数字”);</span><br><span class="hljs-string">        int number2 = sc.nextInt() ;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        System.out.println(number1 + number2);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8. 运算符"></a>8. 运算符</h2><h4 id="A-算术运算符"><a href="#A-算术运算符" class="headerlink" title="A. 算术运算符"></a>A. 算术运算符</h4><p>+、-、*、&#x2F;、%(取模)</p><ul><li>类型转换<ol><li>隐式转换：把取值范围小的数值自动转成取值范围大的数据(byte&#x3D;&gt;short&#x3D;&gt;int&#x3D;&gt;long&#x3D;&gt;float&#x3D;&gt;double)</li><li>强制转换：<code>目标数据类型 变量名 = (目标数据类型)被强转的数据;</code><br>例：</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)a; <span class="hljs-comment">//强制转换</span><br></code></pre></td></tr></table></figure><ul><li>字符串相加<br>“+”: 100 + “100” &#x2F;&#x2F;“100100”</li><li>字符相加：会把字符通过ASCII码表查询到相应数字再进行计算</li></ul><h4 id="B-自增自减运算符"><a href="#B-自增自减运算符" class="headerlink" title="B. 自增自减运算符"></a>B. 自增自减运算符</h4><p>++、–</p><h4 id="C-赋值运算符"><a href="#C-赋值运算符" class="headerlink" title="C. 赋值运算符"></a>C. 赋值运算符</h4><p>&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</p><h4 id="D-关系运算符"><a href="#D-关系运算符" class="headerlink" title="D. 关系运算符"></a>D. 关系运算符</h4><p>&#x3D;&#x3D;,!&#x3D;,&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;</p><h4 id="E-逻辑运算符"><a href="#E-逻辑运算符" class="headerlink" title="E. 逻辑运算符"></a>E. 逻辑运算符</h4><p>&amp;(与),|(或),^(异或),!(非)</p><ul><li>短路逻辑运算符(如果左边能确定整个表达式的结果，右边不执行)<ol><li>&amp;&amp;(短路与)</li><li>||(短路或)</li></ol></li></ul><h4 id="F-三元运算符"><a href="#F-三元运算符" class="headerlink" title="F. 三元运算符"></a>F. 三元运算符</h4><p><code>关系表达式?表达式1:表达式2;</code></p><h4 id="G-运算符优先级"><a href="#G-运算符优先级" class="headerlink" title="G. 运算符优先级"></a>G. 运算符优先级</h4><p>()优先于所有</p><h2 id="9-流程控制语句"><a href="#9-流程控制语句" class="headerlink" title="9. 流程控制语句"></a>9. 流程控制语句</h2><h4 id="A-顺序结构"><a href="#A-顺序结构" class="headerlink" title="A. 顺序结构"></a>A. 顺序结构</h4><p>代码按顺序依次执行</p><h4 id="B-分支结构"><a href="#B-分支结构" class="headerlink" title="B. 分支结构"></a>B. 分支结构</h4><h5 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1. if语句"></a>1. if语句</h5><p>格式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(关系表达式)&#123;<br>    语句体;<br>&#125;<br></code></pre></td></tr></table></figure><p>格式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(关系表达式)&#123;<br>    语句体<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>    语句体<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>格式三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(关系表达式<span class="hljs-number">1</span>)&#123;<br>    语句体<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(关系表达式<span class="hljs-number">2</span>)&#123;<br>    语句体<span class="hljs-number">2</span>;<br>&#125;<br>...<br><span class="hljs-keyword">else</span>&#123;<br>    语句体n;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-switch语句"><a href="#2-switch语句" class="headerlink" title="2. switch语句"></a>2. switch语句</h5><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>        语句体<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>        语句体<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>    ...<br>    <span class="hljs-keyword">default</span>:<br>        语句体n;<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>default可以省略，语法不会有问题，但不建议省略</li><li>default习惯写在最下面</li><li>case穿透：语句中没有写break，程序会一直执行</li></ul><h4 id="C-循环结构"><a href="#C-循环结构" class="headerlink" title="C. 循环结构"></a>C. 循环结构</h4><h5 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1. for循环"></a>1. for循环</h5><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化语句;条件判断语句;条件控制语句)&#123;<br>    循环体语句;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>键盘录入两个数字，表示一个范围，统计这个范围中，既能被3整除，又能被5整除数字有多少个。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">addNum</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入两个整数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> num1; i &lt;= num2; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) &#123;<br>                count++;<br>                System.out.println(i + <span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;这样的数字有&quot;</span> + count + <span class="hljs-string">&quot;个&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2. while循环"></a>2. while循环</h5><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">初始化语句;<br><span class="hljs-keyword">while</span>(条件判断语句)&#123;<br>    循环体语句;<br>    条件控制语句;<br>&#125;<br>循环下面的其他语句<br></code></pre></td></tr></table></figure><h5 id="3-无限循环"><a href="#3-无限循环" class="headerlink" title="3. 无限循环"></a>3. 无限循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(;;)&#123;<br>    System.out.println(<span class="hljs-string">&quot;一直循环&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>))&#123;<br>    System.out.println(<span class="hljs-string">&quot;一直循环&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-循环跳转控制语句"><a href="#4-循环跳转控制语句" class="headerlink" title="4. 循环跳转控制语句"></a>4. 循环跳转控制语句</h5><ul><li>continue: 结束本次循环，继续下次循环</li><li>break: 结束整个循环</li></ul><h2 id="10-数组"><a href="#10-数组" class="headerlink" title="10. 数组"></a>10. 数组</h2><h4 id="A-数组的介绍"><a href="#A-数组的介绍" class="headerlink" title="A. 数组的介绍"></a>A. 数组的介绍</h4><p>数组是一种容器，可以存储同类数据类型的多个值。</p><h4 id="B-数组的定义和初始化"><a href="#B-数组的定义和初始化" class="headerlink" title="B. 数组的定义和初始化"></a>B. 数组的定义和初始化</h4><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型 [] 数组名;<br><span class="hljs-type">int</span> [] array;<br></code></pre></td></tr></table></figure><h5 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2. 初始化"></a>2. 初始化</h5><ul><li>静态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 数组名 = <span class="hljs-keyword">new</span> 数据类型[]&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,....&#125;;<br><span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-comment">// 简化格式</span><br>数据类型[] 数组名 = &#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,...&#125;;<br><span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><ul><li>动态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 数组名 = <span class="hljs-keyword">new</span> 数据类型[数组长度];<br><span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><h4 id="3-数组元素访问"><a href="#3-数组元素访问" class="headerlink" title="3. 数组元素访问"></a>3. 数组元素访问</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<span class="hljs-comment">//1</span><br>System.out.println(arr[<span class="hljs-number">1</span>]);<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h4 id="4-数组的遍历"><a href="#4-数组的遍历" class="headerlink" title="4. 数组的遍历"></a>4. 数组的遍历</h4><p>用循环获取数组变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>    System.out.println(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-数组的内存图"><a href="#5-数组的内存图" class="headerlink" title="5. 数组的内存图"></a>5. 数组的内存图</h4><h5 id="JAVA内存分配"><a href="#JAVA内存分配" class="headerlink" title="JAVA内存分配"></a>JAVA内存分配</h5><ul><li>栈： 方法运行时使用的内存，比如main方法运行进入方法栈执行</li><li>堆： 存储对象或数组，<strong>new</strong>来创建，存储在堆内存</li><li>方法区： 存储可以运行的class文件</li><li>寄存器： 给CPU使用</li></ul><h2 id="11-方法"><a href="#11-方法" class="headerlink" title="11. 方法"></a>11. 方法</h2><h4 id="A-什么是方法"><a href="#A-什么是方法" class="headerlink" title="A. 什么是方法"></a>A. 什么是方法</h4><p>方法是程序运行中最小的执行单元</p><h4 id="B-方法的定义格式和调用"><a href="#B-方法的定义格式和调用" class="headerlink" title="B. 方法的定义格式和调用"></a>B. 方法的定义格式和调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> 返回值类型 方法名(参数)&#123;<br>    方法体;<br>    <span class="hljs-keyword">return</span> 返回值;<br>&#125;<br><span class="hljs-comment">//调用</span><br>方法名();<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        getSum(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>); <span class="hljs-comment">//调用</span><br>    &#125;<br>    <span class="hljs-comment">//定义</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1 + num2;<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-方法重载"><a href="#C-方法重载" class="headerlink" title="C. 方法重载"></a>C. 方法重载</h4><p>在同一个类中，方法名相同，参数不同的方法。不看返回值类型。</p><ul><li>参数不同：个数不同、类型不同、顺序不同</li></ul><h2 id="12-二维数组"><a href="#12-二维数组" class="headerlink" title="12. 二维数组"></a>12. 二维数组</h2><ul><li>二维数组的静态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[][] 数组名 = <span class="hljs-keyword">new</span> 数据类型[][]&#123;&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;,&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#125;;<br><span class="hljs-comment">// 简化格式</span><br>数据类型[][] 数组名 = &#123;&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;,&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] array = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><ul><li>二维数组的动态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[][] 数组名 = <span class="hljs-keyword">new</span> 数据类型[m][n];<br><span class="hljs-type">int</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m][n];<br></code></pre></td></tr></table></figure><ul><li>遍历二维数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt; arr.length; i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; j &lt; arr[i].length; j++)&#123;<br>        System.out.print(arr[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二-JAVA进阶"><a href="#二-JAVA进阶" class="headerlink" title="二. JAVA进阶"></a>二. JAVA进阶</h1><h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h2><h4 id="A-设计对象并使用"><a href="#A-设计对象并使用" class="headerlink" title="A. 设计对象并使用"></a>A. 设计对象并使用</h4><h5 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1. 类和对象"></a>1. 类和对象</h5><ul><li>类：是对象共同特征的描述</li><li>对象：真实存在的具体东西</li><li>必须先设计类，才能获得对象</li></ul><h5 id="2-定义类"><a href="#2-定义类" class="headerlink" title="2. 定义类"></a>2. 定义类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 类名&#123;<br>    <span class="hljs-number">1</span>、成员变量（代表属性，一般是名词）<br>    <span class="hljs-number">2</span>、成员方法（代表行为，一般是动词）<br>    <span class="hljs-number">3</span>、构造器<br>    <span class="hljs-number">4</span>、代码块<br>    <span class="hljs-number">5</span>、内部类<br>&#125;<br><br><span class="hljs-comment">// 获取类的对象</span><br>类名 对象名 = <span class="hljs-keyword">new</span> 类名();<br><br>对象名.成员变量<span class="hljs-comment">//访问属性</span><br>对象名.方法名(...)<span class="hljs-comment">//访问行为</span><br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-comment">//属性(成员变量)</span><br>    String brand;<br>    <span class="hljs-type">double</span> price;<br>    <span class="hljs-comment">//行为(方法)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playGame</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 获取类的对象</span><br><span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br></code></pre></td></tr></table></figure><h5 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h5><ul><li>Javabean类：用来描述一类事物的类，是不写main方法的</li><li>测试类：编写main方法的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//javabean类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlFriend</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    String gender;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;睡觉觉...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shopping</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;逛商场ing&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlfriendTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">gf1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GirlFriend</span>();<br>        gf1.name = <span class="hljs-string">&quot;小李子&quot;</span>;<br>        gf1.age = <span class="hljs-number">18</span>;<br>        gf1.gender = <span class="hljs-string">&quot;female&quot;</span>;<br>        System.out.println(gf1.name);<br>        System.out.println(gf1.age);<br>        System.out.println(gf1.gender);<br><br>        gf1.sleep();<br>        gf1.shopping();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="B-封装"><a href="#B-封装" class="headerlink" title="B. 封装"></a>B. 封装</h4><p><strong>对象代表什么，就得封装对应的数据，并提供数据对应的行为</strong></p><h4 id="C-private关键字-保证数据的安全性"><a href="#C-private关键字-保证数据的安全性" class="headerlink" title="C. private关键字(保证数据的安全性)"></a>C. private关键字(保证数据的安全性)</h4><ul><li>是一个权限修饰符</li><li>可以修饰成员(成员变量和成员方法)</li><li>被private修饰的成员只能在<strong>本类中</strong>才能访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//确保age成员变量的值是正确范围内的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlFriend</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">18</span> &amp;&amp; a &lt;= <span class="hljs-number">50</span>) &#123;<br>            age = a;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;非法数据&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="D-this关键字"><a href="#D-this关键字" class="headerlink" title="D. this关键字"></a>D. this关键字</h4><p>区别成员变量和局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlFriend</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;  <span class="hljs-comment">//成员变量age</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;  <span class="hljs-comment">//局部变量age</span><br>        System.out.println(<span class="hljs-built_in">this</span>.age); <span class="hljs-comment">//如果只打印age会触发就近原则打印局部变量age;使用this.age才会打印成员变量age</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//使用场景</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;  <span class="hljs-comment">//给成员变量age赋值</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="E-构造方法"><a href="#E-构造方法" class="headerlink" title="E. 构造方法"></a>E. 构造方法</h4><p>在创建对象的时候给成员变量进行赋值的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    修饰符 类名(参数)&#123;<br>        方法体;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//例子</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//空参构造，系统默认会有</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-comment">//带参构造</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小李&quot;</span>,<span class="hljs-number">20</span>); <span class="hljs-comment">//调用带参构造进行赋值</span><br></code></pre></td></tr></table></figure><ul><li>方法名与类名相同</li><li>没有返回值类型，没有返回值</li><li>无论是否使用，都要写上空参构造和带参构造</li></ul><h4 id="F-标准JavaBean"><a href="#F-标准JavaBean" class="headerlink" title="F. 标准JavaBean"></a>F. 标准JavaBean</h4><ul><li>类名<strong>见名知意</strong></li><li>成员变量使用private修饰</li><li>提供两种构造方法(无参的和带全部参)</li><li>成员方法：提供每个成员变量对应的setXX()和getXX()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">//空参构造方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String username, String password, <span class="hljs-type">int</span> age)</span> &#123;  <span class="hljs-comment">//带全部参构造方法</span><br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="G-基本数据类型和引用数据类型"><a href="#G-基本数据类型和引用数据类型" class="headerlink" title="G. 基本数据类型和引用数据类型"></a>G. 基本数据类型和引用数据类型</h4><ul><li>基本数据类型（如 int、double、char 等）直接存储在栈内存中，它们的值是实际的数据。</li><li>引用数据类型（如类、数组等）在栈内存中存储的是对象的引用（存储的是地址值），而对象本身存储在堆内存中。</li></ul><h2 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2. 字符串"></a>2. 字符串</h2><h4 id="A-String"><a href="#A-String" class="headerlink" title="A. String"></a>A. String</h4><p>java.lang.String类</p><ul><li>字符串的内容是不会发生改变的，它的对象在创建后不能被更改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.使用直接赋值的方式获取一个字符串对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>System.out.println(s1);<span class="hljs-comment">//abc</span><br><br><span class="hljs-comment">//2.使用new的方式来获取一个字符串对象. 空参构造:可以获取一个空白的字符串对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br>System.out.println(<span class="hljs-string">&quot;@&quot;</span> + s2 + <span class="hljs-string">&quot;!&quot;</span>);<span class="hljs-comment">//&quot;&quot;</span><br><br><span class="hljs-comment">//3. 传递一个字符数组,根据字符数组的内容再创建一个新的字符串对象</span><br><span class="hljs-type">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span> ,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chs);<br>System.out.println(s4);<span class="hljs-comment">//abcd</span><br><br><span class="hljs-comment">//4.传递一个字节数组,根据字节数组的内容再创建一个新的字符串对象</span><br><span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<br>System.out.println(s5);<span class="hljs-comment">//abcd</span><br></code></pre></td></tr></table></figure><h4 id="B-字符串常用方法"><a href="#B-字符串常用方法" class="headerlink" title="B. 字符串常用方法"></a>B. 字符串常用方法</h4><h5 id="1-字符串比较"><a href="#1-字符串比较" class="headerlink" title="1. 字符串比较"></a>1. 字符串比较</h5><ul><li>equals(要比较的字符串)： 完全一样才是true</li><li>equalsIgnoreCase(要比较的字符串): 忽略大小写</li></ul><h5 id="2-遍历字符串"><a href="#2-遍历字符串" class="headerlink" title="2. 遍历字符串"></a>2. 遍历字符串</h5><ul><li>charAt(int index): 根据索引返回字符</li><li>length(): 返回此字符串的长度</li></ul><p>键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符和数字字符出现的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个字符串&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sc.next();<br><br><span class="hljs-type">int</span> <span class="hljs-variable">bigCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">smallCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">numberCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> str.charAt(i);<br>    <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>        smallCount++;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>) &#123;<br>        bigCount++;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        numberCount++;<br>    &#125;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;小写字母有:&quot;</span> + smallCount + <span class="hljs-string">&quot;个&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;大写字母有:&quot;</span> + bigCount + <span class="hljs-string">&quot;个&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;数字字母有:&quot;</span> + numberCount + <span class="hljs-string">&quot;个&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="3-字符串屏蔽"><a href="#3-字符串屏蔽" class="headerlink" title="3. 字符串屏蔽"></a>3. 字符串屏蔽</h5><ul><li>substring(int beginIndex, int endIndex): 截取，截取范围是[beginIndex, endIndex)</li><li>substring(int beginIndex): 截取到末尾</li><li>replace(旧值,新值)： 替换</li></ul><p>手机号码屏蔽</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">phoneNumber</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;13112349468&quot;</span>;<br><span class="hljs-comment">//截取手机号码前面三位</span><br><span class="hljs-type">String</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> phoneNumber.substring(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">//截取手机号码后面四位</span><br><span class="hljs-type">String</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> phoneNumber.substring(<span class="hljs-number">7</span>);<br><span class="hljs-comment">//拼接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> start + <span class="hljs-string">&quot; **** &quot;</span> + end;<br>System.out.println(result);<br></code></pre></td></tr></table></figure><p>敏感词屏蔽</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">String talk=<span class="hljs-string">&quot;你玩的真好,以后不要再玩了,TMD,CNM&quot;</span>;<br><span class="hljs-comment">//定义一个敏感词库</span><br>String[] arr = &#123;<span class="hljs-string">&quot;TMD&quot;</span>, <span class="hljs-string">&quot;CNM&quot;</span>, <span class="hljs-string">&quot;SB&quot;</span>, <span class="hljs-string">&quot;MLGB&quot;</span>&#125;;<br><span class="hljs-comment">//循环得到数组中的每一个敏感词,依次进行替换</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    talk = talk.replace(arr[i], <span class="hljs-string">&quot;***&quot;</span>);<br>&#125;<br>System.out.println(talk);<br></code></pre></td></tr></table></figure><h4 id="C-StringBuilder"><a href="#C-StringBuilder" class="headerlink" title="C. StringBuilder"></a>C. StringBuilder</h4><p>可以看成一个容器，创建之后里面的内容是可变的</p><ul><li>用于提高字符串的操作效率</li><li>使用场景：1.<strong>字符串的拼接</strong> 2.<strong>字符串的反转</strong></li></ul><h5 id="1-StringBuilder构造方法"><a href="#1-StringBuilder构造方法" class="headerlink" title="1. StringBuilder构造方法"></a>1. StringBuilder构造方法</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder()</td><td>创建一个空白可变字符串对象，不含有任何内容</td></tr><tr><td>public StringBuilder(String str)</td><td>根据字符串的内容，创建可变字符串对象</td></tr></tbody></table><h5 id="2-StringBuilder常用方法"><a href="#2-StringBuilder常用方法" class="headerlink" title="2. StringBuilder常用方法"></a>2. StringBuilder常用方法</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder append(任意类型)</td><td>添加数据，返回对象本身</td></tr><tr><td>public StringBuilder reverse()</td><td>反转容器中的内容</td></tr><tr><td>public int length()</td><td>返回长度</td></tr><tr><td>public String toString</td><td>通过toString()可以实现把Stringbuilder转换为String</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringStudy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-comment">//添加</span><br>        sb.append(<span class="hljs-string">&quot;123&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;abc&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;scasc&quot;</span>).append(<span class="hljs-string">&quot;qwer&quot;</span>).append(<span class="hljs-string">&quot;zxcv&quot;</span>);<span class="hljs-comment">//链式编程</span><br>        System.out.println(sb);<br>        <span class="hljs-comment">//反转</span><br>        sb.reverse();<br>        System.out.println(sb);<br>        <span class="hljs-comment">//获取长度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> sb.length();<br>        System.out.println(len);<br>        <span class="hljs-comment">//把StringBuilder变回String类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sb.toString();<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="D-StringJoiner"><a href="#D-StringJoiner" class="headerlink" title="D. StringJoiner"></a>D. StringJoiner</h4><p>主要用于<strong>字符串的拼接</strong></p><h5 id="1-StringJoiner构造方法"><a href="#1-StringJoiner构造方法" class="headerlink" title="1. StringJoiner构造方法"></a>1. StringJoiner构造方法</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner(间隔符号)</td><td>创建一个StringJoiner对象，指定拼接时的间隔符号</td></tr><tr><td>public StringJoiner(间隔符号,开始符号,结束符号)</td><td>创建一个StringJoiner对象，指定拼接时的间隔符号、开始符号、结束符号</td></tr></tbody></table><h5 id="2-StringJoiner成员方法"><a href="#2-StringJoiner成员方法" class="headerlink" title="2. StringJoiner成员方法"></a>2. StringJoiner成员方法</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner add(添加的内容)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public int length()</td><td>返回长度</td></tr><tr><td>public String toString()</td><td>返回一个字符串</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;, &quot;</span>, <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>);<br><span class="hljs-comment">//添加元素</span><br>sj.add(<span class="hljs-string">&quot;aaa&quot;</span>).add(<span class="hljs-string">&quot;bbb&quot;</span>).add(<span class="hljs-string">&quot;ccc&quot;</span>);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> sj.length();<br>System.out.println(len);<span class="hljs-comment">//15</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sj.toString();<br>System.out.println(str);<span class="hljs-comment">//[aaa, bbb, ccc]</span><br></code></pre></td></tr></table></figure><h2 id="3-集合"><a href="#3-集合" class="headerlink" title="3. 集合"></a>3. 集合</h2><h4 id="A-数组和集合的区别"><a href="#A-数组和集合的区别" class="headerlink" title="A. 数组和集合的区别"></a>A. 数组和集合的区别</h4><table><thead><tr><th>区别</th><th>数组</th><th>集合</th></tr></thead><tbody><tr><td>长度</td><td>数组长度固定</td><td>集合长度可变</td></tr><tr><td>存储类型</td><td>可以存基本数据类型和引用数据类型</td><td>只能存引用数据类型</td></tr></tbody></table><h4 id="B-创建集合对象"><a href="#B-创建集合对象" class="headerlink" title="B. 创建集合对象"></a>B. 创建集合对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h4 id="C-ArrayList成员方法"><a href="#C-ArrayList成员方法" class="headerlink" title="C. ArrayList成员方法"></a>C. ArrayList成员方法</h4><p>增删改查</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素,返回值表示是否添加成功</td></tr><tr><td>boolean remove(E e)</td><td>删除指定元素,返回值表示是否删除成功</td></tr><tr><td>E remove(int index)</td><td>删除指定索引的元素,返回被删除元素</td></tr><tr><td>E set(int index,E e)</td><td>修改指定索引下的元素,返回原来的元素</td></tr><tr><td>E get(int index)</td><td>获取指定索引的元素</td></tr><tr><td>int size()</td><td>集合的长度,也就是集合中元素的个数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArraylistStudy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//添加元素</span><br>        list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;ddd&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">//删除元素</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-string">&quot;ccc&quot;</span>);<span class="hljs-comment">//根据指定元素删除</span><br>        System.out.println(list);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-number">1</span>);<span class="hljs-comment">//根据索引删除元素</span><br>        System.out.println(list);<br><br>        <span class="hljs-comment">//修改元素</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;ccc&quot;</span>);<br>        System.out.println(list);<br>        <span class="hljs-comment">//查询元素</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br>        System.out.println(s);<br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> list.get(i);<br>            System.out.println(str1);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-面向对象进阶"><a href="#4-面向对象进阶" class="headerlink" title="4. 面向对象进阶"></a>4. 面向对象进阶</h2><h4 id="A-static"><a href="#A-static" class="headerlink" title="A. static"></a>A. static</h4><p>表示静态，是java中一个修饰符，可以修饰成员方法、成员变量</p><h5 id="1-静态变量：被static修饰的成员变量"><a href="#1-静态变量：被static修饰的成员变量" class="headerlink" title="1. 静态变量：被static修饰的成员变量"></a>1. 静态变量：被static修饰的成员变量</h5><ul><li>特点：被该类所有对象<strong>共享</strong></li><li>不属于对象，属于类；随着类的加载而加载，优先于对象存在</li><li>调用方法<ol><li>类名调用(推荐)</li><li>对象名调用</li></ol></li></ul><h5 id="2-静态方法：被static修饰的成员方法"><a href="#2-静态方法：被static修饰的成员方法" class="headerlink" title="2. 静态方法：被static修饰的成员方法"></a>2. 静态方法：被static修饰的成员方法</h5><p>多用于测试类、工具类中，javabean类中很少会用</p><ul><li>调用方法<ol><li>类名调用(推荐)</li><li>对象名调用</li></ol></li></ul><h5 id="3-static的注意事项"><a href="#3-static的注意事项" class="headerlink" title="3. static的注意事项"></a>3. static的注意事项</h5><ul><li>静态方法中只能访问静态(静态变量和静态方法)</li><li>非静态方法可以访问所有</li><li>静态方法中没有this关键字</li></ul><h5 id="4-main方法"><a href="#4-main方法" class="headerlink" title="4. main方法"></a>4. main方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>public: 被JVM调用,访问权限足够大</li><li>static: 被JVM调用,不用创建对象,直接类名访问</li><li>void: 因为main方法是静态的,所以测试类中其他方法也需要是静态的。<br>被JVM调用,不需要给JVM返回值</li><li>main: 一个通用的名称,虽然不是关键字,但是被JVM识别</li><li>String[] args: 用于接收键盘录入数据，已经没有用了</li></ul><h4 id="B-继承"><a href="#B-继承" class="headerlink" title="B. 继承"></a>B. 继承</h4><h5 id="1-什么是继承"><a href="#1-什么是继承" class="headerlink" title="1. 什么是继承"></a>1. 什么是继承</h5><ul><li>封装：对象代表什么，就得封装对应的数据，并提供数据对应的行为</li><li>java中提供<strong>extends</strong>用于一个类和另一个类建立起继承关系<br><code>public class Student extends Preson{}</code><br><code>public class 子类 extends 父类{}</code></li><li>Student称为子类(派生类)，Person称为父类(基类或超类)</li><li>使用继承的好处<ol><li>可以把多个子类中重复的代码抽取到父类中，提高代码的复用性</li><li>子类可以在父类的基础上增加其他功能，使子类更强大</li></ol></li><li>什么时候用继承：当类与类之间，<strong>存在相同的内容</strong>，并<strong>满足子类是父类的一种</strong>，就可以考虑使用继承</li></ul><h5 id="2-继承的特点"><a href="#2-继承的特点" class="headerlink" title="2. 继承的特点"></a>2. 继承的特点</h5><p><strong>Java只支持单继承，不支持多继承，但支持多层继承</strong></p><ul><li>单继承： 一个子类只能继承一个父类</li><li>多继承：子类不能同时继承多个父类(不支持！)</li><li>多层继承：子类A继承父类B，父类B可以继承父类C</li><li>JAVA中所有每个类都直接或间接的继承于Object类</li><li>子类只能访问父类中非私有的成员</li></ul><h5 id="3-子类能继承父类哪些内容"><a href="#3-子类能继承父类哪些内容" class="headerlink" title="3. 子类能继承父类哪些内容"></a>3. 子类能继承父类哪些内容</h5><table><thead><tr><th>父类中的内容</th><th>非私有</th><th>private</th></tr></thead><tbody><tr><td>构造方法</td><td>不能继承</td><td>不能继承</td></tr><tr><td>成员变量</td><td>能继承</td><td>能继承</td></tr><tr><td>成员方法</td><td>能继承</td><td>不能继承</td></tr></tbody></table><ul><li>父类中的<strong>构造方法不能</strong>被子类继承</li><li>父类中的<strong>成员变量可以</strong>被子类继承，但私有的变量不能直接被使用</li><li>父类中的虚方法才能被子类继承<ul><li>虚方法表：非private,非static,非final</li></ul></li></ul><h5 id="4-继承中成员变量的访问特点"><a href="#4-继承中成员变量的访问特点" class="headerlink" title="4. 继承中成员变量的访问特点"></a>4. 继承中成员变量的访问特点</h5><ul><li>就近原则：谁离我近，我就用谁</li><li>先在局部位置找，本类成员位置找，父类成员位置找，逐级往上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Fu&quot;</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Zi&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ziShow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ziShow&quot;</span>;<br>        System.out.println(name);<span class="hljs-comment">//ziShow</span><br>        System.out.println(<span class="hljs-built_in">this</span>.name);<span class="hljs-comment">//Zi</span><br>        System.out.println(<span class="hljs-built_in">super</span>.name);<span class="hljs-comment">//Fu</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-继承中成员方法的访问特点"><a href="#5-继承中成员方法的访问特点" class="headerlink" title="5. 继承中成员方法的访问特点"></a>5. 继承中成员方法的访问特点</h5><ul><li>直接调用满足就近原则：谁离我近，我就用谁</li><li>super调用，直接访问父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃米饭,吃菜&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drink</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;喝开水&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//留学生</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OverseasStudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lunch</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.eat();<span class="hljs-comment">//吃意大利面</span><br>        <span class="hljs-built_in">this</span>.drink();<span class="hljs-comment">//喝凉水</span><br><br>        <span class="hljs-built_in">super</span>.eat();<span class="hljs-comment">//吃米饭,吃菜</span><br>        <span class="hljs-built_in">super</span>.drink();<span class="hljs-comment">//喝开水</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃意大利面&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drink</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;喝凉水&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-方法的重写"><a href="#6-方法的重写" class="headerlink" title="6. 方法的重写"></a>6. 方法的重写</h5><p>当父类的方法不能满足子类现在的需求时，需要进行方法重写</p><ul><li>书写格式： 当继承体系中，子类出现了和父类中一模一样的方法声明，就称子类这个方法是重写的方法</li><li><strong>@Override</strong>重写注解(建议加上)：放在重写后的方法上，校验子类重写的语法是否正确</li><li>重写方法的名称、形参列表必须和父类一致，<strong>重写的方法尽量与父类保持一致</strong></li></ul><h5 id="7-构造方法的访问特点"><a href="#7-构造方法的访问特点" class="headerlink" title="7. 构造方法的访问特点"></a>7. 构造方法的访问特点</h5><ul><li>父类中的构造方法不会被子类继承</li><li>子类中所有的构造方法默认先访问父类中的无参构造，再执行自己</li><li>子类可以通过super调用父类的构造方法</li><li>子类构造方法的第一行有一个默认的super();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的无参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//子类构造方法中隐藏的super()去访问父类的无参构造</span><br>        <span class="hljs-built_in">super</span>();<br>        System.out.println(<span class="hljs-string">&quot;子类的无参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-this和super"><a href="#8-this和super" class="headerlink" title="8. this和super"></a>8. this和super</h5><ul><li>this: 理解成一个变量，表示当前方法调用者的地址值</li><li>super: 代表父类存储空间</li></ul><table><thead><tr><th>关键字</th><th>访问成员变量</th><th>访问成员方法</th><th>访问构造方法</th></tr></thead><tbody><tr><td>this</td><td>this.成员变量<br>访问本类成员变量</td><td>this.成员方法(…)<br>访问本类成员方法</td><td>this(…)<br>访问本类构造方法</td></tr><tr><td>super</td><td>super.成员变量<br>访问父类成员变量</td><td>super.成员方法(…)<br>访问父类成员方法</td><td>super(…)<br>访问父类构造方法</td></tr></tbody></table><h5 id="9-带有继承结构的标准Javabean类"><a href="#9-带有继承结构的标准Javabean类" class="headerlink" title="9. 带有继承结构的标准Javabean类"></a>9. 带有继承结构的标准Javabean类</h5><p>父类：员工</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String id, String name, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-comment">//工作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Employee worked!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//吃饭</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Employee eat!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类1：经理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> bouns;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Manager</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Manager</span><span class="hljs-params">(String id, String name, <span class="hljs-type">double</span> salary, <span class="hljs-type">double</span> bouns)</span> &#123;<br>        <span class="hljs-built_in">super</span>(id, name, salary);<br>        <span class="hljs-built_in">this</span>.bouns = bouns;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBouns</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bouns;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBouns</span><span class="hljs-params">(<span class="hljs-type">double</span> bouns)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bouns = bouns;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;管理其他人&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类2：厨师</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cook</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cook</span><span class="hljs-params">(String id, String name, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">super</span>(id, name, salary);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;厨师在做饭&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-多态"><a href="#C-多态" class="headerlink" title="C. 多态"></a>C. 多态</h4><h5 id="1-什么是多态"><a href="#1-什么是多态" class="headerlink" title="1. 什么是多态"></a>1. 什么是多态</h5><ul><li>同类型的对象，表现出的不同形态(对象的多种形态)</li><li>多态的表现形式：<code>父类类型 对象名称 = 子类对象;</code>，<code>Animal a = new Dog();</code></li><li>多态的前提<ul><li>有继承关系</li><li>有父类引用指向子类对象</li><li>有方法重写</li></ul></li></ul><h5 id="2-多态调用成员的特点"><a href="#2-多态调用成员的特点" class="headerlink" title="2. 多态调用成员的特点"></a>2. 多态调用成员的特点</h5><ul><li>调用<strong>成员变量</strong>的特点：编译看左边，运行也看左边</li><li>调用<strong>成员方法</strong>的特点：编译看左边，运行看右边</li></ul><h5 id="3-多态的优势和缺点"><a href="#3-多态的优势和缺点" class="headerlink" title="3. 多态的优势和缺点"></a>3. 多态的优势和缺点</h5><ul><li>优势：定义方法时，使用父类型作为参数，<strong>可以接收所有子类对象</strong>，体现多态的扩展性和便利</li><li>缺点：不能使用子类的特有功能(方法)</li><li>如果想要调用子类特有的方法，使用强制类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//先判断a是否为Dog类型,如果是,则强转成Dog类型,转换之后变量名为d</span><br><span class="hljs-comment">//如果不是,则不强转,结果是false</span><br>        <span class="hljs-keyword">if</span>(a <span class="hljs-keyword">instanceof</span> Dog d) &#123;<br>        d.lookHome();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a <span class="hljs-keyword">instanceof</span> Cat c)&#123;<br>            c.catchMouse();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;没有这个类型,无法转换&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="D-包"><a href="#D-包" class="headerlink" title="D. 包"></a>D. 包</h4><p>包就是文件夹。用来管理不同功能的类。</p><ul><li>导包的规则<ul><li>使用同一个包中的类不需要导包</li><li>使用java.lang包中的类不需要导包</li><li>其他都需要导包</li><li>如果同时使用两个包中的同名类，需要用全类名(含包名)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.study<br><br><span class="hljs-keyword">import</span> java.study.Student  <span class="hljs-comment">//导入java.study包中的Student类</span><br></code></pre></td></tr></table></figure><h4 id="E-final"><a href="#E-final" class="headerlink" title="E. final"></a>E. final</h4><table><thead><tr><th>final修饰</th><th>作用</th></tr></thead><tbody><tr><td>方法</td><td>表明该方法是最终方法，不能被重写</td></tr><tr><td>类</td><td>表明该类是最终类，不能被继承</td></tr><tr><td>变量</td><td>此时是常量</td></tr></tbody></table><ul><li>final修改基本数据类型:记录的值不能发生改变</li><li>final修饰引用数据类型:记录的地址值不能发生改变,内部的属性值还是可以改变的</li></ul><h4 id="F-权限修饰符"><a href="#F-权限修饰符" class="headerlink" title="F. 权限修饰符"></a>F. 权限修饰符</h4><p>用来控制一个成员能够被访问的范围<br>四种：private&lt;默认(空着不写)&lt;protected&lt;public</p><table><thead><tr><th>修饰符</th><th>同一个类中</th><th>同一个包中其他类</th><th>不同包下的子类</th><th>不同包下的无关类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>默认(空着不写)</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><ul><li>实际开发一般只用private和public<ul><li>成员变量私有</li><li>方法公开</li></ul></li></ul><h4 id="G-静态代码块"><a href="#G-静态代码块" class="headerlink" title="G. 静态代码块"></a>G. 静态代码块</h4><p>做数据的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span>&#123;<br>    <span class="hljs-keyword">static</span> ArrayList&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-comment">//添加一些用户信息</span><br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;12345678&quot;</span>,<span class="hljs-string">&quot;301001200101011234&quot;</span>,<span class="hljs-string">&quot;13812341234&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="H-抽象类"><a href="#H-抽象类" class="headerlink" title="H. 抽象类"></a>H. 抽象类</h4><p>如果一个类中存在抽象方法，那么该类就必须声明为抽象类</p><h5 id="1-抽象类的定义"><a href="#1-抽象类的定义" class="headerlink" title="1. 抽象类的定义"></a>1. 抽象类的定义</h5><p>将共性的行为(方法)抽取到父类之后。由于每个子类执行的内容是不一样，所以在父类中不能确定具体的方法体。该方法就可以定义为抽象类。<br>抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> 返回值类型 方法名(参数列表);<br></code></pre></td></tr></table></figure><p>抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> class 类名&#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="2-抽象类的特点"><a href="#2-抽象类的特点" class="headerlink" title="2. 抽象类的特点"></a>2. 抽象类的特点</h5><ul><li>抽象类不能实例化(创建对象)</li><li>抽象类不一定有抽象方法，有抽象方法的类一定是抽象类</li><li>可以有构造方法</li><li>抽象类的子类<ul><li>要么重写抽象类中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><h4 id="I-接口"><a href="#I-接口" class="headerlink" title="I. 接口"></a>I. 接口</h4><h5 id="1-接口的定义"><a href="#1-接口的定义" class="headerlink" title="1. 接口的定义"></a>1. 接口的定义</h5><ul><li>使用<code>interface</code>定义<br><code>public interface 接口名{}</code></li><li>接口不能实例化(不能创建对象)</li><li>接口和类之间是实现关系，通过<code>implements</code>表示<br><code>public class 类名 implements 接口名{}</code></li><li>接口的子类(实现类)<ul><li>要么重写接口中所有抽象方法</li><li>要么是抽象类</li></ul></li><li>接口和类的实现关系，可以单实现，也可以多实现<br><code>public class 类名 implements 接口名1, 接口名2{}</code></li><li>实现类还可以在继承一个类的同时实现多个接口<br><code>public class 类名 extends 父类 implements 接口名1, 接口名2{}</code></li></ul><h5 id="2-接口中成员的特点"><a href="#2-接口中成员的特点" class="headerlink" title="2. 接口中成员的特点"></a>2. 接口中成员的特点</h5><table><thead><tr><th>成员</th><th>特点</th></tr></thead><tbody><tr><td>成员变量</td><td>只能是常量<br>public static final</td></tr><tr><td>构造方法</td><td>没有</td></tr><tr><td>成员方法</td><td>只能是抽象方法<br>public abstract</td></tr></tbody></table><h5 id="3-接口和类之间的关系"><a href="#3-接口和类之间的关系" class="headerlink" title="3. 接口和类之间的关系"></a>3. 接口和类之间的关系</h5><ul><li>类和类的关系<br>  继承关系</li><li>类和接口的关系<br>  实现关系，可以单实现，可以多实现，可以在继承一个类时实现多个接口</li><li>接口和接口的关系<br>  继承关系，可以单继承，可以多继承</li></ul><h5 id="4-接口中的默认方法"><a href="#4-接口中的默认方法" class="headerlink" title="4. 接口中的默认方法"></a>4. 接口中的默认方法</h5><p><code>public default 返回值类型 方法名(参数列表){}</code></p><ul><li>默认方法不是抽象方法,所以不强制被重写。但是如果被重写,重写的时候去掉default关键字</li><li>public可以省略,default不能省略</li><li>如果实现了多个接口,多个接口中存在相同名字的默认方法,子类就必须对该方法进行重写</li></ul><h5 id="5-接口中的静态方法"><a href="#5-接口中的静态方法" class="headerlink" title="5. 接口中的静态方法"></a>5. 接口中的静态方法</h5><p><code>public static 返回值类型 方法名(参数列表){}</code><br><code>public static void show(){}</code></p><ul><li>静态方法只能通过接口名调用,不能通过实现类名或者对象名调用</li><li>public可以省略,static不能省略</li></ul><h5 id="6-接口中的私有方法"><a href="#6-接口中的私有方法" class="headerlink" title="6. 接口中的私有方法"></a>6. 接口中的私有方法</h5><p><code>private 返回值类型 方法名(参数列表){}</code><br><code>private void show(){}</code></p><p><code>private static 返回值类型 方法名(参数列表){}</code><br><code>private static void method(){}</code></p><h5 id="7-接口的应用"><a href="#7-接口的应用" class="headerlink" title="7. 接口的应用"></a>7. 接口的应用</h5><p>各种行为的规则，是行为的抽象</p><h5 id="8-接口的适配器设计模式"><a href="#8-接口的适配器设计模式" class="headerlink" title="8. 接口的适配器设计模式"></a>8. 接口的适配器设计模式</h5><p>当一个接口中抽象方法过多,但是我只要使用其中一部分的时候,就可以适配器设计模式</p><ul><li>书写步骤:<ol><li>编写中间类XXXAdapter,实现对应的接口</li><li>对接口中的抽象方法进行空实现</li><li>让真正的实现类继承中间类,并重写需要用的方法</li><li>为了避免其他类创建适配器类的对象,中间的适配器类用abstract进行修饰</li></ol></li></ul><h4 id="J-内部类"><a href="#J-内部类" class="headerlink" title="J. 内部类"></a>J. 内部类</h4><h5 id="1-内部类的定义"><a href="#1-内部类的定义" class="headerlink" title="1. 内部类的定义"></a>1. 内部类的定义</h5><p>在一个类的里面再定义一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;  <span class="hljs-comment">//外部类</span><br>    String carName;<br>    <span class="hljs-type">int</span> carAge;<br>    <span class="hljs-type">int</span> carColor;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span>&#123;   <span class="hljs-comment">//内部类</span><br>        String engineName;<br>        <span class="hljs-type">int</span> engineAge;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>内部类可以直接访问外部类的成员(包括私有)</li><li>外部类必须创建对象访问内部类的成员</li></ul><h5 id="2-成员内部类-了解"><a href="#2-成员内部类-了解" class="headerlink" title="2. 成员内部类(了解)"></a>2. 成员内部类(了解)</h5><ul><li>写在成员位置，属于外部类的成员</li><li>可以被修饰符修饰</li></ul><p>创建对象方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">外部类名.内部类名 对象名 =<span class="hljs-keyword">new</span> 外部类对象.内部类对象;<br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">oi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br></code></pre></td></tr></table></figure><p>成员内部类如何获取外部类的成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>            System.out.println(Outer.<span class="hljs-built_in">this</span>.a);<span class="hljs-comment">//10</span><br>            System.out.println(<span class="hljs-built_in">this</span>.a); <span class="hljs-comment">//20</span><br>            System.out.println(a); <span class="hljs-comment">//30</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-静态内部类-了解"><a href="#3-静态内部类-了解" class="headerlink" title="3. 静态内部类(了解)"></a>3. 静态内部类(了解)</h5><p>静态内部类只能访问外部类中的静态变量和静态方法，如果想要访问非静态的需要创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建静态内部对象方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">外部类名.内部类名 对象名 = <span class="hljs-keyword">new</span> 外部类名.内部类名;<br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">oi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.Inner();<br></code></pre></td></tr></table></figure><p>调用静态方法：<code>外部类名.内部类名.方法名();</code></p><h5 id="4-匿名内部类-重点"><a href="#4-匿名内部类-重点" class="headerlink" title="4. 匿名内部类(重点)"></a>4. 匿名内部类(重点)</h5><ul><li>本质是隐藏了名字的内部类</li><li>整体就是一个类的子类对象或者接口的实现类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 类名或接口名()&#123;<br>    重写方法;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Inter</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//重写方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;重写了eat方法&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>使用场景：当方法的参数是接口或类时，如果实现类只要使用一次，就可以用匿名内部类简化代码</li></ul><h2 id="5-常用API"><a href="#5-常用API" class="headerlink" title="5. 常用API"></a>5. 常用API</h2><h4 id="A-Math"><a href="#A-Math" class="headerlink" title="A. Math"></a>A. Math</h4><p>提供数学计算的工具类</p><h4 id="B-System"><a href="#B-System" class="headerlink" title="B. System"></a>B. System</h4><p>提供与系统相关的方法</p><ul><li>exit(): 停止虚拟机</li><li>currentTimeMillis(): 获取当前时间的毫秒值</li><li>arraycopy():  拷贝数组</li></ul><h4 id="C-Runtime"><a href="#C-Runtime" class="headerlink" title="C. Runtime"></a>C. Runtime</h4><p>当前虚拟机的运行环境</p><h4 id="D-Object"><a href="#D-Object" class="headerlink" title="D. Object"></a>D. Object</h4><p>Object是Java的顶级父类。所有的类都直接或间接继承于Object类</p><ul><li>只有无参构造</li><li>toString(): 返回字符串</li><li>equals(Object obj): 比较两个对象是否相等,比较的是地址值</li></ul><h4 id="E-对象克隆-对象复制"><a href="#E-对象克隆-对象复制" class="headerlink" title="E. 对象克隆(对象复制)"></a>E. 对象克隆(对象复制)</h4><p>把A对象的属性值完全拷贝给B对象<br><code>protected Object clone(int a)</code></p><ul><li>浅克隆：不管对象内部的属性是基本数据类型还是引用数据类型，都完全拷贝过来</li><li>深克隆：<ol><li>基本数据类型拷贝过来</li><li>字符串复用</li><li>引用数据类型会重新创建新的</li></ol></li></ul><h4 id="F-Objects"><a href="#F-Objects" class="headerlink" title="F. Objects"></a>F. Objects</h4><ul><li>equals(Object a,Object b):先做非空判断，比较两个对象</li><li>isNull(Object obj): 判断对象是否为NULL,是返回true</li><li>nonNull(Object obj): 判断对象是否为NULL，是返回false</li></ul><h4 id="G-BigInteger"><a href="#G-BigInteger" class="headerlink" title="G. BigInteger"></a>G. BigInteger</h4><p>获取大整数并进行数学运算</p><h4 id="H-BigDecima"><a href="#H-BigDecima" class="headerlink" title="H. BigDecima"></a>H. BigDecima</h4><p>用于小数的精确计算，用于表示很大的小数</p><h4 id="I-正则表达式"><a href="#I-正则表达式" class="headerlink" title="I. 正则表达式"></a>I. 正则表达式</h4><ul><li>校验字符串是否满足一定的规则，校验数据格式的合法性</li><li>可以在一段文本中查找满足条件的字符串</li></ul><p>在<code>java.util.regex</code>包中</p><ul><li>Pattern:表示正则表达式</li><li>Matcher:文本匹配器，按照正则表达式的规则读取字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abdbdfewgewgewvwrebwebtehrejtmiymolpurjergergew&quot;</span>;<br><br><span class="hljs-type">Pattern</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;a\\d&#123;0,2&#125;&quot;</span>); <span class="hljs-comment">//定义正则表达式</span><br><span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> p.Matcher(str); <span class="hljs-comment">//m在str中找到符合p规则的字符串</span><br><br><span class="hljs-keyword">while</span>(m.find())&#123;<span class="hljs-comment">//判断是否有符合的小串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> m.group();  <span class="hljs-comment">//获取小串</span><br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="J-JDK7前的时间相关类"><a href="#J-JDK7前的时间相关类" class="headerlink" title="J. JDK7前的时间相关类"></a>J. JDK7前的时间相关类</h4><h5 id="1-Date"><a href="#1-Date" class="headerlink" title="1. Date"></a>1. Date</h5><p>描述时间，精确到毫秒<br>从1970-1-1 0：0：0秒开始</p><h5 id="2-SimpleDateFormat"><a href="#2-SimpleDateFormat" class="headerlink" title="2. SimpleDateFormat"></a>2. SimpleDateFormat</h5><p>把时间变成我们喜欢的格式</p><h5 id="3-Calendar"><a href="#3-Calendar" class="headerlink" title="3. Calendar"></a>3. Calendar</h5><p>代表系统当前时间的日历对象，可以单独修改、获取时间中的年月日</p><h4 id="K-JDK8新增时间相关类"><a href="#K-JDK8新增时间相关类" class="headerlink" title="K. JDK8新增时间相关类"></a>K. JDK8新增时间相关类</h4><table><thead><tr><th>类名</th><th>作用</th></tr></thead><tbody><tr><td>ZoneId</td><td>时区</td></tr><tr><td>Instant</td><td>时间戳</td></tr><tr><td>ZoneDateTime</td><td>带时区的时间</td></tr><tr><td>DateTimeFormatter</td><td>用于时间的格式化和解析</td></tr><tr><td>LocalDate</td><td>年、月、日</td></tr><tr><td>LocalTime</td><td>时、分、秒</td></tr><tr><td>LocalDateTime</td><td>年月日、时分秒</td></tr><tr><td>Duration</td><td>时间间隔(秒，纳秒)</td></tr><tr><td>Period</td><td>时间间隔(年、月、日)</td></tr><tr><td>ChronoUnit</td><td>时间间隔(所有单位)</td></tr></tbody></table><h4 id="L-包装类"><a href="#L-包装类" class="headerlink" title="L. 包装类"></a>L. 包装类</h4><ul><li>把基本数据类型变成引用数据类型，也就是把基本数据类型变成一个对象</li><li>用一个对象把数据包装起来</li></ul><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h4 id="M-Integer"><a href="#M-Integer" class="headerlink" title="M. Integer"></a>M. Integer</h4><ul><li>parseInt(String s)：将字符串参数转为十进制整数</li><li>toString()：将一个整数转换为字符串表示形式。</li><li>valueOf(String s)：将字符串转换为Integer对象。</li><li>intValue()：将Integer对象转换为基本数据类型int。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(str);  <span class="hljs-comment">// 将字符串转换为整数</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> Integer.valueOf(str);  <span class="hljs-comment">// 将字符串转换为Integer对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> integer.toString();  <span class="hljs-comment">// 将Integer对象转换为字符串</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> integer.intValue();  <span class="hljs-comment">// 将Integer对象转换为基本数据类型int</span><br></code></pre></td></tr></table></figure><h2 id="6-基本算法"><a href="#6-基本算法" class="headerlink" title="6. 基本算法"></a>6. 基本算法</h2><h4 id="A-查找"><a href="#A-查找" class="headerlink" title="A. 查找"></a>A. 查找</h4><p>七种查找：基本查找、二分查找、插值查找、斐波那契查找、分块查找、哈希查找、树表查找</p><h5 id="1-顺序查找"><a href="#1-顺序查找" class="headerlink" title="1. 顺序查找"></a>1. 顺序查找</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">basicSearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> number)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] == number) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h5><p>前提条件：数组中的数据必须是<strong>有序的</strong></p><ul><li>min和max表示当前要查找的范围</li><li>mid是在min和max中间的</li><li>如果要查找的元素在mid的左边，缩小范围时，min不变,max&#x3D;mid-1</li><li>如果要查找的元素在mid的右边，缩小范围时，max不变,max&#x3D;mid+1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> number)</span> &#123;<br>     <span class="hljs-comment">//定义两个变量记录要查找的范围</span><br>     <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<br><br>     <span class="hljs-comment">//利用循环不断的去找要查找的数据</span><br>     <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>         <span class="hljs-keyword">if</span> (min &gt; max) &#123;<br>             <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>         &#125;<br>         <span class="hljs-comment">//找到min和max的中间位置</span><br>         <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (min + max) / <span class="hljs-number">2</span>;<br>         <span class="hljs-comment">//拿着mid指向的元素跟要查找的元素进行比较</span><br>         <span class="hljs-keyword">if</span> (arr[mid] &gt; number) &#123;<br>             <span class="hljs-comment">//number在mid的左边</span><br>             max = mid - <span class="hljs-number">1</span>;<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; number) &#123;<br>             <span class="hljs-comment">//number在mid的右边</span><br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>             <span class="hljs-keyword">return</span> mid;<br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h5 id="3-分块查找"><a href="#3-分块查找" class="headerlink" title="3. 分块查找"></a>3. 分块查找</h5><ul><li>原则：<ol><li>前一块中的最大数据小于后一块中所有数据(块内无序，块间有序)</li><li>块数数量一般等于数字的个数开根号。16个数字分为4左右</li></ol></li><li>核心思路：先确定要查找的元素在哪一块，然后在块内查找<br>要创建一个块类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Block</span> &#123;<br><span class="hljs-comment">/*block的索引，用来标识块中元素*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> index;<br>    <span class="hljs-comment">/*该block的开始位置*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> start; <br>    <span class="hljs-comment">/*块元素长度，在该例子中0代表空元素，不计入block长度*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> length;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Block</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-built_in">this</span>.index = index;<br>        <span class="hljs-built_in">this</span>.start = start;<br>        <span class="hljs-built_in">this</span>.length = length;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="B-排序"><a href="#B-排序" class="headerlink" title="B. 排序"></a>B. 排序</h4><p>十种排序算法：冒泡排序、选择排序、插入排序、快速排序、希尔排序、归并排序、堆排序、基数排序、桶排序、计数排序</p><h5 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h5><p>相邻的数据两两比较，小的在前面，大的放后面</p><ul><li>相邻的元素两两比较，大的放右边，小的放左边</li><li>第一轮比较完毕之后，最大值就已经确定，后面依次类推继续比较</li><li>如果数组有n个数据，总共执行n-1轮代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>            arr[j] = arr[j + <span class="hljs-number">1</span>];<br>            arr[j + <span class="hljs-number">1</span>] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h5><p>从0索引开始，拿着每一个索引上的元素和后面的元素依次比较，小的放前面，大的放后面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &gt; arr[j]) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h5><ul><li>把数组分为已排序和未排序两部分</li><li>从第二个元素开始，将未排序元素逐个插入到已排序部分的合适位置，直到整个数组都有序。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">44</span>, <span class="hljs-number">38</span>, <span class="hljs-number">5</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">46</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>&#125;;<br><span class="hljs-comment">//找到无序的哪一组数组是从哪个索引开始的</span><br><span class="hljs-type">int</span> <span class="hljs-variable">startIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) &#123;<br>        startIndex = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//遍历从startIndex开始到最后一个元素,依次得到无序的哪一组数据中的每一个元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<span class="hljs-comment">//记录当前要插入数据的索引</span><br>    <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>        arr[j] = arr[j - <span class="hljs-number">1</span>];<br>        arr[j - <span class="hljs-number">1</span>] = temp;<br>        j--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-递归算法"><a href="#4-递归算法" class="headerlink" title="4. 递归算法"></a>4. 递归算法</h5><ul><li>要有终止条件</li><li>要找到递归方程</li></ul><h5 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5. 快速排序"></a>5. 快速排序</h5><ol><li>选择一个基准元素</li><li>将数组分成两部分，小于基准的元素在左边，大于基准的元素在右边。</li><li>递归地对左边和右边的子数组进行快速排序。</li><li>直到子数组的大小为 1 或 0 时停止递归。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-keyword">if</span> (low &lt; high) &#123;<br>        <span class="hljs-comment">// 获取基准元素的索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivotIndex</span> <span class="hljs-operator">=</span> partition(arr, low, high);<br>        <br>        <span class="hljs-comment">// 递归排序左边子数组</span><br>        quickSort(arr, low, pivotIndex - <span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-comment">// 递归排序右边子数组</span><br>        quickSort(arr, pivotIndex + <span class="hljs-number">1</span>, high);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 分区函数，返回基准元素的正确位置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;<br>    <span class="hljs-comment">// 选择最右边的元素作为基准</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> arr[high];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> low - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">// 遍历数组，调整元素位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> low; j &lt; high; j++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[j] &lt;= pivot) &#123;<br>            i++;<br>            <span class="hljs-comment">// 交换 arr[i] 和 arr[j]</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 将基准元素放到正确的位置</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i + <span class="hljs-number">1</span>];<br>    arr[i + <span class="hljs-number">1</span>] = arr[high];<br>    arr[high] = temp;<br>    <br>    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>; <span class="hljs-comment">// 返回基准元素的索引</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-Arrays"><a href="#C-Arrays" class="headerlink" title="C. Arrays"></a>C. Arrays</h4><table><thead><tr><th>常用方法</th><th>作用</th></tr></thead><tbody><tr><td>String toString(数组)</td><td>把数组拼接成一个字符串</td></tr><tr><td>int binarySearch(数组,查找的元素)</td><td>二分查找法查找元素</td></tr><tr><td>int[] copyof(原数组,新数组长度)</td><td>拷贝数组</td></tr><tr><td>int[] copyOfRange(原数组,起始索引,结束索引)</td><td>拷贝数组(指定范围)</td></tr><tr><td>void fill(数组,元素)</td><td>填充数组</td></tr><tr><td>void sort(数组)</td><td>按照默认方式进行数组排序</td></tr><tr><td>void sort(数组,排序规则)</td><td>按照指定的规则排序</td></tr></tbody></table><h4 id="D-Lambda表达式"><a href="#D-Lambda表达式" class="headerlink" title="D. Lambda表达式"></a>D. Lambda表达式</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">() -&gt;&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>()对应着方法的形参</li><li>-&gt;固定格式</li><li>{}对应方法的方法体</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">method(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Swim</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swimming</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;正在游泳 ~~~ &quot;</span>);<br>    &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><p>转为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">method(<br>    ()-&gt;&#123;<br>        System.out.println(<span class="hljs-string">&quot;正在游泳 ~~~ &quot;</span>);<br>        &#125;<br>);<br></code></pre></td></tr></table></figure><ul><li>使用前提：必须是接口的匿名内部类，接口中只能有一个抽象方法</li></ul><h2 id="7-集合进阶"><a href="#7-集合进阶" class="headerlink" title="7. 集合进阶"></a>7. 集合进阶</h2><h4 id="A-集合体系结构"><a href="#A-集合体系结构" class="headerlink" title="A. 集合体系结构"></a>A. 集合体系结构</h4><ul><li>单列集合(Collection)：每次只能添加一个元素<ul><li>List系列集合:添加的元素是有序、可重复、有索引</li><li>Set系列集合:添加的元素是无序、不重复、无索引</li></ul></li></ul><p><img src="/img/blogs/java/javase/2.7.1.png"></p><p><img src="/img/blogs/java/javase/2.7.2.png"></p><ul><li>双列集合(Map)：每次添加一对元素</li></ul><h4 id="B-Collection"><a href="#B-Collection" class="headerlink" title="B. Collection"></a>B. Collection</h4><p>单列集合的祖宗<strong>接口</strong></p><h5 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h5><table><thead><tr><th>常用方法</th><th>作用</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加</td></tr><tr><td>void clear()</td><td>清空</td></tr><tr><td>boolean remove(E e)</td><td>删除</td></tr><tr><td>boolean contains(Object obj)</td><td>判断是否包含</td></tr><tr><td>boolean isEmpty()</td><td>判断是否为空</td></tr><tr><td>int size()</td><td>集合长度</td></tr></tbody></table><h5 id="2-Collection的遍历方式"><a href="#2-Collection的遍历方式" class="headerlink" title="2. Collection的遍历方式"></a>2. Collection的遍历方式</h5><ul><li><strong>迭代器遍历</strong><br>类是<strong>Iterator</strong>，迭代器是集合专用的遍历方式<br>如果在遍历的过程中需要删除元素，最好使用迭代器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator&lt;String&gt; it = list.iterator();<span class="hljs-comment">//创建指针，指向集合第一个位置</span><br><br><span class="hljs-keyword">while</span>(it.hasNext())&#123; <span class="hljs-comment">//循环判断是否有元素</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> it.next();  <span class="hljs-comment">//获取元素，移动指针</span><br>    System.out.println(str);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>增强for遍历</strong><br>所有的单列集合和数组才能用增强for遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(元素的数据类型 变量名:数组或者集合)&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(String s : list)&#123;<br>    System.out.println(s);   <span class="hljs-comment">//变量s代表集合中每个数据</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修改增强for中的变量s，s是第三方变量，不会改变集合中的原本数据</p><ul><li><strong>lambda表达式遍历</strong></li></ul><h4 id="C-List集合"><a href="#C-List集合" class="headerlink" title="C. List集合"></a>C. List集合</h4><h5 id="1-List集合的特点"><a href="#1-List集合的特点" class="headerlink" title="1. List集合的特点"></a>1. List集合的特点</h5><ul><li>有序：存和取的元素顺序一致</li><li>有索引：可以通过索引操作元素</li><li>可重复：存储的元素可以重复</li></ul><h5 id="2-List集合的特有方法"><a href="#2-List集合的特有方法" class="headerlink" title="2. List集合的特有方法"></a>2. List集合的特有方法</h5><p>增删改查对应的方法</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void add(int index, E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int index)</td><td>删除指定索引处的元素,返回被删除的元素</td></tr><tr><td>E set(int index, E element)</td><td>修改指定索引处的元素,返回被修改的元素</td></tr><tr><td>E get(int index)</td><td>返回指定索引处的元素</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>       <span class="hljs-comment">// 1. 增加元素</span><br>       list.add(<span class="hljs-string">&quot;Apple&quot;</span>); <br>       list.add(<span class="hljs-string">&quot;Banana&quot;</span>);<br>       list.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Orange&quot;</span>); <span class="hljs-comment">// 在索引1处插入元素</span><br>       System.out.println(<span class="hljs-string">&quot;添加元素后的列表: &quot;</span> + list); <span class="hljs-comment">// 输出: [Apple, Orange, Banana]</span><br><br>       <span class="hljs-comment">// 2. 删除元素</span><br>       list.remove(<span class="hljs-number">1</span>); <span class="hljs-comment">// 删除索引1的元素（&quot;Orange&quot;）</span><br>       list.remove(<span class="hljs-string">&quot;Banana&quot;</span>); <span class="hljs-comment">// 删除指定元素（&quot;Banana&quot;）</span><br>       System.out.println(<span class="hljs-string">&quot;删除元素后的列表: &quot;</span> + list); <span class="hljs-comment">// 输出: [Apple]</span><br><br>       <span class="hljs-comment">// 3. 修改元素</span><br>       list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;Grapes&quot;</span>); <span class="hljs-comment">// 将索引0的元素修改为&quot;Grapes&quot;</span><br>       System.out.println(<span class="hljs-string">&quot;修改元素后的列表: &quot;</span> + list); <span class="hljs-comment">// 输出: [Grapes]</span><br><br>       <span class="hljs-comment">// 4. 查询元素</span><br>       list.add(<span class="hljs-string">&quot;Apple&quot;</span>);<br>       list.add(<span class="hljs-string">&quot;Banana&quot;</span>);<br>       list.add(<span class="hljs-string">&quot;Apple&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;当前列表: &quot;</span> + list); <span class="hljs-comment">// 输出: [Grapes, Apple, Banana, Apple]</span><br></code></pre></td></tr></table></figure><h5 id="3-List集合的遍历方式"><a href="#3-List集合的遍历方式" class="headerlink" title="3. List集合的遍历方式"></a>3. List集合的遍历方式</h5><p>五种遍历方式</p><ul><li>迭代器遍历</li><li>列表迭代器</li><li>普通for循环</li><li>增强for</li><li>Lamada表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      list.add(<span class="hljs-string">&quot;Apple&quot;</span>);<br>      list.add(<span class="hljs-string">&quot;Banana&quot;</span>);<br>      list.add(<span class="hljs-string">&quot;Orange&quot;</span>);<br><br>      <span class="hljs-comment">// 1. 使用 for 循环遍历</span><br>      System.out.println(<span class="hljs-string">&quot;1. 使用 for 循环遍历:&quot;</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>          System.out.println(list.get(i));<br>      &#125;<br><br>      <span class="hljs-comment">// 2. 使用增强 for 循环遍历</span><br>      System.out.println(<span class="hljs-string">&quot;2. 使用增强 for 循环遍历:&quot;</span>);<br>      <span class="hljs-keyword">for</span> (String fruit : list) &#123;<br>          System.out.println(fruit);<br>      &#125;<br><br>      <span class="hljs-comment">// 3. 使用 迭代器Iterator 遍历</span><br>      System.out.println(<span class="hljs-string">&quot;3. 使用 Iterator 遍历:&quot;</span>);<br>      Iterator&lt;String&gt; iterator = list.iterator();<br>      <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>          System.out.println(iterator.next());<br>      &#125;<br><br>      <span class="hljs-comment">// 4. 使用 列表迭代器ListIterator 遍历</span><br>      System.out.println(<span class="hljs-string">&quot;4. 使用 ListIterator 正向遍历:&quot;</span>);<br>      ListIterator&lt;String&gt; listIterator = list.listIterator();<br>      <span class="hljs-keyword">while</span> (listIterator.hasNext()) &#123;<br>          System.out.println(listIterator.next());<br>      &#125;<br><br>      System.out.println(<span class="hljs-string">&quot;4. 使用 ListIterator 反向遍历:&quot;</span>);<br>      <span class="hljs-keyword">while</span> (listIterator.hasPrevious()) &#123;<br>          System.out.println(listIterator.previous());<br>      &#125;<br><br>      <span class="hljs-comment">// 5. 使用 Lamada表达式forEach 方法遍历</span><br>      System.out.println(<span class="hljs-string">&quot;5. 使用 forEach 方法遍历:&quot;</span>);<br>      list.forEach(fruit -&gt; System.out.println(fruit));<br></code></pre></td></tr></table></figure><h4 id="D-ArrayList集合底层原理-动态数组"><a href="#D-ArrayList集合底层原理-动态数组" class="headerlink" title="D. ArrayList集合底层原理(动态数组)"></a>D. ArrayList集合底层原理(动态数组)</h4><ol><li>利用空参创建的集合，在底层会创建一个默认长度为0的数组</li><li>添加第一个元素，底层会创建一个新的长度为10的数组</li><li>存满时，会扩容1.5倍</li><li>如果一次添加多个元素，1.5倍还放不下，则新创建数组的长度以实际为准</li></ol><h4 id="E-LinkedList集合"><a href="#E-LinkedList集合" class="headerlink" title="E. LinkedList集合"></a>E. LinkedList集合</h4><p>底层数据结构是双向链表，查询慢，增删快</p><h4 id="F-泛型"><a href="#F-泛型" class="headerlink" title="F. 泛型"></a>F. 泛型</h4><p>用来检查存储数据的数据类型</p><ul><li>泛型的格式：&lt;数据类型&gt;</li><li>注意：泛型只能支持<strong>引用数据类型</strong></li></ul><h5 id="1-泛型的好处"><a href="#1-泛型的好处" class="headerlink" title="1. 泛型的好处"></a>1. 泛型的好处</h5><ul><li>统一数据类型</li><li>避免强制类型转换可能出现的异常</li></ul><h5 id="2-泛型类"><a href="#2-泛型类" class="headerlink" title="2. 泛型类"></a>2. 泛型类</h5><p>当一个类中，某个变量的数据类型不确定，就可以定义带有泛型的类<br><code>public class ArrayList&lt;E&gt;{}</code>E理解为变量，代表数据类型</p><h5 id="3-泛型方法"><a href="#3-泛型方法" class="headerlink" title="3. 泛型方法"></a>3. 泛型方法</h5><p>当方法中形参类型不确定时<br>    1. 使用类名后面定义的泛型<br>    2. 在方法申明上定义自己的泛型</p><p><code>public&lt;T&gt; void show(T t){}</code>T理解为变量，记录数据类型</p><h5 id="4-泛型接口"><a href="#4-泛型接口" class="headerlink" title="4. 泛型接口"></a>4. 泛型接口</h5><p><code>修饰符 interface 接口名&lt;类型&gt;{}</code><br><code>public interface List&lt;E&gt;{}</code></p><h5 id="5-泛型的继承和通配符"><a href="#5-泛型的继承和通配符" class="headerlink" title="5. 泛型的继承和通配符"></a>5. 泛型的继承和通配符</h5><ul><li>泛型不具备继承性，但数据具备继承性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Ye&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>list1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Ye</span>());<br>list1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fu</span>());<br>list1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Zi</span>());<br></code></pre></td></tr></table></figure><p>希望:本方法虽然不确定类型,但是以后我希望只能传递Ye Fu Zi(这三个继承体系的数据类型)</p><p>此时我们就可以使用泛型的通配符:<br>    ?也表示不确定的类型，他可以进行类型的限定<br>    <strong>?extends E</strong>:表示可以传递E或者E所有的子类类型<br>    <strong>?super E</strong>:表示可以传递E或者E所有的父类类型</p><p>应用场景:<br>    1.如果我们在定义类、方法、接口的时候,如果类型不确定,就可以定义泛型类、泛型方法、泛型接口。<br>    2.如果类型不确定,但是能知道以后只能传递某个继承体系中的,就可以泛型的通配符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(ArrayList&lt;? extends Ye&gt; list)</span>&#123;<br>    <span class="hljs-comment">//此时泛型的数据类型只能是Ye的子类类型(包括Ye,Fu,Zi)</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(ArrayList&lt;? <span class="hljs-built_in">super</span> Fu&gt; list)</span>&#123;<br>    <span class="hljs-comment">//此时泛型的数据类型只能是Fu的父类类型(包括Ye和Fu)</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="G-Set系列集合"><a href="#G-Set系列集合" class="headerlink" title="G. Set系列集合"></a>G. Set系列集合</h4><p>无序、不重复、无索引<br><strong>Set接口的方法和Collection的API一致</strong></p><ul><li><p>无序：存取顺序不一致</p></li><li><p>不重复：可以去除重复</p></li><li><p>无索引：没有带索引的方法，不能用普通for循环遍历</p></li><li><p>HashSet:无序、不重复、无索引</p></li><li><p>LinkedHashSet: <strong>有序</strong>、不重复、无索引</p></li><li><p>TreeSet:<strong>可排序</strong>、不重复、无索引</p></li></ul><h4 id="H-HashSet"><a href="#H-HashSet" class="headerlink" title="H. HashSet"></a>H. HashSet</h4><p>HashSet集合底层采取<strong>哈希表</strong>存储数据<br>哈希表组成：数组+链表+红黑树</p><h5 id="1-哈希值"><a href="#1-哈希值" class="headerlink" title="1. 哈希值"></a>1. 哈希值</h5><ul><li>根据hashCode方法算出来的int类型的整数</li><li>该方法定义在Object类中,所有对象都可以调用,默认使用地址值进行计算</li><li>一般情况下,会重写hashCode方法,利用对象内部的属性值计算哈希值</li></ul><h5 id="2-对象的哈希值特点"><a href="#2-对象的哈希值特点" class="headerlink" title="2. 对象的哈希值特点"></a>2. 对象的哈希值特点</h5><ul><li>如果没有重写hashCode方法,不同对象计算出的哈希值是不同的</li><li>如果已经重写hashcode方法,不同的对象只要属性值相同,计算出的哈希值就是一样的</li><li>在小部分情况下,不同的属性值或者不同的地址值计算出来的哈希值也有可能一样。(哈希碰撞)</li></ul><h5 id="3-HashSet底层原理"><a href="#3-HashSet底层原理" class="headerlink" title="3. HashSet底层原理"></a>3. HashSet底层原理</h5><p><img src="/img/blogs/java/javase/2.7.3.png"></p><h5 id="4-HashSet的三个问题"><a href="#4-HashSet的三个问题" class="headerlink" title="4. HashSet的三个问题"></a>4. HashSet的三个问题</h5><ul><li>问题1：HashSet为什么存和取的顺序不一样<br>  哈希值大小不同，挂在链表上的数据的顺序不一致</li><li>问题2：HashSet为什么没有索引<br>  因为不单单是靠数组存储的，还有链表和红黑树无法确定索引</li><li>问题3：HashSet利用什么机制保证数据去重的<br>  HashCode()方法和equals()方法</li></ul><h4 id="I-LinkedHashSet"><a href="#I-LinkedHashSet" class="headerlink" title="I. LinkedHashSet"></a>I. LinkedHashSet</h4><p><strong>有序</strong>、不重复、无索引<br>底层仍然是哈希表，每个元素额外多加一个双链表的机制记录存储的顺序</p><h4 id="J-TreeSet"><a href="#J-TreeSet" class="headerlink" title="J. TreeSet"></a>J. TreeSet</h4><p>不重复、无索引、<strong>可排序</strong></p><ul><li>可排序：按照元素从小到大排序(因为基于<strong>红黑树</strong>实现)</li></ul><h5 id="1-TreeSet集合排序规则"><a href="#1-TreeSet集合排序规则" class="headerlink" title="1. TreeSet集合排序规则"></a>1. TreeSet集合排序规则</h5><ul><li>对于数值类型:Integer,Double,默认按照从小到大的顺序进行排序。</li><li>对于字符、字符串类型:按照字符在<strong>ASCII码表</strong>中的数字升序进行排序。</li></ul><h5 id="2-TreeSet的两种比较规则"><a href="#2-TreeSet的两种比较规则" class="headerlink" title="2. TreeSet的两种比较规则"></a>2. TreeSet的两种比较规则</h5><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><p>默认排序：Javabean类实现Comparable接口指定比较规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建三个学生对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>( name: <span class="hljs-string">&quot;zhangsan&quot;</span>, age: <span class="hljs-number">23</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>( name: <span class="hljs-string">&quot;lisi&quot;</span>, age: <span class="hljs-number">24</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>( name: <span class="hljs-string">&quot;wangwu&quot;</span>, age: <span class="hljs-number">25</span>);<br><span class="hljs-comment">//2.创建集合对象</span><br>TreeSet&lt;Student&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br><span class="hljs-comment">//3.添加元素</span><br>ts.add(s1);<br>ts.add(s2);<br>ts.add(s3);<br><span class="hljs-comment">//4.打印集合</span><br>System.out.println(ts);<span class="hljs-comment">//23,24,25</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>    <span class="hljs-comment">//指定排序的规则</span><br>    <span class="hljs-comment">//只看年龄,我想要按照年龄的升序进行排列</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getAge() - o.getAge();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>this:表示当前要添加的元素</li><li>o:表示已经在红黑树存在的元素</li><li>返回值:<br>  负数:认为要添加的元素是小的,存左边<br>  正数:认为要添加的元素是大的,存右边<br>  0:认为要添加的元素已经存在,舍弃</li></ul><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><p>比较器排序：创建TreeSet对象时，传递比较器Comparator指定规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 要求:存入四个字符串,“c”,“ab”,“df”,&quot;qwer”</span><br><span class="hljs-comment">//按照长度排序,如果一样长则按照首字母排序</span><br>TreeSet&lt;String&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span>&#123;<br>         <span class="hljs-comment">// 按照长度排序</span><br>         <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> o1.length() - o2.length();<br>         <span class="hljs-comment">//如果一样长则按照首字母排序</span><br>         i = i == <span class="hljs-number">0</span> ? o1.compareTo(o2) : i;<br>         <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="K-单列集合总结"><a href="#K-单列集合总结" class="headerlink" title="K. 单列集合总结"></a>K. 单列集合总结</h4><ol><li>如果想要集合中的元素可重复<br> 用ArrayList集合,基于数组的。(用的最多)</li><li>如果想要集合中的元素可重复,而且当前的<strong>增删操作明显多于查询</strong><br>用LinkedList集合,基于链表的。</li><li>如果想对集合中的元素<strong>去重</strong><br>用HashSet集合,基于哈希表的。(用的最多)</li><li>如果想对集合中的元素<strong>去重</strong>,而且<strong>保证存取顺序</strong><br>用LinkedHashSet集合,基于哈希表和双链表,效率低于HashSet。</li><li>如果想对集合中的元素进行<strong>排序</strong><br>用TreeSet集合,基于红黑树。后续也可以用List集合实现排序。</li></ol><h4 id="L-双列集合的特点"><a href="#L-双列集合的特点" class="headerlink" title="L. 双列集合的特点"></a>L. 双列集合的特点</h4><ul><li>双列集合一次需要存一对数据,分别为键和值</li><li>键不能重复,值可以重复</li><li>键和值是一一对应的,每一个键只能找到自己对应的值</li><li>键+值这个整体 我们称之为“键值对”或者“键值对对象”,在Java中叫做“<strong>Entry对象</strong>”</li></ul><p><img src="/img/blogs/java/javase/2.7.4.png"></p><h4 id="M-Map集合"><a href="#M-Map集合" class="headerlink" title="M. Map集合"></a>M. Map集合</h4><p>Map是双列集合的顶层接口，功能是全部双列集合都可以继承的</p><h5 id="1-Map常见API"><a href="#1-Map常见API" class="headerlink" title="1. Map常见API"></a>1. Map常见API</h5><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>V put(K key,V value)</td><td>添加元素</td></tr><tr><td>V remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>void clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合的长度,也就是集合中键值对的个数</td></tr></tbody></table><ul><li>put(): 添加数据时，如果键是存在的，则会把原有的键值对对象覆盖，返回被覆盖的值</li></ul><h5 id="2-Map的遍历方式-键找值"><a href="#2-Map的遍历方式-键找值" class="headerlink" title="2. Map的遍历方式(键找值)"></a>2. Map的遍历方式(键找值)</h5><p>将键放在单列集合中，通过单列集合依次遍历找值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建Map集合的对象</span><br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-comment">//2.添加元素</span><br>map.put(<span class="hljs-string">&quot;尹志平&quot;</span>,<span class="hljs-string">&quot;小龙女&quot;</span>);<br>map.put(<span class="hljs-string">&quot;郭靖&quot;</span>,<span class="hljs-string">&quot;穆念慈&quot;</span>);<br>map.put(<span class="hljs-string">&quot;欧阳克&quot;</span>,<span class="hljs-string">&quot;黄蓉&quot;</span>);<br><br><span class="hljs-comment">//3.1获取所有的键,把这些键放到一个单列集合当中</span><br>Set&lt;String&gt; keys = map.keySet();<br><span class="hljs-comment">//3.2遍历单列集合,得到每一个键</span><br><span class="hljs-keyword">for</span> (String key : keys) &#123;<br>    <span class="hljs-comment">//3.3 利用map集合中的键获取对应的值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br>    System.out.println(key + <span class="hljs-string">&quot; = &quot;</span> + value);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-Map的遍历方式-键值对"><a href="#3-Map的遍历方式-键值对" class="headerlink" title="3. Map的遍历方式(键值对)"></a>3. Map的遍历方式(键值对)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建Map集合的对象</span><br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><span class="hljs-comment">//2.添加元素</span><br>map.put(<span class="hljs-string">&quot;标枪选手&quot;</span>,<span class="hljs-string">&quot;马超&quot;</span>);<br>map.put(<span class="hljs-string">&quot;人物挂件&quot;</span>,<span class="hljs-string">&quot;明世隐&quot;</span>);<br>map.put(<span class="hljs-string">&quot;御龙骑士&quot;</span>,<span class="hljs-string">&quot;尹志平&quot;</span>);<br><br><span class="hljs-comment">//通过键值对对象进行遍历</span><br><span class="hljs-comment">//3.1 通过一个方法获取所有的键值对对象,返回一个Set集合</span><br>Set&lt;Map. Entry&lt;String, String&gt;&gt; entries = map.entrySet();<br><span class="hljs-comment">//3.2 遍历entries这个集合,去得到里面的每一个键值对对象</span><br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;<br>    <span class="hljs-comment">//3.3 利用entry调用get方法获取键和值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> entry.getKey();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>    System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="N-HashMap"><a href="#N-HashMap" class="headerlink" title="N. HashMap"></a>N. HashMap</h4><p>是Map里面的一个实现类<br>由键决定：无序、不重复、无索引</p><h5 id="HashMap的特点"><a href="#HashMap的特点" class="headerlink" title="HashMap的特点"></a>HashMap的特点</h5><ul><li>HashMap底层是<strong>哈希表</strong>结构的(与HashSet一样)</li><li>依赖hashCode方法和equals方法保证键的唯一</li><li>如果键存储的是自定义对象，需要重写hashCode和equals方法</li><li>如果值存储自定义对象,不需要重写hashCode和equals方法</li></ul><h4 id="O-LinkedHashMap"><a href="#O-LinkedHashMap" class="headerlink" title="O. LinkedHashMap"></a>O. LinkedHashMap</h4><p>由键决定：<strong>有序</strong>、不重复、无索引</p><ul><li>有序：保证存储和取出的元素顺序一致(额外加了一个双链表机制记录存储的顺序)</li></ul><h4 id="P-TreeMap"><a href="#P-TreeMap" class="headerlink" title="P. TreeMap"></a>P. TreeMap</h4><p>TreeMap跟TreeSet底层原理一样,都是<strong>红黑树</strong>结构的。<br>由键决定特性:不重复、无索引、可排序</p><ul><li>可排序:<strong>对键进行排序</strong></li><li>注意:默认按照键的从小到大进行排序,也可以自己规定键的排序规则<ul><li>实现Comparable接口,指定比较规则。</li><li>创建集合时传递Comparator比较器对象,指定比较规则。</li></ul></li></ul><h5 id="统计字符串中每一个字符出现的次数"><a href="#统计字符串中每一个字符出现的次数" class="headerlink" title="统计字符串中每一个字符出现的次数"></a>统计字符串中每一个字符出现的次数</h5><p>可以使用HashMap或者TreeMap进行统计；</p><ul><li>键：代表要统计的内容</li><li>值：表示次数</li><li>如果题目中没有要求对结果进行排序使用HashMap，要排序的话使用TreeMap</li></ul><h4 id="Q-可变参数"><a href="#Q-可变参数" class="headerlink" title="Q. 可变参数"></a>Q. 可变参数</h4><p>方法的形参的个数是可以变化的<br>格式：<code>属性类型...名字</code><br><code>int...args</code><br><code>public static int getSum(int...args){}</code></p><ul><li>形参列表中可变参数只能有一个</li><li>可变参数必须放在形参列表的最后面</li></ul><h4 id="R-Collections"><a href="#R-Collections" class="headerlink" title="R. Collections"></a>R. Collections</h4><p>Collections不是集合，是集合的工具类</p><table><thead><tr><th>常用方法</th><th>作用</th></tr></thead><tbody><tr><td>public static <T> boolean addAll(Collection<T> c, T… elements)</td><td>批量添加元素</td></tr><tr><td>public static void shuffle(List&lt;?&gt; list)</td><td>打乱List集合元素的顺序</td></tr></tbody></table><h4 id="S-不可变集合"><a href="#S-不可变集合" class="headerlink" title="S. 不可变集合"></a>S. 不可变集合</h4><p>不可以被修改的集合，长度不能变，内容不能变(只能查询，不能增删改)</p><ul><li>List、Set、Map接口中,都存在静态的<strong>of</strong>方法可以创建不可变集合</li></ul><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>static <E> List<E> of(E…elements)</td><td>创建一个具有指定元素的List集合对象</td></tr><tr><td>static <E> Set<E> of(E…elements)</td><td>创建一个具有指定元素的Set集合对象</td></tr><tr><td>static &lt;K, V&gt; Map&lt;K, V&gt; of(E…elements)</td><td>创建一个具有指定元素的Map集合对象</td></tr></tbody></table><p>三种方式的细节</p><ul><li>List: 直接用</li><li>Set:元素不能重复</li><li>Map:元素不能重复、键值对数量最多是10个。<ul><li>超过10个用ofEntries方法</li></ul></li></ul><h2 id="8-数据结构"><a href="#8-数据结构" class="headerlink" title="8. 数据结构"></a>8. 数据结构</h2><p>数据结构是计算机底层存储、组织数据的方式</p><h4 id="A-栈"><a href="#A-栈" class="headerlink" title="A. 栈"></a>A. 栈</h4><p>后进先出，先进后出</p><h4 id="B-队列"><a href="#B-队列" class="headerlink" title="B. 队列"></a>B. 队列</h4><p>先进先出，后进后出</p><h4 id="C-数组"><a href="#C-数组" class="headerlink" title="C. 数组"></a>C. 数组</h4><p>元素在内存中是连续存储的</p><ul><li>查询速度快：查询数据通过地址值和索引定位</li><li>删除效率低：要将数据删除需将后面所有数据前移</li><li>添加效率低：添加一个数据，后面所有数据都要后移</li></ul><h4 id="D-链表"><a href="#D-链表" class="headerlink" title="D. 链表"></a>D. 链表</h4><p>每个节点都是独立的对象，在内存中不连续；每个节点包含数据值和下一个节点的地址</p><ul><li>查询慢：要从链表头节点开始查询</li><li>增删快</li></ul><h4 id="E-树"><a href="#E-树" class="headerlink" title="E. 树"></a>E. 树</h4><p>父节点，左子节点，右子节点，左子树，右子树</p><ul><li>度：每个节点的子节点数量(二叉树的度小于等于2&gt;)</li><li>树高：树的总层数</li><li>根节点：最顶层的节点</li></ul><h5 id="1-二叉查找树"><a href="#1-二叉查找树" class="headerlink" title="1. 二叉查找树"></a>1. 二叉查找树</h5><ul><li>任意节点左子树上的值都小于当前节点</li><li>任意节点右子树上的值都大于当前节点</li></ul><p><img src="/img/blogs/java/javase/2.8.1.png"></p><ol><li>添加节点</li></ol><ul><li>小的存左边</li><li>大的存右边</li><li>一样的不存</li></ul><ol start="2"><li>查找节点<br>小的在左边，大的在右边</li></ol><h5 id="2-二叉树的遍历方式"><a href="#2-二叉树的遍历方式" class="headerlink" title="2. 二叉树的遍历方式"></a>2. 二叉树的遍历方式</h5><p>前序遍历，中序遍历，后序遍历，层序遍历</p><ol><li>前序遍历(根左右)<br>从根节点开始，依次按照当前节点，左子节点，右子节点顺序遍历</li><li>中序遍历(左根右)<br>从左子节点开始，依次按照左子节点，当前节点，右子节点顺序遍历</li><li>后序遍历(左右根)<br>从左子节点开始，依次按照左子节点，右子节点，当前节点顺序遍历</li><li>层序遍历<br>从根节点开始一层一层的遍历</li></ol><h5 id="3-平衡二叉树"><a href="#3-平衡二叉树" class="headerlink" title="3. 平衡二叉树"></a>3. 平衡二叉树</h5><p>查找效率更高<br>任意节点左右子树高度差不超过1 (旋转机制)</p><h6 id="平衡二叉树的左旋"><a href="#平衡二叉树的左旋" class="headerlink" title="平衡二叉树的左旋"></a>平衡二叉树的左旋</h6><p><img src="/img/blogs/java/javase/2.8.2.png"></p><p><img src="/img/blogs/java/javase/2.8.3.png"></p><h6 id="平衡二叉树的右旋"><a href="#平衡二叉树的右旋" class="headerlink" title="平衡二叉树的右旋"></a>平衡二叉树的右旋</h6><p><img src="/img/blogs/java/javase/2.8.4.png"></p><p><img src="/img/blogs/java/javase/2.8.5.png"></p><h6 id="平衡二叉树需要旋转的四种情况"><a href="#平衡二叉树需要旋转的四种情况" class="headerlink" title="平衡二叉树需要旋转的四种情况"></a>平衡二叉树需要旋转的四种情况</h6><p>左左、左右、右右、右左</p><ol><li>左左(一次右旋)：当根节点左子树的左子树有节点插入，导致二叉树不平衡</li><li>左右(先局部左旋，再整体右旋)：当根节点左子树的右子树有节点插入，导致二叉树不平衡</li><li>右右(一次左旋)：当根节点右子树的右子树有节点插入，导致二叉树不平衡</li><li>右左(先局部右旋，再整体左旋)：当根节点右子树的左子树有节点插入，导致二叉树不平衡</li></ol><h5 id="4-红黑树"><a href="#4-红黑树" class="headerlink" title="4. 红黑树"></a>4. 红黑树</h5><p>是一种特殊的二叉查找树，每个节点都有存储位表示节点的颜色(红或黑)</p><ul><li>是二叉查找树</li><li>但不是高度平衡的</li><li>特有的红黑规则</li></ul><p>红黑规则：</p><p><img src="/img/blogs/java/javase/2.8.6.png"></p><p>添加节点的规则：<br>    默认颜色：添加节点默认是红色的(效率高)</p><p><img src="/img/blogs/java/javase/2.8.7.png"></p><h2 id="9-Stream流"><a href="#9-Stream流" class="headerlink" title="9. Stream流"></a>9. Stream流</h2><h4 id="A-Stream流介绍"><a href="#A-Stream流介绍" class="headerlink" title="A. Stream流介绍"></a>A. Stream流介绍</h4><ul><li>作用: 结合Lambda表达式，简化集合、数组的操作</li><li>使用步骤：<ol><li>先得到一条Stream流(流水线)，并把数据放上去</li><li>利用Stream流的API进行操作<ul><li>中间方法(过滤 转换)：方法调用完毕之后，还可以调用其他方法</li><li>终结方法(统计 打印): 最后一步，调用完毕之后，不能调用其他方法</li></ul></li><li>使用中间方法对流水线上的数据进行操作</li><li>使用终结方法对流水线上的数据进行操作</li></ol></li></ul><h4 id="B-获取Stream流"><a href="#B-获取Stream流" class="headerlink" title="B. 获取Stream流"></a>B. 获取Stream流</h4><table><thead><tr><th>获取方式</th><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>单列集合</td><td>default Stream<E> stream()</td><td>Collection中的默认方法</td></tr><tr><td>双列集合</td><td>无</td><td>无法直接使用stream流</td></tr><tr><td>数组</td><td>public static <T> Stream<T> stream(T[] array)</td><td>Arrays工具类中的静态方法</td></tr><tr><td>一堆零散数据</td><td>public static<T> Stream<T> of(T … values)</td><td>Stream接口中的静态方法</td></tr></tbody></table><ul><li>单列集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAlL(list, <span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>);<br>list.stream().forEach(s -&gt; System.out.println(s));<span class="hljs-comment">//获取</span><br></code></pre></td></tr></table></figure><ul><li>双列集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建双列集合</span><br>HashMap&lt;String, Integer&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">//2.添加数据</span><br>hm.put(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-number">111</span>);<br>hm.put(<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-number">222</span>);<br>hm.put(<span class="hljs-string">&quot;ccc&quot;</span>,<span class="hljs-number">333</span>);<br>hm.put(<span class="hljs-string">&quot;ddd&quot;</span>,<span class="hljs-number">444</span>);<br><br><span class="hljs-comment">//3.第一种获取stream流</span><br>hm.keySet().stream().forEach(s -&gt; System.out.println(s));<br><span class="hljs-comment">//4.第二种获取stream流</span><br>hm. entrySet().stream().forEach(s-&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><ul><li>数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建数组</span><br><span class="hljs-type">int</span>[] arr1= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>String[] arr2 = &#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;;<br><br><span class="hljs-comment">//2.获取stream流</span><br>Arrays.stream(arr1).forEach(s-&gt; System.out.println(s));<br>Arrays.stream(arr2).forEach(s-&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><ul><li>零散数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>).forEach(s-&gt; System.out.println(s));<br>Stream.of(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>).forEach(s-&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><h4 id="C-Stream流的中间方法"><a href="#C-Stream流的中间方法" class="headerlink" title="C. Stream流的中间方法"></a>C. Stream流的中间方法</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Stream<T> filter(Predicate&lt;? super T&gt; predicate)</td><td>过滤</td></tr><tr><td>Stream<T> limit(long maxSize)</td><td>获取前几个元素</td></tr><tr><td>Stream<T> skip(long n)</td><td>跳过前几个元素</td></tr><tr><td>Stream<T> distinct()</td><td>元素去重,依赖(hashCode和equals方法)</td></tr><tr><td>static <T> Stream<T> concat(Stream a, Stream b)</td><td>合并a和b两个流为一个流</td></tr><tr><td>Stream<R> map(Function&lt;T, R&gt; mapper)</td><td>转换流中的数据类型</td></tr></tbody></table><ul><li>注意1: 中间方法,返回新的Stream流,原来的Stream流只能使用一次,建议使用链式编程</li><li>注意2: 修改Stream流中的数据,不会影响原来集合或者数组中的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找到集合中以张开头并且是三个字的姓名</span><br>list.stream()<br>    .filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>))<br>    .filter(s -&gt; s.length() == <span class="hljs-number">3</span>)<br>    .forEach(s -&gt; System.out.println(s));<br><br>list.stream().limit(<span class="hljs-number">3</span>).forEach(s -&gt; System.out.println(s)); <span class="hljs-comment">//获取集合前三个元素</span><br>list.stream().skip(<span class="hljs-number">4</span>) .forEach(s -&gt; System.out.println(s));<span class="hljs-comment">//跳过前四个元素</span><br><br><br>list1.stream().distinct().forEach(s -&gt; System.out.println(s));<span class="hljs-comment">//对list1集合去重</span><br>Stream.concat(list1.stream(),list2.stream()).forEach(s -&gt; System.out.println(s));<span class="hljs-comment">//合并list1和list2集合</span><br><br>list.stream()<br>    .map(s-&gt; Integer.parseInt(s.split(<span class="hljs-string">&quot;-&quot;</span>) [<span class="hljs-number">1</span>]))<br>    .forEach(s-&gt; System.out.println(s));<span class="hljs-comment">//将集合中-之后的数字提取出来打印</span><br></code></pre></td></tr></table></figure><h4 id="D-Stream流的终结方法"><a href="#D-Stream流的终结方法" class="headerlink" title="D. Stream流的终结方法"></a>D. Stream流的终结方法</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void forEach(Consumer action)</td><td>遍历</td></tr><tr><td>long count()</td><td>统计</td></tr><tr><td>toArray()</td><td>收集流中的数据,放到数组中</td></tr><tr><td>collect(Collector collector)</td><td>收集流中的数据,放到集合中(List Set Map)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">list.stream().forEach(s -&gt; System.out.println(s)); <span class="hljs-comment">//遍历打印</span><br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> list.stream().count();<span class="hljs-comment">//统计集合元素个数</span><br><br>Object[] arr1 = list.stream().toArray();<span class="hljs-comment">//收集流中的数据放在数组中</span><br></code></pre></td></tr></table></figure><ul><li>collect方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//我要把所有的男性收集起来</span><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list,<span class="hljs-string">&quot;张无忌-男-15&quot;</span>,<span class="hljs-string">&quot;周芷若-女-14&quot;</span>,<span class="hljs-string">&quot;赵敏-女-13&quot;</span>,<span class="hljs-string">&quot;张强-男-20&quot;</span>,<span class="hljs-string">&quot;张三丰-男-100&quot;</span>,<span class="hljs-string">&quot;张翠山-男-40&quot;</span>,<span class="hljs-string">&quot;张良-男-35&quot;</span>,<span class="hljs-string">&quot;王二麻子-男-37&quot;</span>,<span class="hljs-string">&quot;谢广坤-男-41&quot;</span>);<br><br><span class="hljs-comment">//收集List集合当中</span><br>List&lt;String&gt; newList1 = list.stream()<br>    .filter(s -&gt; <span class="hljs-string">&quot;男&quot;</span>.equals(s.split(<span class="hljs-string">&quot;-&quot;</span>) [<span class="hljs-number">1</span>]))<br>    .collect(Collectors.toList());<br><br><span class="hljs-comment">//收集Set集合当中,会去重</span><br>Set&lt;String&gt; newList2 = list.stream().filter(s -&gt; <span class="hljs-string">&quot;男&quot;</span>.equals(s.split(<span class="hljs-string">&quot;-&quot;</span>) [<span class="hljs-number">1</span>]))<br>    .collect(Collectors.toSet());<br><br><span class="hljs-comment">//收集到Map集合中，键对应名字，值对应年龄</span><br>Map&lt;String, Integer&gt; map2 = list.stream()<br>    .filter(s -&gt; <span class="hljs-string">&quot;y&#x27;&quot;</span>.equals(s.split(<span class="hljs-string">&quot;-&quot;</span>) [<span class="hljs-number">1</span>]))<br>    .collect(Collectors.toMap(<br>        s -&gt; s.split(<span class="hljs-string">&quot;-&quot;</span>) [<span class="hljs-number">0</span>],<br>        s -&gt; Integer.parseInt(s.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">2</span>])));<br></code></pre></td></tr></table></figure><h2 id="10-方法引用"><a href="#10-方法引用" class="headerlink" title="10. 方法引用"></a>10. 方法引用</h2><p>把已经有的方法拿过来用，当做函数式接口中抽象方法的方法体</p><ol><li>引用处需要是函数式接口</li><li>被引用的方法需要已经存在</li><li>被引用方法的形参和返回值需要跟抽象方法的形参和返回值保持一致</li></ol><h4 id="A-引用静态方法"><a href="#A-引用静态方法" class="headerlink" title="A. 引用静态方法"></a>A. 引用静态方法</h4><p>格式： <code>类名::静态方法</code><br>示例： <code>Integer::parseInt</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将集合中数字变成int类型</span><br><span class="hljs-comment">//1.创建集合并添加元素</span><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>);<br><br>list.stream()<br>    .map(Integer::parseInt)<br>    .forEach(s-&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><h4 id="B-引用成员方法"><a href="#B-引用成员方法" class="headerlink" title="B. 引用成员方法"></a>B. 引用成员方法</h4><p>格式： <code>对象::成员方法</code></p><ol><li>其他类:<code>其他类对象::方法名</code></li><li>本类:<code>this::方法名</code>(引用处不能是静态方法)</li><li>父类:<code>super::方法名</code>(引用处不能是静态方法)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringOperation</span> <span class="hljs-variable">so</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringOperation</span>();<br>list.stream().filter(so::stringJudge)  <span class="hljs-comment">//调用StringOperation类中的stringJudge方法</span><br>    .forEach(s-&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><h4 id="C-引用构造方法"><a href="#C-引用构造方法" class="headerlink" title="C. 引用构造方法"></a>C. 引用构造方法</h4><p>格式： <code>类名::new</code><br>示例： <code>Student::new</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;张无忌,15&quot;</span>,<span class="hljs-string">&quot;周芷若,14&quot;</span>,<span class="hljs-string">&quot;赵敏,13&quot;</span>)<br><br><span class="hljs-comment">//封装成Student对象并收集到List集合中</span><br>List&lt;Student&gt; newList2 = list.stream().map(Student::<span class="hljs-keyword">new</span>).collect(Collectors.tolist());<br>System.out.println(newList2);<br></code></pre></td></tr></table></figure><h4 id="D-类名引用成员方法"><a href="#D-类名引用成员方法" class="headerlink" title="D. 类名引用成员方法"></a>D. 类名引用成员方法</h4><p>格式： <code>类名::成员方法</code><br>示例： <code>String::substring</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list,<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-string">&quot;ddd&quot;</span>);<br><br><span class="hljs-comment">//拿着流里面的每一个数据,去调用String类中的toUpperCase方法,方法的返回值就是转换之后的结果。|</span><br>list.stream().map(String::toUpperCase).forEach(s -&gt; System.out.println(s));<br></code></pre></td></tr></table></figure><h4 id="E-引用数组的构造方法"><a href="#E-引用数组的构造方法" class="headerlink" title="E. 引用数组的构造方法"></a>E. 引用数组的构造方法</h4><p>格式： <code>数据类型[]::new</code><br>示例： <code>int[]::new</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list,<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><br><span class="hljs-comment">//收集到数组当中</span><br>Integer[] arr2 = list.stream().toArray(Integer[]::<span class="hljs-keyword">new</span>);<br>System.out.println(Arrays.toString(arr2));<br></code></pre></td></tr></table></figure><h1 id="三-JAVA核心"><a href="#三-JAVA核心" class="headerlink" title="三. JAVA核心"></a>三. JAVA核心</h1><h2 id="1-异常"><a href="#1-异常" class="headerlink" title="1. 异常"></a>1. 异常</h2><h4 id="A-异常体系介绍"><a href="#A-异常体系介绍" class="headerlink" title="A. 异常体系介绍"></a>A. 异常体系介绍</h4><p>异常(Exception)就是程序出现的问题</p><p><img src="/img/blogs/java/javase/3.1.1.png"></p><h4 id="B-编译时异常和运行时异常"><a href="#B-编译时异常和运行时异常" class="headerlink" title="B. 编译时异常和运行时异常"></a>B. 编译时异常和运行时异常</h4><p><img src="/img/blogs/java/javase/3.1.2.png"></p><ul><li>编译时异常：为了提醒程序员代码有问题</li><li>运行时异常(仅有RuntimeException)：代码运行出错产生异常</li></ul><h4 id="C-异常的作用"><a href="#C-异常的作用" class="headerlink" title="C. 异常的作用"></a>C. 异常的作用</h4><ol><li>用来查询bug的关键参考信息</li><li>可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况</li></ol><h4 id="D-异常的处理方式"><a href="#D-异常的处理方式" class="headerlink" title="D. 异常的处理方式"></a>D. 异常的处理方式</h4><h5 id="1-JVM默认处理方式"><a href="#1-JVM默认处理方式" class="headerlink" title="1. JVM默认处理方式"></a>1. JVM默认处理方式</h5><p>在控制台提示异常问题，代码不在运行</p><h5 id="2-自己处理-捕获异常try…catch"><a href="#2-自己处理-捕获异常try…catch" class="headerlink" title="2. 自己处理(捕获异常try…catch)"></a>2. 自己处理(捕获异常try…catch)</h5><p>当代码出现异常，<strong>可以让程序继续往下执行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    可能出现异常的代码;<br>&#125;<span class="hljs-keyword">catch</span>(异常类名 变量名)&#123;<br>    异常的处理代码;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br><span class="hljs-keyword">try</span>&#123;<br>    System.out.println(arr[<span class="hljs-number">10</span>]);    <span class="hljs-comment">//可能出现异常的代码;</span><br>&#125;<span class="hljs-keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;<br>    <span class="hljs-comment">//如果出现了ArrayIndexOutOfBoundsException异常,我该如何处理</span><br>    System.out.println(<span class="hljs-string">&quot;索引越界了&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;看看我执行了吗?&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="3-自己处理-灵魂四问"><a href="#3-自己处理-灵魂四问" class="headerlink" title="3. 自己处理(灵魂四问)"></a>3. 自己处理(灵魂四问)</h5><p><strong>灵魂一问:如果try中没有遇到问题,怎么执行?</strong><br>    正常执行</p><p><strong>灵魂二问:如果try中可能会遇到多个问题,怎么执行?</strong><br>    会写多个catch与之对应<br>细节:如果我们要捕获多个异常,这些异常中如果存在父子关系的话,那么父类一定要写在下面</p><p><strong>灵魂三问:如果try中遇到的问题没有被捕获,怎么执行?</strong><br>    相当于try..catch白写了，最终交给虚拟机处理</p><p><strong>灵魂四问:如果try中遇到了问题,那么try下面的其他代码还会执行吗?</strong><br>    下面的代码就不会执行了,直接跳转到对应的catch当中,执行catch里面的语句体</p><h5 id="4-抛出处理-throw和throws"><a href="#4-抛出处理-throw和throws" class="headerlink" title="4. 抛出处理(throw和throws)"></a>4. 抛出处理(throw和throws)</h5><p><strong>throws</strong><br>写在方法定义处，表示声明一个异常,编译时异常必须要写<br><code>public void 方法()throws 异常类名1,异常类名2 ... {}</code></p><p><strong>throw</strong><br>写在方法中，结束方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">void</span> <span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-comment">//下面代码就不执行了</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="E-异常的常见方法"><a href="#E-异常的常见方法" class="headerlink" title="E. 异常的常见方法"></a>E. 异常的常见方法</h4><p>Throwable的成员方法<br>    public void printStackTrace(): 把异常的错误信息输出在控制台</p><h4 id="F-自定义异常"><a href="#F-自定义异常" class="headerlink" title="F. 自定义异常"></a>F. 自定义异常</h4><p>为了让控制台的报错信息见名知意</p><ol><li>定义异常类</li><li>写继承关系</li><li>空参构造和带参构造</li></ol><h2 id="2-File"><a href="#2-File" class="headerlink" title="2. File"></a>2. File</h2><p>File对象表示路径，可以是文件和文件夹</p><h4 id="A-File类的构造方法"><a href="#A-File类的构造方法" class="headerlink" title="A. File类的构造方法"></a>A. File类的构造方法</h4><table><thead><tr><th>构造方法</th><th>作用</th></tr></thead><tbody><tr><td>public File(String pathname)</td><td>根据文件路径创建文件对象</td></tr><tr><td>public File(String parent, String child)</td><td>根据父路径名字符串和子路径名字符串创建文件对象</td></tr><tr><td>public File(File parent, String child)</td><td>根据父路径对应文件对象和子路径名字符串创建文件对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.根据字符串表示的路径,变成File对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\alienware\\Desktop\\a.txt&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(str);<br>System.out.println(f1);<br><br><span class="hljs-comment">//2.父级路径:C:\Users\alienware\Desktop</span><br><span class="hljs-comment">//子级路径:a.txt</span><br><span class="hljs-type">String</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\alienware\\Desktop&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a.txt&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent, child);<br>System.out.println(f2);<br><br><span class="hljs-comment">//3.把一个File表示的路径和String表示路径进行拼接</span><br><span class="hljs-type">File</span> <span class="hljs-variable">parent2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\alienware\\Desktop&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">child2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a.txt&quot;</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">f4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent2,child2);<br>System.out.println(f4);<br></code></pre></td></tr></table></figure><h4 id="B-File类的常见成员方法"><a href="#B-File类的常见成员方法" class="headerlink" title="B. File类的常见成员方法"></a>B. File类的常见成员方法</h4><h5 id="1-判断和获取"><a href="#1-判断和获取" class="headerlink" title="1. 判断和获取"></a>1. 判断和获取</h5><table><thead><tr><th>常见方法</th><th>作用</th></tr></thead><tbody><tr><td>public boolean isDirectory()</td><td>判断此路径名表示的File是否为文件夹</td></tr><tr><td>public boolean isFile()</td><td>判断此路径名表示的File是否为文件</td></tr><tr><td>public boolean exists()</td><td>判断此路径名表示的File是否存在</td></tr><tr><td>public long length()</td><td>返回文件的大小(字节数量)</td></tr><tr><td>public String getAbsolutePath()</td><td>返回文件的绝对路径</td></tr><tr><td>public String getPath()</td><td>返回定义文件时使用的路径</td></tr><tr><td>public String getName()</td><td>返回文件的名称,带后缀</td></tr><tr><td>public long lastModified()</td><td>返回文件的最后修改时间(时间毫秒值)</td></tr></tbody></table><h5 id="2-创建和删除"><a href="#2-创建和删除" class="headerlink" title="2. 创建和删除"></a>2. 创建和删除</h5><table><thead><tr><th>常见方法</th><th>作用</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>创建一个新的空的文件</td></tr><tr><td>public boolean mkdir()</td><td>创建单级文件夹</td></tr><tr><td>public boolean mkdirs()</td><td>创建多级文件夹</td></tr><tr><td>public boolean delete()</td><td>删除文件、空文件夹</td></tr></tbody></table><h5 id="3-获取并遍历"><a href="#3-获取并遍历" class="headerlink" title="3. 获取并遍历"></a>3. 获取并遍历</h5><table><thead><tr><th>常见方法</th><th>作用</th></tr></thead><tbody><tr><td>public File[] listFiles()</td><td>获取当前该路径下所有内容</td></tr></tbody></table><h2 id="3-IO流"><a href="#3-IO流" class="headerlink" title="3. IO流"></a>3. IO流</h2><h4 id="A-IO流的概述"><a href="#A-IO流的概述" class="headerlink" title="A. IO流的概述"></a>A. IO流的概述</h4><p>用于读写文件中的数据<br>输出流(output)： 程序–&gt;文件<br>输入流(input)： 文件–&gt;程序</p><p><img src="/img/blogs/java/javase/3.3.1.png"></p><h4 id="B-IO流的体系"><a href="#B-IO流的体系" class="headerlink" title="B. IO流的体系"></a>B. IO流的体系</h4><p><img src="/img/blogs/java/javase/3.3.2.png"></p><h4 id="C-字节输出流-FileOutputStream"><a href="#C-字节输出流-FileOutputStream" class="headerlink" title="C. 字节输出流(FileOutputStream)"></a>C. 字节输出流(FileOutputStream)</h4><p>操作本地文件的字节输出流，可以把程序中的数据写出到本地文件中</p><h5 id="1-书写步骤："><a href="#1-书写步骤：" class="headerlink" title="1. 书写步骤："></a>1. 书写步骤：</h5><ol><li>创建字节输出流对象</li><li>写数据</li><li>释放资源</li></ol><h5 id="2-字节输出流的细节"><a href="#2-字节输出流的细节" class="headerlink" title="2. 字节输出流的细节:"></a>2. 字节输出流的细节:</h5><ol><li>创建字节输出流对象<br> 细节1:参数是字符串表示的路径或者是File对象都是可以的<br> 细节2:如果文件不存在会创建一个新的文件,但是要保证父级路径是存在的。<br> 细节3:如果文件已经存在,则会覆盖清空文件</li><li>写数据<br> 细节:write方法的参数是整数,但是实际上写到本地文件中的是整数在ASCII上对应的字符</li></ol><h5 id="3-FileOutputStream的三种方法"><a href="#3-FileOutputStream的三种方法" class="headerlink" title="3. FileOutputStream的三种方法"></a>3. FileOutputStream的三种方法</h5><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void write(int b)</td><td>一次写一个字节数据</td></tr><tr><td>void write(byte[] b)</td><td>一次写一个字节数组数据</td></tr><tr><td>void write(byte[] b, int off, int len)</td><td>一次写一个字节数组的部分数据</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建对象</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;myio\\a.txt&quot;</span>);<br><br><span class="hljs-comment">//2.写出数据</span><br>fos.write(<span class="hljs-number">97</span>); <span class="hljs-comment">// a</span><br>fos.write(<span class="hljs-number">98</span>); <span class="hljs-comment">// b</span><br><span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>&#125;;<br>fos.write(bytes) ;<br>fos.write(bytes, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">// b c</span><br><br><span class="hljs-comment">//3.释放资源</span><br>fos.close();<br></code></pre></td></tr></table></figure><h5 id="4-换行和续写"><a href="#4-换行和续写" class="headerlink" title="4. 换行和续写"></a>4. 换行和续写</h5><p><strong>换行符:</strong></p><ul><li>windows: \r\n</li><li>Linux: \n</li><li>Mac: \r</li></ul><p><strong>续写:</strong><br>如果想要续写,打开续写开关即可<br>开关位置:创建对象的第二个参数<br>    默认false:表示关闭续写,此时创建对象会清空文件<br>    手动传递true:表示打开续写,此时创建对象不会清空文件</p><h4 id="D-字节输入流-FileInputStream"><a href="#D-字节输入流-FileInputStream" class="headerlink" title="D. 字节输入流(FileInputStream)"></a>D. 字节输入流(FileInputStream)</h4><p>操作本地文件的字节输出流，可以把本地文件中的数据读取到程序中</p><h5 id="1-书写步骤：-1"><a href="#1-书写步骤：-1" class="headerlink" title="1. 书写步骤："></a>1. 书写步骤：</h5><ol><li>创建字节输入流对象</li><li>读数据</li><li>释放资源</li></ol><h5 id="2-FileInputStream的细节"><a href="#2-FileInputStream的细节" class="headerlink" title="2. FileInputStream的细节"></a>2. FileInputStream的细节</h5><ol><li>创建字节输入流对象<br> 如果文件不存在，就直接报错</li><li>读取数据<br> 一次读一个字节，读的是ASCII码对应的数字<br> 读到文件末尾，read方法返回-1</li></ol><h5 id="3-FileInputStream循环读取"><a href="#3-FileInputStream循环读取" class="headerlink" title="3. FileInputStream循环读取"></a>3. FileInputStream循环读取</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建对象</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;myio\\a.txt&quot;</span>);<br><span class="hljs-comment">//2.循环读取</span><br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span> ((b = fis.read()) != -<span class="hljs-number">1</span>) &#123;<br>    System.out.println((<span class="hljs-type">char</span>) b);<br>&#125;<br><span class="hljs-comment">//3.释放资源</span><br>fis.close();<br></code></pre></td></tr></table></figure><h5 id="4-文件拷贝"><a href="#4-文件拷贝" class="headerlink" title="4. 文件拷贝"></a>4. 文件拷贝</h5><p>使用字节流拷贝的速度很慢：因为一次只读取一个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建对象</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\itheima\\movie.mp4&quot;</span>);<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;myio\\copy.mp4&quot;</span>);<br><span class="hljs-comment">//2.拷贝</span><br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span>((b = fis.read()) != -<span class="hljs-number">1</span>)&#123;<br>    fos.write(b);<span class="hljs-comment">//核心思想:边读边写</span><br>&#125;<br><span class="hljs-comment">//3.释放资源 规则:先开的最后关闭</span><br>fos.close();<br>fis.close();<br></code></pre></td></tr></table></figure><h5 id="5-FileInputStream一次读取多个字节"><a href="#5-FileInputStream一次读取多个字节" class="headerlink" title="5. FileInputStream一次读取多个字节"></a>5. FileInputStream一次读取多个字节</h5><p><code>public int read(byte[] buffer)</code>: 一次读取一个字节数组数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建对象</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\itheima\\movie.mp4&quot;</span>);<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;myio\\copy.mp4&quot;</span>);<br><span class="hljs-comment">//2.拷贝</span><br><span class="hljs-type">int</span> len;<br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span>];<br><span class="hljs-keyword">while</span>((len = fis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>    fos.write(bytes,<span class="hljs-number">0</span>,len);  <span class="hljs-comment">//读多少写多少</span><br>&#125;<br><span class="hljs-comment">//3.释放资源</span><br>fos.close();<br>fis.close();<br></code></pre></td></tr></table></figure><h4 id="E-字符集"><a href="#E-字符集" class="headerlink" title="E. 字符集"></a>E. 字符集</h4><p>ASCII字符集、GBK字符集、Unicode字符集</p><ul><li>ASCII字符集：一个英文占一个字节</li><li>GBK字符集：一个英文占一个字节，一个中文占两个字节</li><li>Unicode字符集:<br>  UTF-8编码规则：用1~4个字节保存(英文一个字节，中文三个字节)</li></ul><h4 id="F-字符输入流-FileReader"><a href="#F-字符输入流-FileReader" class="headerlink" title="F. 字符输入流(FileReader)"></a>F. 字符输入流(FileReader)</h4><h5 id="1-读取步骤"><a href="#1-读取步骤" class="headerlink" title="1. 读取步骤"></a>1. 读取步骤</h5><ol><li>创建字符输入流对象</li></ol><table><thead><tr><th>构造方法</th><th>作用</th></tr></thead><tbody><tr><td>public FileReader(File file)</td><td>创建字符输入流关联本地文件</td></tr><tr><td>public FileReader(String pathname)</td><td>创建字符输入流关联本地文件</td></tr></tbody></table><ol start="2"><li>读取数据</li></ol><table><thead><tr><th>成员方法</th><th>作用</th></tr></thead><tbody><tr><td>public int read()</td><td>读取数据,读到末尾返回-1</td></tr><tr><td>public int read(char[] buffer)</td><td>读取多个数据,读到末尾返回-1</td></tr></tbody></table><ol start="3"><li>释放资源</li></ol><h5 id="2-空参read读取数据"><a href="#2-空参read读取数据" class="headerlink" title="2. 空参read读取数据"></a>2. 空参read读取数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 创建对象</span><br><span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;myio\\a.txt&quot;</span>);<br><span class="hljs-comment">//2. 读取数据</span><br><span class="hljs-type">int</span> ch;<br><span class="hljs-keyword">while</span>((ch = fr.read()) != -<span class="hljs-number">1</span>)&#123;<br>    System.out.print((<span class="hljs-type">char</span>)ch);<br>&#125;<br><span class="hljs-comment">//3. 释放资源</span><br>fr.close();<br></code></pre></td></tr></table></figure><h5 id="3-带参read读取数据"><a href="#3-带参read读取数据" class="headerlink" title="3. 带参read读取数据"></a>3. 带参read读取数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建对象</span><br><span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;myio\\a.txt&quot;</span>);<br><span class="hljs-comment">//2.读取数据</span><br><span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span>((len = fr.read(chars)) != -<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-comment">//把数组中的数据变成字符串再进行打印</span><br>    System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars,<span class="hljs-number">0</span>,len));<br>&#125;<br><span class="hljs-comment">//3.释放资源</span><br>fr.close();<br></code></pre></td></tr></table></figure><h4 id="G-字符输出流-FileWriter"><a href="#G-字符输出流-FileWriter" class="headerlink" title="G. 字符输出流(FileWriter)"></a>G. 字符输出流(FileWriter)</h4><p>书写步骤：</p><ol><li>创建字符输出流对象</li><li>写数据</li><li>释放资源</li></ol><table><thead><tr><th>构造方法</th><th>作用</th></tr></thead><tbody><tr><td>public FileWriter(File file)</td><td>创建字符输出流关联本地文件</td></tr><tr><td>public FileWriter(String pathname)</td><td>创建字符输出流关联本地文件</td></tr><tr><td>public FileWriter(File file, boolean append)</td><td>创建字符输出流关联本地文件,续写</td></tr><tr><td>public FileWriter(String pathname, boolean append)</td><td>创建字符输出流关联本地文件,续写</td></tr></tbody></table><table><thead><tr><th>成员方法</th><th>作用</th></tr></thead><tbody><tr><td>void write(int c)</td><td>写出一个字符</td></tr><tr><td>void write(String str)</td><td>写出一个字符串</td></tr><tr><td>void write(String str, int off, int len)</td><td>写出一个字符串的一部分</td></tr><tr><td>void write(char[] cbuf)</td><td>写出一个字符数组</td></tr><tr><td>void write(char[] cbuf, int off, int len)</td><td>写出字符数组的一部分</td></tr></tbody></table><h4 id="H-字节流和字符流的使用场景"><a href="#H-字节流和字符流的使用场景" class="headerlink" title="H. 字节流和字符流的使用场景"></a>H. 字节流和字符流的使用场景</h4><p>字节流： 可以拷贝任意类型的文件<br>字符流：<br>    读取纯文本文件中的数据<br>    往纯文本文件中写数据</p><h4 id="I-缓冲流"><a href="#I-缓冲流" class="headerlink" title="I. 缓冲流"></a>I. 缓冲流</h4><p><img src="/img/blogs/java/javase/3.3.3.png"></p><h5 id="1-字节缓冲流"><a href="#1-字节缓冲流" class="headerlink" title="1. 字节缓冲流"></a>1. 字节缓冲流</h5><p>字节缓冲输入流的构造方法:<br><code>public BufferedInputStream(InputStream is)</code><br>字节缓冲输出流的构造方法:<br><code>public BufferedOutputStream(OutputStream os)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建缓冲流的对象</span><br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;myio\\a.txt&quot;</span>));<br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;myio\\copy.txt&quot;</span>));<br><span class="hljs-comment">//2.循环读取并写到目的地</span><br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span> ((b = bis.read()) != -<span class="hljs-number">1</span>) &#123;<br>    bos.write(b);<br>&#125;<br><span class="hljs-comment">//3.释放资源</span><br>bos.close();<br>bis.close();<br></code></pre></td></tr></table></figure><h5 id="2-字符缓冲流"><a href="#2-字符缓冲流" class="headerlink" title="2. 字符缓冲流"></a>2. 字符缓冲流</h5><p><strong>字符缓冲输入流</strong><br>    构造方法: <code>public BufferedReader(Reader r)</code><br>    特有方法: <code>public String readLine()</code> 读一整行</p><p><strong>字符缓冲输出流</strong><br>    构造方法: <code>public BufferedWriter(Writer r)</code><br>    特有方法: <code>public void newLine()</code> 跨平台的换行</p><h4 id="J-转换流"><a href="#J-转换流" class="headerlink" title="J. 转换流"></a>J. 转换流</h4><p>是字符流和字节流之间的桥梁<br>字节流使用字符流中的方法就需要转换流</p><h4 id="K-序列化流-反序列化流"><a href="#K-序列化流-反序列化流" class="headerlink" title="K. 序列化流&#x2F;反序列化流"></a>K. 序列化流&#x2F;反序列化流</h4><h5 id="1-序列化流-对象操作输出流"><a href="#1-序列化流-对象操作输出流" class="headerlink" title="1. 序列化流&#x2F;对象操作输出流"></a>1. 序列化流&#x2F;对象操作输出流</h5><p>可以把java中的对象写到本地文件中<br>构造方法: <code>public ObjectOutputStream(OutputStream out)</code>把基本流变成高级流<br>成员方法: <code>public final void writeObject(Object obj)</code>把对象序列化(写出)到文件中去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">23</span>);<br><span class="hljs-comment">//2.创建序列化流的对象/对象操作输出流</span><br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;myio\\a.txt&quot;</span>));<br><span class="hljs-comment">//3.写出数据</span><br>oos.writeObject(stu);<br><span class="hljs-comment">//4.释放资源</span><br>oos.close();<br></code></pre></td></tr></table></figure><h5 id="2-反序列化流-对象操作输入流"><a href="#2-反序列化流-对象操作输入流" class="headerlink" title="2. 反序列化流&#x2F;对象操作输入流"></a>2. 反序列化流&#x2F;对象操作输入流</h5><p>可以把序列化到本地文件中的对象读取到程序中<br>构造方法: <code>public ObjectInputStream(InputStream out)</code>把基本流变成高级流<br>成员方法: <code>public Object readObject()</code>把序列化到本地文件中的对象,读取到程序中来</p><h5 id="3-序列化流的细节"><a href="#3-序列化流的细节" class="headerlink" title="3. 序列化流的细节"></a>3. 序列化流的细节</h5><p>序列化对象不能修改Javabean类，否则不能反序列化<br>解决方案：在javabean类中添加版本号<br>    <code>private static final long serialVersionUID = -6357601841666449654L;</code></p><h4 id="L-打印流"><a href="#L-打印流" class="headerlink" title="L. 打印流"></a>L. 打印流</h4><ul><li>只有写，没有读</li><li>PrintStream和PrintWriter两个类</li></ul><h5 id="1-字节打印流"><a href="#1-字节打印流" class="headerlink" title="1. 字节打印流"></a>1. 字节打印流</h5><table><thead><tr><th>构造方法</th><th>作用</th></tr></thead><tbody><tr><td>public PrintStream(OutputStream&#x2F;File&#x2F;String)</td><td>关联字节输出流&#x2F;文件&#x2F;文件路径</td></tr><tr><td>public PrintStream(String fileName, Charset charset)</td><td>指定字符编码</td></tr><tr><td>public PrintStream(OutputStreamout, boolean autoFlush)</td><td>自动刷新</td></tr><tr><td>public PrintStream(OutputStream out, boolean autoFlush, String encoding)</td><td>指定字符编码且自动刷新</td></tr></tbody></table><table><thead><tr><th>成员方法</th><th>作用</th></tr></thead><tbody><tr><td>public void write(int b)</td><td>常规方法:规则跟之前一样,将指定的字节写出</td></tr><tr><td>public void println(Xxx xx)</td><td>特有方法:打印任意数据,自动刷新,自动换行</td></tr><tr><td>public void print(Xxx xx)</td><td>特有方法:打印任意数据,不换行</td></tr><tr><td>public void printf(String format, Object … args)</td><td>特有方法:带有占位符的打印语句,不换行</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建字节打印流的对象</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>( <span class="hljs-string">&quot;myio\\a.txt&quot;</span>),<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">//2.写出数据</span><br>ps.println(<span class="hljs-number">97</span>);<span class="hljs-comment">//写出+自动刷新+自动换行</span><br>ps.print(<span class="hljs-literal">true</span>);<br>ps.println();<br>ps.printf(<span class="hljs-string">&quot;%s爱上了%s&quot;</span>,<span class="hljs-string">&quot;阿珍&quot;</span>,<span class="hljs-string">&quot;阿强&quot;</span>);<br><span class="hljs-comment">//3.释放资源</span><br>ps.close();<br></code></pre></td></tr></table></figure><h5 id="2-字符打印流"><a href="#2-字符打印流" class="headerlink" title="2. 字符打印流"></a>2. 字符打印流</h5><p>字符打印流的构造方法和成员方法和字节打印流一样<br>字符流底层有缓冲区，想要自动刷新需要开启</p><h4 id="M-解压缩流-压缩流"><a href="#M-解压缩流-压缩流" class="headerlink" title="M. 解压缩流&#x2F;压缩流"></a>M. 解压缩流&#x2F;压缩流</h4><h5 id="1-解压缩流"><a href="#1-解压缩流" class="headerlink" title="1. 解压缩流"></a>1. 解压缩流</h5><h5 id="2-压缩流"><a href="#2-压缩流" class="headerlink" title="2. 压缩流"></a>2. 压缩流</h5><p>压缩本质：把每个文件&#x2F;文件夹看出ZipEntry对象放到压缩包中</p><h4 id="N-Commons-io和Hutool"><a href="#N-Commons-io和Hutool" class="headerlink" title="N. Commons-io和Hutool"></a>N. Commons-io和Hutool</h4><p>有关IO操作的开源工具包，提高IO流的开发效率</p><h2 id="4-多线程"><a href="#4-多线程" class="headerlink" title="4. 多线程"></a>4. 多线程</h2><h4 id="A-什么是多线程"><a href="#A-什么是多线程" class="headerlink" title="A. 什么是多线程"></a>A. 什么是多线程</h4><ul><li>进程是程序的基本执行实体</li><li>线程是操作系统能够进行运算调度的最小单位。被包含在进程中，是进程的实际运作单位。</li><li>有了多线程，就可以让程序同时做多件事情，提高效率</li></ul><h4 id="B-并发和并行"><a href="#B-并发和并行" class="headerlink" title="B. 并发和并行"></a>B. 并发和并行</h4><ul><li>并发： 在同一时刻，有多个指令在单个CPU上<strong>交替执行</strong></li><li>并行： 在同一时刻，有多个指令在多个CPU上<strong>同时执行</strong></li></ul><h4 id="C-多线程的实现方式"><a href="#C-多线程的实现方式" class="headerlink" title="C. 多线程的实现方式"></a>C. 多线程的实现方式</h4><h5 id="1-继承Thread类的方式"><a href="#1-继承Thread类的方式" class="headerlink" title="1. 继承Thread类的方式"></a>1. 继承Thread类的方式</h5><ol><li>自己定义一个类继承Thread</li><li>重写run方法</li><li>创建子类的对象,并启动线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">//重写run方法</span><br>&#125;<br><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(); <span class="hljs-comment">//MyThread是自己创建的类</span><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><br>t1.setName(<span class="hljs-string">&quot;线程1&quot;</span>);<br>t2.setName(<span class="hljs-string">&quot;线程2&quot;</span>);<br><br>t1.start();<br>t2.start();<br></code></pre></td></tr></table></figure><h5 id="2-实现Runnable接口的方式"><a href="#2-实现Runnable接口的方式" class="headerlink" title="2. 实现Runnable接口的方式"></a>2. 实现Runnable接口的方式</h5><ol><li>自己定义一个类实现Runnable接口</li><li>重写里面的run方法</li><li>创建自己的类的对象</li><li>创建一个Thread类的对象,并开启线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRun</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">//重写run方法</span><br>&#125;<br><br><span class="hljs-comment">//创建MyRun的对象</span><br><span class="hljs-type">MyRun</span> <span class="hljs-variable">mr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRun</span>();<br><br><span class="hljs-comment">//创建线程对象</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr);<br><br><span class="hljs-comment">//给线程设置名字</span><br>t1.setName(<span class="hljs-string">&quot;线程1&quot;</span>);<br>t2.setName(<span class="hljs-string">&quot;线程2&quot;</span>);<br><br><span class="hljs-comment">//开启线程</span><br>t1.start();<br>t2.start();<br></code></pre></td></tr></table></figure><h5 id="3-利用Callable接口和Future接口"><a href="#3-利用Callable接口和Future接口" class="headerlink" title="3. 利用Callable接口和Future接口"></a>3. 利用Callable接口和Future接口</h5><p>特点:可以获取到多线程运行的结果</p><ol><li>创建一个类MyCallable实现Callable接口</li><li>重写call(是有返回值的,表示多线程运行的结果)</li><li>创建MyCallable的对象(表示多线程要执行的任务)</li><li>创建FutureTask的对象(作用管理多线程运行的结果)</li><li>创建Thread类的对象,并启动(表示线程)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt;&#123;<br>    <span class="hljs-comment">//重写run方法</span><br>&#125;<br><br><span class="hljs-comment">//创建MyCallable的对象(表示多线程要执行的任务)</span><br><span class="hljs-type">MyCallable</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>();<br><span class="hljs-comment">//创建FutureTask的对象(作用管理多线程运行的结果)</span><br>FutureTask&lt;Integer&gt; ft = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(mc);<br><span class="hljs-comment">//创建线程的对象</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft);<br><span class="hljs-comment">//启动线程</span><br>t1.start();<br><br><span class="hljs-comment">//获取多线程运行的结果</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ft.get();<br>System.out.println(result);|<br></code></pre></td></tr></table></figure><h5 id="4-三种实现方式对比"><a href="#4-三种实现方式对比" class="headerlink" title="4. 三种实现方式对比"></a>4. 三种实现方式对比</h5><p><img src="/img/blogs/java/javase/3.4.1.png"></p><h4 id="D-Thread常见的成员方法"><a href="#D-Thread常见的成员方法" class="headerlink" title="D. Thread常见的成员方法"></a>D. Thread常见的成员方法</h4><table><thead><tr><th>成员方法</th><th>作用</th></tr></thead><tbody><tr><td>String getName()</td><td>返回此线程的名称</td></tr><tr><td>void setName(String name)</td><td>设置线程的名字(构造方法也可以设置名字)</td></tr><tr><td>static Thread currentThread()</td><td>获取当前线程的对象</td></tr><tr><td>static void sleep(long time)</td><td>让线程休眠指定的时间,单位为毫秒</td></tr><tr><td>setPriority(int newPriority)</td><td>设置线程的优先级</td></tr><tr><td>final int getPriority()</td><td>获取线程的优先级</td></tr><tr><td>final void setDaemon(boolean on)</td><td>设置为守护线程</td></tr><tr><td>public static void yield()</td><td>出让线程&#x2F;礼让线程</td></tr><tr><td>public static void join()</td><td>插入线程&#x2F;插队线程</td></tr></tbody></table><p>细节：</p><ol><li>如果我们没有给线程设置名字,线程也是有默认的名字的<br> 格式:Thread-X(X序号,从0开始的)</li><li>如果我们要给线程设置名字,可以用set方法进行设置,也可以构造方法设置</li><li>优先级：1~10，1最低，10最高(java是抢占式调度)</li><li>守护线程：当其他非守护线程执行完毕之后，守护线程会尽快结束不再进行</li></ol><h4 id="E-线程的生命周期"><a href="#E-线程的生命周期" class="headerlink" title="E. 线程的生命周期"></a>E. 线程的生命周期</h4><p><img src="/img/blogs/java/javase/3.4.2.png"></p><h4 id="F-线程安全"><a href="#F-线程安全" class="headerlink" title="F. 线程安全"></a>F. 线程安全</h4><p>当多个线程同时操作同一个资源时，可能会导致数据出错或程序行为异常</p><h4 id="G-同步代码块"><a href="#G-同步代码块" class="headerlink" title="G. 同步代码块"></a>G. 同步代码块</h4><p>把操作共享数据的代码锁起来<br>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(锁)&#123;<br>    操作共享数据的代码<br>&#125;<br></code></pre></td></tr></table></figure><p>特点：<br>    1. 锁默认打开，有一个线程进去了，锁自动关闭<br>    2. 里面的代码全部执行完毕，线程出来，锁自动打开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//表示这个类所有的对象,都共享ticket数据</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//0 ~ 99</span><br><span class="hljs-comment">//锁对象,一定要是唯一的</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-comment">//同步代码块</span><br>        <span class="hljs-keyword">synchronized</span> (obj)&#123;<br>            <span class="hljs-keyword">if</span>(ticket &lt; <span class="hljs-number">100</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                        &#125;<br>                        ticket++;<br>                        System.out.println(getName() + <span class="hljs-string">&quot;正在卖第&quot;</span> + ticket + <span class="hljs-string">&quot;张票! ! &quot;</span>);<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br></code></pre></td></tr></table></figure><h4 id="H-同步方法"><a href="#H-同步方法" class="headerlink" title="H. 同步方法"></a>H. 同步方法</h4><p>就是把synchronized关键字加到方法上<br>格式：<code>修饰符 synchronized 返回值类型 方法名(方法参数) {...}</code></p><ol><li>同步方法是锁住方法里面所有代码</li><li>锁对象不能自己指定<ul><li>非静态：this</li><li>静态：当前类的字节码文件对象</li></ul></li></ol><h4 id="I-Lock锁"><a href="#I-Lock锁" class="headerlink" title="I. Lock锁"></a>I. Lock锁</h4><p>可以手动上锁、手动解锁</p><ul><li><code>void lock()</code>: 获得锁</li><li><code>void unlock()</code>: 释放锁</li><li>Lock是接口不能直接实例化,采用它的实现类ReentrantLock来实例化<ul><li><code>ReentrantLock()</code>:创建一个ReentrantLock的实例</li></ul></li></ul><h4 id="J-生产者和消费者-等待唤醒机制"><a href="#J-生产者和消费者-等待唤醒机制" class="headerlink" title="J. 生产者和消费者(等待唤醒机制)"></a>J. 生产者和消费者(等待唤醒机制)</h4><h5 id="1-常见方法"><a href="#1-常见方法" class="headerlink" title="1. 常见方法"></a>1. 常见方法</h5><table><thead><tr><th>常见方法</th><th>作用</th></tr></thead><tbody><tr><td>void wait()</td><td>当前线程等待,直到被其他线程唤醒</td></tr><tr><td>void notify()</td><td>随机唤醒单个线程</td></tr><tr><td>void notifyAll()</td><td>唤醒所有线程</td></tr></tbody></table><h5 id="2-阻塞队列实现等待唤醒机制"><a href="#2-阻塞队列实现等待唤醒机制" class="headerlink" title="2. 阻塞队列实现等待唤醒机制"></a>2. 阻塞队列实现等待唤醒机制</h5><p>生产者和消费者必须使用同一个阻塞队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayBlockingQueue&lt;String&gt; queue;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Foodie</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; queue)</span> &#123; <br>    <span class="hljs-built_in">this</span>.queue = queue;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-comment">//不断从阻塞队列中获取面条</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">food</span> <span class="hljs-operator">=</span> queue.take();<br>            System.out.println(food);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>                &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="K-线程的六种状态"><a href="#K-线程的六种状态" class="headerlink" title="K. 线程的六种状态"></a>K. 线程的六种状态</h4><p><img src="/img/blogs/java/javase/3.4.3.png"></p><h4 id="L-线程池"><a href="#L-线程池" class="headerlink" title="L. 线程池"></a>L. 线程池</h4><h5 id="1-线程池主要原理"><a href="#1-线程池主要原理" class="headerlink" title="1. 线程池主要原理"></a>1. 线程池主要原理</h5><ol><li>创建一个池子,池子中是空的</li><li>提交任务时,池子会创建新的线程对象,任务执行完毕,线程归还给池子,下回再次提交任务时,不需要创建新的线程,直接复用已有的线程即可</li><li>但是如果提交任务时,池子中没有空闲线程,也无法创建新的线程,任务就会排队等待</li></ol><h5 id="2-代码实现："><a href="#2-代码实现：" class="headerlink" title="2. 代码实现："></a>2. 代码实现：</h5><ol><li>创建线程池</li><li>提交任务</li><li>所有任务全部执行完毕，关闭线程池<br>Executors:线程池的工具类通过调用方法返回不同类型的线程池对象</li></ol><table><thead><tr><th>方法名称</th><th>作用</th></tr></thead><tbody><tr><td>public static ExecutorService newCachedThreadPool()</td><td>创建一个没有上限的线程池</td></tr><tr><td>public static ExecutorService newFixedThreadPool(int nThreads)</td><td>创建有上限的线程池</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.获取线程池对象</span><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br><span class="hljs-comment">//2.提交任务</span><br>pool1.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>());<br><span class="hljs-comment">//3.销毁线程池</span><br>pool1.shutdown();<br></code></pre></td></tr></table></figure><h4 id="M-自定义线程池"><a href="#M-自定义线程池" class="headerlink" title="M. 自定义线程池"></a>M. 自定义线程池</h4><p>创建线程池对象：<br><code>ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(核心线程数量,最大线程数量,空闲线程最大存活时间,任务队列,创建线程工厂,任务的拒绝策略);</code><br>参数一:核心线程数量   不能小于0<br>参数二:最大线程数    不能小于0,最大数量 &gt;&#x3D;核心线程数量<br>参数三:空闲线程最大存活时间  不能小于e<br>参数四:时间单位   用TimeUnit指定<br>参数五:任务队列   不能为null<br>参数六:创建线程工厂   不能为null<br>参数七:任务的拒绝策略   不能为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>    <span class="hljs-number">3</span>,<span class="hljs-comment">//核心线程数量,能小于0</span><br>    <span class="hljs-number">6</span>, <span class="hljs-comment">//最大线程数,不能小于0,最大数量&gt;=核心线程数量</span><br>    <span class="hljs-number">60</span>,<span class="hljs-comment">//空闲线程最大存活时间</span><br>    TimeUnit.SECONDS,<span class="hljs-comment">//时间单位</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>),<span class="hljs-comment">//任务队列</span><br>    Executors.defaultThreadFactory(),<span class="hljs-comment">//创建线程工厂</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy()<span class="hljs-comment">//任务的拒绝策略</span><br>);<br></code></pre></td></tr></table></figure><h2 id="5-网络编程"><a href="#5-网络编程" class="headerlink" title="5. 网络编程"></a>5. 网络编程</h2><p>计算机之间通过网络进行数据传输</p><h4 id="A-CS架构和BS架构"><a href="#A-CS架构和BS架构" class="headerlink" title="A. CS架构和BS架构"></a>A. CS架构和BS架构</h4><ul><li>C&#x2F;S: Client&#x2F;Server 客户端&#x2F;服务器</li><li>B&#x2F;S: Browser&#x2F;Server 浏览器&#x2F;服务器<br>BS架构的优缺点<ul><li>不需要开发客户端，只需要页面+服务器</li><li>用户不用下载，打开浏览器就能用</li><li>如果应用过大，用户体验差</li></ul></li></ul><p>CS架构的优缺点</p><ul><li>画面更精美，用户体验好</li><li>需要开发客户端，也要开发服务器</li><li>用户下载和更新麻烦</li></ul><h4 id="B-网络编程三要素"><a href="#B-网络编程三要素" class="headerlink" title="B. 网络编程三要素"></a>B. 网络编程三要素</h4><p>IP、端口号、协议</p><ol><li>IP<ul><li>设备在网络中的地址,是唯一的标识。</li></ul></li><li>端口号<ul><li>应用程序在设备中唯一的标识。</li></ul></li><li>协议<ul><li>数据在网络中传输的规则,常见的协议有UDP、TCP、http、https、ftp。</li></ul></li></ol><h4 id="C-IP"><a href="#C-IP" class="headerlink" title="C. IP"></a>C. IP</h4><h5 id="1-IPv4"><a href="#1-IPv4" class="headerlink" title="1. IPv4"></a>1. IPv4</h5><p>分为公网地址和私网地址(192.168.1.1~192.168.255.255)</p><ul><li>127.0.0.1： 本机地址</li><li>ipconfig:查看本机IP地址</li><li>ping:检查网络是否连通</li></ul><h5 id="2-InetAddress类"><a href="#2-InetAddress类" class="headerlink" title="2. InetAddress类"></a>2. InetAddress类</h5><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>static InetAddress getByName(String host)</td><td>确定主机名称的IP地址。主机名称可以是机器名称,也可以是IP地址</td></tr><tr><td>String getHostName()</td><td>获取此IP地址的主机名</td></tr><tr><td>String getHostAddress()</td><td>返回文本显示中的IP地址字符串</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取InetAddress的对象</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;DESKTOP-50JJSAM&quot;</span>);<br>System.out.println(address);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> address.getHostName();<br>System.out.println(name);<span class="hljs-comment">//DESKTOP-50JJSAM</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> address.getHostAddress();<br>System.out.println(ip);<span class="hljs-comment">//192.168.1.100</span><br></code></pre></td></tr></table></figure><h4 id="D-端口号"><a href="#D-端口号" class="headerlink" title="D. 端口号"></a>D. 端口号</h4><ul><li>取值范围0<del>65535<br>  其中0</del>1023用于知名应用或网络服务，自己只能用1024以上的端口号</li><li>一个端口号只能被一个应用程序使用</li></ul><h4 id="E-协议"><a href="#E-协议" class="headerlink" title="E. 协议"></a>E. 协议</h4><p>计算机网络中，连接和通信的规则称为网络通信协议<br><img src="/img/blogs/java/javase/3.5.1.png"></p><h5 id="1-UDP协议"><a href="#1-UDP协议" class="headerlink" title="1. UDP协议"></a>1. UDP协议</h5><p>用户数据报协议(User Datagram Protocol)</p><ul><li>UDP是面向无连接通信协议。</li><li>速度快,有大小限制一次最多发送64K,数据不安全,易丢失数据</li></ul><h5 id="2-TCP协议"><a href="#2-TCP协议" class="headerlink" title="2. TCP协议"></a>2. TCP协议</h5><p>传输控制协议TCP(Transmission Control Protocol)</p><ul><li>TCP协议是面向连接的通信协议。</li><li>速度慢,没有大小限制,数据安全。</li></ul><h4 id="F-UDP通信程序"><a href="#F-UDP通信程序" class="headerlink" title="F. UDP通信程序"></a>F. UDP通信程序</h4><h5 id="1-发送数据"><a href="#1-发送数据" class="headerlink" title="1. 发送数据"></a>1. 发送数据</h5><ol><li>创建发送端的DatagramSocket对象</li><li>数据打包(DatagramPacket)</li><li>发送数据</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 创建对象</span><br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><br><span class="hljs-comment">//2.打包数据</span><br>String str=<span class="hljs-string">&quot;你好!!!&quot;</span>;<br><span class="hljs-type">byte</span>[] bytes = str.getBytes();<br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">10086</span>;<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes,bytes.length, address, port);<br><br><span class="hljs-comment">//3.发送数据</span><br>ds.send(dp);<br><span class="hljs-comment">//4.释放资源</span><br>ds.close();<br></code></pre></td></tr></table></figure><h5 id="2-接收数据"><a href="#2-接收数据" class="headerlink" title="2. 接收数据"></a>2. 接收数据</h5><ol><li>创建接收端的DatagramSocket对象</li><li>接收打包好的数据</li><li>解析数据包</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.接收的端口和发送的端口保持一致</span><br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">10086</span>);<br><br><span class="hljs-comment">//2.接收数据包</span><br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes,bytes.length);<br>ds.receive(dp);<br><br><span class="hljs-comment">//3.解析数据包</span><br><span class="hljs-type">byte</span>[] data = dp.getData();<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> dp.getLength();<br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> dp.getAddress();<br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> dp.getPort();<br>System.out.println(<span class="hljs-string">&quot;按收到数据&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>,len));<br>System.out.println(<span class="hljs-string">&quot;该数据是从&quot;</span>+address+<span class="hljs-string">&quot;这台电脑中的&quot;</span>+port+<span class="hljs-string">&quot;这个端口发出的&quot;</span>);<br><br><span class="hljs-comment">//4.释放资源</span><br>ds.close();<br></code></pre></td></tr></table></figure><h5 id="3-单播组播广播"><a href="#3-单播组播广播" class="headerlink" title="3. 单播组播广播"></a>3. 单播组播广播</h5><ul><li>单播：指定接收端的IP地址</li><li>组播：224.0.0.0~239.255.255.255</li><li>广播：255.255.255.255</li></ul><h4 id="G-TCP通信程序"><a href="#G-TCP通信程序" class="headerlink" title="G. TCP通信程序"></a>G. TCP通信程序</h4><ul><li>TCP通信协议是一种可靠的网络协议,它在通信的两端各建立一个Socket对象</li><li>通信之前要保证连接已经建立</li><li>通过Socket产生I0流来进行网络通信</li></ul><h5 id="1-客户端"><a href="#1-客户端" class="headerlink" title="1. 客户端"></a>1. 客户端</h5><ol><li>创建客户端的Socket对象(Socket)与指定服务端连接<br><code>Socket(String host, int port)</code></li><li>获取输出流,写数据<br><code>OutputStream getOutputStream()</code></li><li>释放资源<br><code>void close()</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建Socket对象</span><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">10000</span>);<br><br><span class="hljs-comment">//2.可以从连接通道中获取输出流</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>os.write(<span class="hljs-string">&quot;你好你好&quot;</span>.getBytes());<br><br><span class="hljs-comment">//3.释放资源</span><br>os.close();<br>socket.close();<br></code></pre></td></tr></table></figure><h5 id="2-服务器端"><a href="#2-服务器端" class="headerlink" title="2. 服务器端"></a>2. 服务器端</h5><ol><li>创建服务器端的Socket对象(ServerSocket)<br><code>ServerSocket (int port)</code></li><li>监听客户端连接,返回一个Socket对象<br><code>Socket accept()</code></li><li>获取输入流,读数据,并把数据显示在控制台<br><code>InputStream getInputStream()</code></li><li>释放资源<br><code>void close()</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建对象ServerSocker</span><br><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">10000</span>);<br><br><span class="hljs-comment">//2.监听客户端的链接</span><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br><br><span class="hljs-comment">//3.从连接通道中获取输入流读取数据</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span> ((b = is.read()) != -<span class="hljs-number">1</span>)&#123;<br>    System.out.println((<span class="hljs-type">char</span>) b);<br>&#125;<br><br><span class="hljs-comment">//4.释放资源</span><br>socket.close();<br>ss.close();<br></code></pre></td></tr></table></figure><h5 id="3-三次握手和四次挥手"><a href="#3-三次握手和四次挥手" class="headerlink" title="3. 三次握手和四次挥手"></a>3. 三次握手和四次挥手</h5><p><img src="/img/blogs/java/javase/3.5.2.png"><br><img src="/img/blogs/java/javase/3.5.3.png"></p><h2 id="6-反射"><a href="#6-反射" class="headerlink" title="6. 反射"></a>6. 反射</h2><h4 id="A-什么是反射"><a href="#A-什么是反射" class="headerlink" title="A. 什么是反射"></a>A. 什么是反射</h4><p>反射允许对成员变量、成员方法和构造方法的信息进行编程访问<br>反射就是从类中拿东西<br><img src="/img/blogs/java/javase/3.6.1.png"></p><h4 id="B-获取class对象的三种方式"><a href="#B-获取class对象的三种方式" class="headerlink" title="B. 获取class对象的三种方式"></a>B. 获取class对象的三种方式</h4><ol><li><strong>Class.forName(“全类名”);</strong>(常用)</li><li>类名.class</li><li>对象.getClass();</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 第一种方式 全类名:包名+类名</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect1.Student&quot;</span>);<br><br><span class="hljs-comment">//2. 第二种方式</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz2</span> <span class="hljs-operator">=</span> Student.class;<br><br><span class="hljs-comment">//3.第三种方式</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz3</span> <span class="hljs-operator">=</span> s.getClass();<br></code></pre></td></tr></table></figure><h4 id="C-反射获取构造方法"><a href="#C-反射获取构造方法" class="headerlink" title="C. 反射获取构造方法"></a>C. 反射获取构造方法</h4><table><thead><tr><th>Class类中用于获取构造方法的方法</th><th>作用</th></tr></thead><tbody><tr><td>Constructor&lt;?&gt;[] getConstructors()</td><td>返回所有公共构造方法对象的数组</td></tr><tr><td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td><td>返回所有构造方法对象的数组</td></tr><tr><td>Constructor<T> getConstructor(Class&lt;?&gt;…parameterTypes)</td><td>返回单个公共构造方法对象</td></tr><tr><td>Constructor<T>getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回单个构造方法对象</td></tr></tbody></table><table><thead><tr><th>Constructor类中用于创建对象的方法</th><th>作用</th></tr></thead><tbody><tr><td>T newlnstance(Object …initargs)</td><td>根据指定的构造方法创建对象</td></tr><tr><td>setAccessible(boolean flag)</td><td>设置为true,表示取消访问检查</td></tr></tbody></table><h4 id="D-反射获取成员变量"><a href="#D-反射获取成员变量" class="headerlink" title="D. 反射获取成员变量"></a>D. 反射获取成员变量</h4><table><thead><tr><th>Class类中用于获取成员变量的方法</th><th>作用</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>返回所有公共成员变量对象的数组</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回所有成员变量对象的数组</td></tr><tr><td>Field getField(String name)</td><td>返回单个公共成员变量对象</td></tr><tr><td>Field getDeclaredField(String name)</td><td>返回单个成员变量对象</td></tr></tbody></table><table><thead><tr><th>Field类中用于创建对象的方法</th><th>作用</th></tr></thead><tbody><tr><td>void set(Object obj, Object value)</td><td>赋值</td></tr><tr><td>Object get(Object obj)</td><td>获取值</td></tr></tbody></table><h4 id="E-反射获取成员方法"><a href="#E-反射获取成员方法" class="headerlink" title="E. 反射获取成员方法"></a>E. 反射获取成员方法</h4><table><thead><tr><th>Class类中用于获取成员方法的方法</th><th>作用</th></tr></thead><tbody><tr><td>Method[] getMethods()</td><td>返回所有公共成员方法对象的数组,包括继承的</td></tr><tr><td>Method[] getDeclaredMethods()</td><td>返回所有成员方法对象的数组,不包括继承的</td></tr><tr><td>Method getMethod(String name,Class&lt;?&gt; … parameterTypes)</td><td>返回单个公共成员方法对象</td></tr><tr><td>Method getDeclaredMethod(String name,Class&lt;?&gt; … parameterTypes)</td><td>返回单个成员方法对象</td></tr></tbody></table><p><strong>Method类中用于创建对象的方法</strong><br><code>Object invoke(Object obj,Object ...args)</code>:运行方法<br>    参数一:用obj对象调用该方法<br>    参数二:调用方法的传递的参数(如果没有就不写)<br>    返回值:方法的返回值(如果没有就不写)</p><h2 id="7-动态代理"><a href="#7-动态代理" class="headerlink" title="7. 动态代理"></a>7. 动态代理</h2><ul><li>无侵入式给代码增加额外的功能</li><li>代理可以无侵入式给对象增加其他功能<br>  调用者–&gt;代理–&gt;对象</li><li>JAVA通过接口保证代理，接口就是被代理的所有方法</li><li>java.lang.reflect.Proxy类：提供为对象产生代理对象的方法</li></ul><p><code>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code><br>    参数一:用于指定用哪个类加载器,去加载生成的代理类<br>    参数二:指定接口,这些接口用于指定生成的代理长什么,也就是有哪些方法<br>    参数三:用来指定生成的代理对象要干什么事情</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>JAVA</tag>
      
      <tag>javase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学生管理系统含用户登录系统(Java)</title>
    <link href="/2024/12/29/JAVA/java%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/12/29/JAVA/java%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 align="center">使用Java实现学生管理系统</h1><h2 id="一-任务"><a href="#一-任务" class="headerlink" title="一. 任务"></a>一. 任务</h2><h4 id="1-实现学生管理系统"><a href="#1-实现学生管理系统" class="headerlink" title="1. 实现学生管理系统"></a>1. 实现学生管理系统</h4><p>要求有以下功能：</p><ul><li>添加学生信息</li><li>删除学生信息</li><li>查询学生信息</li><li>修改学生信息</li></ul><h4 id="2-引入用户登录系统"><a href="#2-引入用户登录系统" class="headerlink" title="2. 引入用户登录系统"></a>2. 引入用户登录系统</h4><p>只有用户登录成功之后，才能进入到学生管理系统中进行增删改查操作。<br>要求有以下功能：</p><ul><li>注册功能</li><li>登录功能</li><li>忘记密码功能</li></ul><h2 id="二-代码实现"><a href="#二-代码实现" class="headerlink" title="二. 代码实现"></a>二. 代码实现</h2><h4 id="A-创建学生类"><a href="#A-创建学生类" class="headerlink" title="A. 创建学生类"></a>A. 创建学生类</h4><p>属性：id、姓名、年龄、家庭住址<br>创建学生JavaBean类，包括四个私有成员变量属性和两种构造方法以及getter和setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> study;<br><br><span class="hljs-comment">//学生类属性：id、姓名、年龄、家庭住址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String homeAddress;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String id, String name, <span class="hljs-type">int</span> age, String homeAddress)</span> &#123; <span class="hljs-comment">//带全部参构造方法</span><br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.homeAddress = homeAddress;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;   <span class="hljs-comment">//空参构造方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHomeAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> homeAddress;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHomeAddress</span><span class="hljs-params">(String homeAddress)</span> &#123;<br>        <span class="hljs-built_in">this</span>.homeAddress = homeAddress;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;id = &quot;</span> + id + <span class="hljs-string">&quot;, name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;, homeAddress = &quot;</span> + homeAddress + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="B-实现学生管理系统类的方法"><a href="#B-实现学生管理系统类的方法" class="headerlink" title="B. 实现学生管理系统类的方法"></a>B. 实现学生管理系统类的方法</h4><p>包括添加、删除、修改、查询、显示学生信息等功能</p><h5 id="1-菜单界面"><a href="#1-菜单界面" class="headerlink" title="1. 菜单界面"></a>1. 菜单界面</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMenu</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;---------Welcome to student manager system--------&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;1. Add student&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;2. Delete student&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;3. Modify students&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;4. Query students&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;5. Show all students&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;6. Exit&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;Please enter your choice:&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="2-添加学生信息"><a href="#2-添加学生信息" class="headerlink" title="2.添加学生信息"></a>2.添加学生信息</h5><p>键盘录入每一个学生信息并添加，需要满足要求：id唯一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">addStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.println(<span class="hljs-string">&quot;Please enter the student information to be ADDED, the student id is:&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.next();<br>    <span class="hljs-comment">//判断添加学生的学号是否已经存在</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (students.get(i).getId().equals(id)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Student already exists&quot;</span>);<br>            <span class="hljs-keyword">return</span> students;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;Please enter student name:&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>    System.out.println(<span class="hljs-string">&quot;Please enter student age:&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>    System.out.println(<span class="hljs-string">&quot;Please enter student&#x27;s home address:&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">homeAddress</span> <span class="hljs-operator">=</span> sc.next();<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">newStudent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(id, name, age, homeAddress);<br>    students.add(newStudent);  <span class="hljs-comment">//添加</span><br>    <span class="hljs-keyword">return</span> students;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先判断学生的学号是否存在，已经存在直接返回；不存在则添加新的学生信息(学号、姓名、年龄、住址)</p><h5 id="3-删除学生信息"><a href="#3-删除学生信息" class="headerlink" title="3.删除学生信息"></a>3.删除学生信息</h5><p>键盘录入要删除的学生id，需要满足以下要求：</p><ul><li>id存在删除</li><li>id不存在，需要提示不存在，并回到初始菜单</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除学生信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">deleteStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Please enter the student id to be DELETE:&quot;</span>);<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">delId</span> <span class="hljs-operator">=</span> sc.next();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (students.get(i).getId().equals(delId)) &#123;<br>            students.remove(i);  <span class="hljs-comment">//删除</span><br>            <span class="hljs-keyword">return</span> students;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;Student does not exist&quot;</span>);<br>    <span class="hljs-keyword">return</span> students;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-修改学生信息"><a href="#4-修改学生信息" class="headerlink" title="4. 修改学生信息"></a>4. 修改学生信息</h5><p>键盘录入要修改的学生id，需要满足以下要求</p><ul><li>id存在，继续录入其他信息</li><li>id不存在，需要提示不存在</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改学生信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">modifyStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Please enter the student id to be MODIFY:&quot;</span>);<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">modId</span> <span class="hljs-operator">=</span> sc.next();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (students.get(i).getId().equals(modId)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Student exists,please enter student&#x27;s new ID:&quot;</span>);<br>            students.get(i).setId(sc.next());<br>            System.out.println(<span class="hljs-string">&quot;enter student&#x27;s new name:&quot;</span>);<br>            students.get(i).setName(sc.next());<br>            System.out.println(<span class="hljs-string">&quot;enter student&#x27;s new age:&quot;</span>);<br>            students.get(i).setAge(sc.nextInt());<br>            System.out.println(<span class="hljs-string">&quot;enter student&#x27;s new home address:&quot;</span>);<br>            students.get(i).setHomeAddress(sc.next());<br>            <span class="hljs-keyword">return</span> students;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;Student does not exist&quot;</span>);<br>    <span class="hljs-keyword">return</span> students;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-查询学生信息"><a href="#5-查询学生信息" class="headerlink" title="5.查询学生信息"></a>5.查询学生信息</h5><p>查询某个学生信息，并输出显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询某个学生信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryStudents</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Please enter the student id to be QUERY:&quot;</span>);<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">queId</span> <span class="hljs-operator">=</span> sc.next();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (students.get(i).getId().equals(queId)) &#123;<br>            System.out.println(students.get(i));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;Not found the student&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-打印全部学生信息"><a href="#6-打印全部学生信息" class="headerlink" title="6. 打印全部学生信息"></a>6. 打印全部学生信息</h5><p>打印所有的学生信息，需要满足以下要求</p><ul><li>如果没有学生信息，提示：当前无学生信息，请添加后再查询</li><li>如果有学生信息，输出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示所有学生信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllStudents</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>    <span class="hljs-keyword">if</span> (students.size() == <span class="hljs-number">0</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;No students found, please add a student!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;Students Information is as Follows:&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;id     name     age     home address&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>        System.out.println(students.get(i).getId() + <span class="hljs-string">&quot;  &quot;</span> + students.get(i).getName() + <span class="hljs-string">&quot;  &quot;</span> + students.get(i).getAge() + <span class="hljs-string">&quot;   &quot;</span> + students.get(i).getHomeAddress());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-创建用户类"><a href="#C-创建用户类" class="headerlink" title="C. 创建用户类"></a>C. 创建用户类</h4><p>属性：用户名、密码、身份证号码、手机号码，创建对应的JavaBean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> study;<br><br><span class="hljs-comment">//用户类属性：用户名、密码、身份证号码、手机号码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String idCard;<br>    <span class="hljs-keyword">private</span> String phoneNumber;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String userName, String password, String idCard, String phoneNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.idCard = idCard;<br>        <span class="hljs-built_in">this</span>.phoneNumber = phoneNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIdCard</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> idCard;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIdCard</span><span class="hljs-params">(String idCard)</span> &#123;<br>        <span class="hljs-built_in">this</span>.idCard = idCard;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPhoneNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> phoneNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhoneNumber</span><span class="hljs-params">(String phoneNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phoneNumber = phoneNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;userName = &quot;</span> + userName + <span class="hljs-string">&quot;, password = &quot;</span> + password + <span class="hljs-string">&quot;, idCard = &quot;</span> + idCard + <span class="hljs-string">&quot;, phoneNumber = &quot;</span> + phoneNumber + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="D-实现用户登录功能的方法"><a href="#D-实现用户登录功能的方法" class="headerlink" title="D. 实现用户登录功能的方法"></a>D. 实现用户登录功能的方法</h4><p>包括注册、登录、忘记密码等功能</p><h5 id="1-菜单"><a href="#1-菜单" class="headerlink" title="1. 菜单"></a>1. 菜单</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//菜单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMenu</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;---------Welcome to student manager system-------&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;please choose your option: 1 is Login, 2 is Register, 3 is Forget password, 4 is Exit&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-注册功能"><a href="#2-注册功能" class="headerlink" title="2. 注册功能"></a>2. 注册功能</h5><ol><li>用户名需要满足以下要求：<ul><li>用户名唯一</li><li>用户名长度必须在3~15位之间 </li><li>只能是字母加数字的组合，但是不能是纯数字</li></ul></li><li>密码键盘输入两次，两次一致才可以进行注册。</li><li>身份证号码需要验证：<ul><li>​长度为18位</li><li>​不能以0为开头</li><li>​前17位，必须都是数字</li><li>​最后一位可以是数字，也可以是大写X或小写x</li></ul></li><li>手机号验证：<ul><li>长度为11位</li><li>不能以0为开头</li><li>必须都是数字</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注册</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.println(<span class="hljs-string">&quot;please enter username: &quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> sc.next();<br><br>    <span class="hljs-comment">//用户名唯一</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; users.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (users.get(i).getUserName().equals(userName)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;username already exists!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//用户名长度必须在3-15位</span><br>    <span class="hljs-keyword">if</span> (userName.length() &lt; <span class="hljs-number">3</span> || userName.length() &gt; <span class="hljs-number">15</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;username length must be between 3 and 15 characters!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//用户名必须是字母加数字组合</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">countLetters</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">countNumbers</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">countOthers</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; userName.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> userName.charAt(i);<br>        <span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;Z&#x27;</span> || ch &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>            countLetters++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>            countNumbers++;<br>        &#125; <span class="hljs-keyword">else</span><br>            countOthers++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (countOthers != <span class="hljs-number">0</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;username cannot be special characters!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (countLetters == <span class="hljs-number">0</span> || countNumbers == <span class="hljs-number">0</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;username cannot be only letters or numbers!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//密码键盘输入两次，两次一致才可以进行注册。</span><br>    System.out.println(<span class="hljs-string">&quot;please enter password: &quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">psw1</span> <span class="hljs-operator">=</span> sc.next();<br>    System.out.println(<span class="hljs-string">&quot;please enter password again: &quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">psw2</span> <span class="hljs-operator">=</span> sc.next();<br>    <span class="hljs-keyword">if</span> (!psw1.equals(psw2)) &#123;<br>        System.out.println(<span class="hljs-string">&quot;passwords do not match!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;please enter id card Number: &quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">idCardNumber</span> <span class="hljs-operator">=</span> sc.next();<br><br>    <span class="hljs-comment">//长度为18位,不能以0为开头</span><br>    <span class="hljs-keyword">if</span> (idCardNumber.length() != <span class="hljs-number">18</span> || idCardNumber.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;id card number is not valid!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//前17位必须都是数字</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; idCardNumber.length() - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> idCardNumber.charAt(i);<br>        <span class="hljs-keyword">if</span> (ch &gt; <span class="hljs-string">&#x27;9&#x27;</span> || ch &lt; <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;id card number is not valid!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//最后一位可以是数字，也可以是大写X或小写x</span><br>    <span class="hljs-keyword">if</span> (!((idCardNumber.charAt(<span class="hljs-number">17</span>) &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; idCardNumber.charAt(<span class="hljs-number">17</span>) &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) || idCardNumber.charAt(<span class="hljs-number">17</span>) == <span class="hljs-string">&#x27;x&#x27;</span> || idCardNumber.charAt(<span class="hljs-number">17</span>) == <span class="hljs-string">&#x27;X&#x27;</span>)) &#123;<br>        System.out.println(<span class="hljs-string">&quot;id card number is not valid!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//长度为11位 不能以0为开头必须都是数字</span><br>    System.out.println(<span class="hljs-string">&quot;please enter phone number: &quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">phoneNumber</span> <span class="hljs-operator">=</span> sc.next();<br><br>    <span class="hljs-keyword">if</span> (phoneNumber.length() != <span class="hljs-number">11</span> || phoneNumber.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;phone number is not valid!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; phoneNumber.length(); i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> phoneNumber.charAt(i);<br>        <span class="hljs-keyword">if</span> (ch &gt; <span class="hljs-string">&#x27;9&#x27;</span> || ch &lt; <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;phone number is not valid!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">newUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(userName, psw1, idCardNumber, phoneNumber);<br>    users.add(newUser); <span class="hljs-comment">//注册</span><br>    System.out.println(<span class="hljs-string">&quot;user registered successfully!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-登录功能"><a href="#3-登录功能" class="headerlink" title="3. 登录功能"></a>3. 登录功能</h5><ol><li>键盘输入用户名，用户名如果未注册，直接结束方法，并提示：用户名未注册，请先注册</li><li>生成验证码，判断验证码是否正确，如不正确，重新输入</li><li>键盘输入密码，再判断用户名和密码是否正确，有3次机会</li><li>验证码规则:<ul><li>长度为5</li><li>由4位大写或者小写字母和1位数字组成，同一个字母可重复</li><li>数字可以出现在任意位置</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//登录</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>     System.out.println(<span class="hljs-string">&quot;please enter username: &quot;</span>);<br>     <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> sc.next();<br>     <span class="hljs-comment">//用户名是否已注册</span><br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">userExists</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; users.size(); i++) &#123;<br>         <span class="hljs-keyword">if</span> (users.get(i).getUserName().equals(userName)) &#123;<br>             userExists = <span class="hljs-literal">true</span>;<br>             <span class="hljs-keyword">break</span>;<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">if</span> (!userExists) &#123;<br>         System.out.println(<span class="hljs-string">&quot;Username does not register!&quot;</span>);<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 如果用户名没有注册，直接返回</span><br>     &#125;<br><br>     <span class="hljs-comment">//随机生成验证码</span><br>     <span class="hljs-type">Random</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>     <span class="hljs-type">int</span> <span class="hljs-variable">randomInt</span> <span class="hljs-operator">=</span> rd.nextInt(<span class="hljs-number">5</span>);<span class="hljs-comment">//生成0-4随机整数</span><br>     <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>         <span class="hljs-keyword">if</span> (i == randomInt) &#123;<br>             <span class="hljs-type">int</span> <span class="hljs-variable">randomInt1</span> <span class="hljs-operator">=</span> rd.nextInt(<span class="hljs-number">10</span>);<br>             sb.append((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;0&#x27;</span> + randomInt1)); <span class="hljs-comment">//生成0-9随机字符</span><br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>             <span class="hljs-type">int</span> <span class="hljs-variable">randomInt2</span> <span class="hljs-operator">=</span> rd.nextInt(<span class="hljs-number">52</span>);<br>             <span class="hljs-keyword">if</span> (randomInt2 &lt; <span class="hljs-number">26</span>) &#123;<br>                 sb.append((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;a&#x27;</span> + randomInt2));<br>             &#125; <span class="hljs-keyword">else</span> &#123;<br>                 sb.append((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;A&#x27;</span> + randomInt2 - <span class="hljs-number">26</span>));<br>             &#125;<br>         &#125;<br>     &#125;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">verifyCode</span> <span class="hljs-operator">=</span> sb.toString();<br>     System.out.println(<span class="hljs-string">&quot;the verify code is:&quot;</span> + verifyCode);<br><br>     <span class="hljs-comment">//验证验证码</span><br>     <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>         System.out.println(<span class="hljs-string">&quot;please enter verification code: &quot;</span>);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">inputCode</span> <span class="hljs-operator">=</span> sc.next();<br>         <span class="hljs-keyword">if</span> (!(verifyCode.equals(inputCode))) &#123;<br>             System.out.println(<span class="hljs-string">&quot;verification code is valid! Please try again!&quot;</span>);<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>             System.out.println(<span class="hljs-string">&quot;verification code is passed!&quot;</span>);<br>             <span class="hljs-keyword">break</span>;<br>         &#125;<br>     &#125;<br><br>     <span class="hljs-comment">// 三次登录机会</span><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>         <span class="hljs-type">boolean</span> <span class="hljs-variable">passwordCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>         System.out.println(<span class="hljs-string">&quot;please enter password: &quot;</span>);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">psw</span> <span class="hljs-operator">=</span> sc.next();<br>         <span class="hljs-comment">// 遍历用户列表，检查用户名和密码是否匹配</span><br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; users.size(); j++) &#123;<br>             <span class="hljs-keyword">if</span> (users.get(j).getUserName().equals(userName) &amp;&amp; users.get(j).getPassword().equals(psw)) &#123;<br>                 passwordCorrect = <span class="hljs-literal">true</span>;<br>                 <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 密码匹配，跳出循环</span><br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">if</span> (passwordCorrect) &#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 密码正确，登录成功</span><br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>             System.out.println(<span class="hljs-string">&quot;Password is incorrect! Please try again!&quot;</span>);<br>         &#125;<br>     &#125;<br><br>     System.out.println(<span class="hljs-string">&quot;Three opportunities have been used up! Account has been locked!&quot;</span>);<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h5 id="4-忘记密码功能"><a href="#4-忘记密码功能" class="headerlink" title="4. 忘记密码功能"></a>4. 忘记密码功能</h5><ol><li>键盘录入用户名，判断当前用户名是否存在，如不存在，直接结束方法</li><li>键盘录入身份证号码和手机号码</li><li>判断当前用户的身份证号码和手机号码是否一致:<ul><li>如果一致，则提示输入密码，进行修改。</li><li>如果不一致，则提示：账号信息不匹配，修改失败。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//忘记密码</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ForgetPassword</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>       System.out.println(<span class="hljs-string">&quot;please enter username: &quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> sc.next();<br>       <span class="hljs-type">int</span> <span class="hljs-variable">currentUserIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>       <span class="hljs-comment">//用户名是否存在</span><br>       <span class="hljs-comment">// 检查用户名是否存在</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; users.size(); i++) &#123;<br>           <span class="hljs-keyword">if</span> (users.get(i).getUserName().equals(userName)) &#123;<br>               currentUserIndex = i;<br>               <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 找到用户名，跳出循环</span><br>           &#125;<br>       &#125;<br><br>       <span class="hljs-comment">// 如果用户不存在</span><br>       <span class="hljs-keyword">if</span> (currentUserIndex == -<span class="hljs-number">1</span>) &#123;<br>           System.out.println(<span class="hljs-string">&quot;Username does not register!&quot;</span>);<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br><br>       System.out.println(<span class="hljs-string">&quot;please enter id card Number: &quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">idCardNumber</span> <span class="hljs-operator">=</span> sc.next();<br>       System.out.println(<span class="hljs-string">&quot;please enter phone number: &quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">phoneNumber</span> <span class="hljs-operator">=</span> sc.next();<br>       <span class="hljs-comment">//身份证号和手机号是否一致</span><br>       <span class="hljs-keyword">if</span> (!(users.get(currentUserIndex).getIdCard().equals(idCardNumber) &amp;&amp; users.get(currentUserIndex).getPhoneNumber().equals(phoneNumber))) &#123;<br>           System.out.println(<span class="hljs-string">&quot;Account information does not match! Modification failed!&quot;</span>);<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br><br>       System.out.println(<span class="hljs-string">&quot;please enter new password: &quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">newPassword</span> <span class="hljs-operator">=</span> sc.next();<br>       users.get(currentUserIndex).setPassword(newPassword);  <span class="hljs-comment">//修改当前密码</span><br><br>       System.out.println(<span class="hljs-string">&quot;Modify successfully!&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="E-主函数"><a href="#E-主函数" class="headerlink" title="E. 主函数"></a>E. 主函数</h4><ol><li>new一个学生集合</li><li>进入用户登录界面</li><li>登录成功则进入学生管理系统</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLoginIn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">//用户登录功能</span><br>        <span class="hljs-keyword">while</span> (!isLoginIn) &#123;<br>            UserManager.showMenu();<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            System.out.print(<span class="hljs-string">&quot;Enter your choice: &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">userChoice</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-keyword">switch</span> (userChoice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    isLoginIn = UserManager.login();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    UserManager.registerUser();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    UserManager.ForgetPassword();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    System.out.println(<span class="hljs-string">&quot;EXIT&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;Invalid choice&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//进入学生管理系统</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            showMenu();<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//选择相应的功能</span><br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: &#123;<br>                    System.out.println(<span class="hljs-string">&quot;please enter the number of students you want to add&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> sc.nextInt();<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>                        students = addStudent(students);<br>                    &#125;<br>                &#125;<br>                ;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    students = deleteStudent(students);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    students = modifyStudent(students);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    queryStudents(students);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    showAllStudents(students);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                    System.out.println(<span class="hljs-string">&quot;EXIT&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;Invalid choice&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="三-测试"><a href="#三-测试" class="headerlink" title="三. 测试"></a>三. 测试</h2><p><img src="/img/blogs/java/StudentSystem/1.png"></p><p><img src="/img/blogs/java/StudentSystem/2.png"></p><p><img src="/img/blogs/java/StudentSystem/3.png"></p><p><img src="/img/blogs/java/StudentSystem/4.png"></p><h2 id="四-完整代码"><a href="#四-完整代码" class="headerlink" title="四. 完整代码"></a>四. 完整代码</h2><p>创建四个类，分别为<strong>Student.java, User.java, StudentSystem.java, UserManager.java</strong><br>主函数在StudentSystem.java中，直接运行StudentSystem类即可</p><h3 id="1-Student-java-学生类"><a href="#1-Student-java-学生类" class="headerlink" title="1. Student.java(学生类)"></a>1. Student.java(学生类)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> study;<br><br><span class="hljs-comment">//学生类属性：id、姓名、年龄、家庭住址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String homeAddress;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String id, String name, <span class="hljs-type">int</span> age, String homeAddress)</span> &#123; <span class="hljs-comment">//带全部参构造方法</span><br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.homeAddress = homeAddress;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;   <span class="hljs-comment">//空参构造方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHomeAddress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> homeAddress;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHomeAddress</span><span class="hljs-params">(String homeAddress)</span> &#123;<br>        <span class="hljs-built_in">this</span>.homeAddress = homeAddress;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;id = &quot;</span> + id + <span class="hljs-string">&quot;, name = &quot;</span> + name + <span class="hljs-string">&quot;, age = &quot;</span> + age + <span class="hljs-string">&quot;, homeAddress = &quot;</span> + homeAddress + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-User-java-用户类"><a href="#2-User-java-用户类" class="headerlink" title="2. User.java(用户类)"></a>2. User.java(用户类)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> study;<br><br><span class="hljs-comment">//用户类属性：用户名、密码、身份证号码、手机号码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String idCard;<br>    <span class="hljs-keyword">private</span> String phoneNumber;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String userName, String password, String idCard, String phoneNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.idCard = idCard;<br>        <span class="hljs-built_in">this</span>.phoneNumber = phoneNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIdCard</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> idCard;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIdCard</span><span class="hljs-params">(String idCard)</span> &#123;<br>        <span class="hljs-built_in">this</span>.idCard = idCard;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPhoneNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> phoneNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhoneNumber</span><span class="hljs-params">(String phoneNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phoneNumber = phoneNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;userName = &quot;</span> + userName + <span class="hljs-string">&quot;, password = &quot;</span> + password + <span class="hljs-string">&quot;, idCard = &quot;</span> + idCard + <span class="hljs-string">&quot;, phoneNumber = &quot;</span> + phoneNumber + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-UserManager-java-用户登录类"><a href="#3-UserManager-java-用户登录类" class="headerlink" title="3. UserManager.java(用户登录类)"></a>3. UserManager.java(用户登录类)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> study;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserManager</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ArrayList&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//注册</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;please enter username: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-comment">//用户名唯一</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; users.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (users.get(i).getUserName().equals(userName)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;username already exists!&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//用户名长度必须在3-15位</span><br>        <span class="hljs-keyword">if</span> (userName.length() &lt; <span class="hljs-number">3</span> || userName.length() &gt; <span class="hljs-number">15</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;username length must be between 3 and 15 characters!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//用户名必须是字母加数字组合</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">countLetters</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">countNumbers</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">countOthers</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; userName.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> userName.charAt(i);<br>            <span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;Z&#x27;</span> || ch &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>                countLetters++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                countNumbers++;<br>            &#125; <span class="hljs-keyword">else</span><br>                countOthers++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (countOthers != <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;username cannot be special characters!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (countLetters == <span class="hljs-number">0</span> || countNumbers == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;username cannot be only letters or numbers!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br><br>        <span class="hljs-comment">//密码键盘输入两次，两次一致才可以进行注册。</span><br>        System.out.println(<span class="hljs-string">&quot;please enter password: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">psw1</span> <span class="hljs-operator">=</span> sc.next();<br>        System.out.println(<span class="hljs-string">&quot;please enter password again: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">psw2</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-keyword">if</span> (!psw1.equals(psw2)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;passwords do not match!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;please enter id card Number: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">idCardNumber</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-comment">//长度为18位,不能以0为开头</span><br>        <span class="hljs-keyword">if</span> (idCardNumber.length() != <span class="hljs-number">18</span> || idCardNumber.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;id card number is not valid!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//前17位必须都是数字</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; idCardNumber.length() - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> idCardNumber.charAt(i);<br>            <span class="hljs-keyword">if</span> (ch &gt; <span class="hljs-string">&#x27;9&#x27;</span> || ch &lt; <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;id card number is not valid!&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//最后一位可以是数字，也可以是大写X或小写x</span><br>        <span class="hljs-keyword">if</span> (!((idCardNumber.charAt(<span class="hljs-number">17</span>) &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; idCardNumber.charAt(<span class="hljs-number">17</span>) &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) || idCardNumber.charAt(<span class="hljs-number">17</span>) == <span class="hljs-string">&#x27;x&#x27;</span> || idCardNumber.charAt(<span class="hljs-number">17</span>) == <span class="hljs-string">&#x27;X&#x27;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;id card number is not valid!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//长度为11位 不能以0为开头必须都是数字</span><br>        System.out.println(<span class="hljs-string">&quot;please enter phone number: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phoneNumber</span> <span class="hljs-operator">=</span> sc.next();<br><br>        <span class="hljs-keyword">if</span> (phoneNumber.length() != <span class="hljs-number">11</span> || phoneNumber.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;phone number is not valid!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; phoneNumber.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> phoneNumber.charAt(i);<br>            <span class="hljs-keyword">if</span> (ch &gt; <span class="hljs-string">&#x27;9&#x27;</span> || ch &lt; <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;phone number is not valid!&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">newUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(userName, psw1, idCardNumber, phoneNumber);<br>        users.add(newUser); <span class="hljs-comment">//注册</span><br>        System.out.println(<span class="hljs-string">&quot;user registered successfully!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//登录</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;please enter username: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-comment">//用户名是否已注册</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">userExists</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; users.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (users.get(i).getUserName().equals(userName)) &#123;<br>                userExists = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!userExists) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Username does not register!&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 如果用户名没有注册，直接返回</span><br>        &#125;<br><br><br>        <span class="hljs-comment">//随机生成验证码</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomInt</span> <span class="hljs-operator">=</span> rd.nextInt(<span class="hljs-number">5</span>);<span class="hljs-comment">//生成0-4随机整数</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i == randomInt) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">randomInt1</span> <span class="hljs-operator">=</span> rd.nextInt(<span class="hljs-number">10</span>);<br>                sb.append((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;0&#x27;</span> + randomInt1)); <span class="hljs-comment">//生成0-9随机字符</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">randomInt2</span> <span class="hljs-operator">=</span> rd.nextInt(<span class="hljs-number">52</span>);<br>                <span class="hljs-keyword">if</span> (randomInt2 &lt; <span class="hljs-number">26</span>) &#123;<br>                    sb.append((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;a&#x27;</span> + randomInt2));<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    sb.append((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;A&#x27;</span> + randomInt2 - <span class="hljs-number">26</span>));<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">verifyCode</span> <span class="hljs-operator">=</span> sb.toString();<br>        System.out.println(<span class="hljs-string">&quot;the verify code is:&quot;</span> + verifyCode);<br><br>        <span class="hljs-comment">//验证验证码</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;please enter verification code: &quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">inputCode</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-keyword">if</span> (!(verifyCode.equals(inputCode))) &#123;<br>                System.out.println(<span class="hljs-string">&quot;verification code is valid! Please try again!&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;verification code is passed!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 三次登录机会</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">passwordCorrect</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            System.out.println(<span class="hljs-string">&quot;please enter password: &quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">psw</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-comment">// 遍历用户列表，检查用户名和密码是否匹配</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; users.size(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (users.get(j).getUserName().equals(userName) &amp;&amp; users.get(j).getPassword().equals(psw)) &#123;<br>                    passwordCorrect = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 密码匹配，跳出循环</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (passwordCorrect) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 密码正确，登录成功</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Password is incorrect! Please try again!&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;Three opportunities have been used up! Account has been locked!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//忘记密码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ForgetPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;please enter username: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">currentUserIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//用户名是否存在</span><br>        <span class="hljs-comment">// 检查用户名是否存在</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; users.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (users.get(i).getUserName().equals(userName)) &#123;<br>                currentUserIndex = i;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 找到用户名，跳出循环</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果用户不存在</span><br>        <span class="hljs-keyword">if</span> (currentUserIndex == -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Username does not register!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;please enter id card Number: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">idCardNumber</span> <span class="hljs-operator">=</span> sc.next();<br>        System.out.println(<span class="hljs-string">&quot;please enter phone number: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phoneNumber</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-comment">//身份证号和手机号是否一致</span><br>        <span class="hljs-keyword">if</span> (!(users.get(currentUserIndex).getIdCard().equals(idCardNumber) &amp;&amp; users.get(currentUserIndex).getPhoneNumber().equals(phoneNumber))) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Account information does not match! Modification failed!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;please enter new password: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">newPassword</span> <span class="hljs-operator">=</span> sc.next();<br>        users.get(currentUserIndex).setPassword(newPassword);  <span class="hljs-comment">//修改当前密码</span><br><br>        System.out.println(<span class="hljs-string">&quot;Modify successfully!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//菜单</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMenu</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;---------Welcome to student manager system-------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;please choose your option: 1 is Login, 2 is Register, 3 is Forget password, 4 is Exit&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-StudentSystem-java-学生管理系统测试类"><a href="#4-StudentSystem-java-学生管理系统测试类" class="headerlink" title="4. StudentSystem.java(学生管理系统测试类)"></a>4. StudentSystem.java(学生管理系统测试类)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> study;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentSystem</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLoginIn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">//用户登录功能</span><br>        <span class="hljs-keyword">while</span> (!isLoginIn) &#123;<br>            UserManager.showMenu();<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            System.out.print(<span class="hljs-string">&quot;Enter your choice: &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">userChoice</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-keyword">switch</span> (userChoice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    isLoginIn = UserManager.login();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    UserManager.registerUser();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    UserManager.ForgetPassword();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    System.out.println(<span class="hljs-string">&quot;EXIT&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;Invalid choice&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            showMenu();<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//选择相应的功能</span><br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: &#123;<br>                    System.out.println(<span class="hljs-string">&quot;please enter the number of students you want to add&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> sc.nextInt();<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>                        students = addStudent(students);<br>                    &#125;<br>                &#125;<br>                ;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    students = deleteStudent(students);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    students = modifyStudent(students);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    queryStudents(students);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    showAllStudents(students);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                    System.out.println(<span class="hljs-string">&quot;EXIT&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;Invalid choice&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//菜单界面</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMenu</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;---------Welcome to student manager system--------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;1. Add student&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;2. Delete student&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;3. Modify students&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;4. Query students&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;5. Show all students&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;6. Exit&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Please enter your choice:&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//添加功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">addStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;Please enter the student information to be ADDED, the student id is:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-comment">//判断添加学生的学号是否已经存在</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (students.get(i).getId().equals(id)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Student already exists&quot;</span>);<br>                <span class="hljs-keyword">return</span> students;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Please enter student name:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>        System.out.println(<span class="hljs-string">&quot;Please enter student age:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;Please enter student&#x27;s home address:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">homeAddress</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">newStudent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(id, name, age, homeAddress);<br>        students.add(newStudent);  <span class="hljs-comment">//添加</span><br>        <span class="hljs-keyword">return</span> students;<br>    &#125;<br><br>    <span class="hljs-comment">//删除学生信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">deleteStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Please enter the student id to be DELETE:&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">delId</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (students.get(i).getId().equals(delId)) &#123;<br>                students.remove(i);  <span class="hljs-comment">//删除</span><br>                <span class="hljs-keyword">return</span> students;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Student does not exist&quot;</span>);<br>        <span class="hljs-keyword">return</span> students;<br>    &#125;<br><br>    <span class="hljs-comment">//修改学生信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">modifyStudent</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Please enter the student id to be MODIFY:&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">modId</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (students.get(i).getId().equals(modId)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Student exists,please enter student&#x27;s new ID:&quot;</span>);<br>                students.get(i).setId(sc.next());<br>                System.out.println(<span class="hljs-string">&quot;enter student&#x27;s new name:&quot;</span>);<br>                students.get(i).setName(sc.next());<br>                System.out.println(<span class="hljs-string">&quot;enter student&#x27;s new age:&quot;</span>);<br>                students.get(i).setAge(sc.nextInt());<br>                System.out.println(<span class="hljs-string">&quot;enter student&#x27;s new home address:&quot;</span>);<br>                students.get(i).setHomeAddress(sc.next());<br>                <span class="hljs-keyword">return</span> students;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Student does not exist&quot;</span>);<br>        <span class="hljs-keyword">return</span> students;<br>    &#125;<br><br>    <span class="hljs-comment">//查询某个学生信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryStudents</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Please enter the student id to be QUERY:&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queId</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (students.get(i).getId().equals(queId)) &#123;<br>                System.out.println(students.get(i));<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Not found the student&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//显示所有学生信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllStudents</span><span class="hljs-params">(ArrayList&lt;Student&gt; students)</span> &#123;<br>        <span class="hljs-keyword">if</span> (students.size() == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;No students found, please add a student!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Students Information is as Follows:&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;id     name     age     home address&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.size(); i++) &#123;<br>            System.out.println(students.get(i).getId() + <span class="hljs-string">&quot;  &quot;</span> + students.get(i).getName() + <span class="hljs-string">&quot;  &quot;</span> + students.get(i).getAge() + <span class="hljs-string">&quot;   &quot;</span> + students.get(i).getHomeAddress());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>JAVA</tag>
      
      <tag>javase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript学习笔记</title>
    <link href="/2024/12/18/FrontEnd/JS%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/12/18/FrontEnd/JS%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-JS介绍"><a href="#1-JS介绍" class="headerlink" title="1. JS介绍"></a>1. JS介绍</h2><p>JS是一种运行在客户端(浏览器)的编程语言，实现人机交互效果</p><h2 id="2-JS的组成"><a href="#2-JS的组成" class="headerlink" title="2. JS的组成"></a>2. JS的组成</h2><h4 id="A-ECMAScript"><a href="#A-ECMAScript" class="headerlink" title="A. ECMAScript"></a>A. ECMAScript</h4><p>JavaScript语言基础规定了JS基础语法核心知识</p><ul><li>变量，分支语句，循环语句，对象等</li></ul><h4 id="B-Web-APIS"><a href="#B-Web-APIS" class="headerlink" title="B. Web APIS"></a>B. Web APIS</h4><ul><li>DOM(页面文档对象模型): 操作文档，对页面元素进行移动，大小，添加，删除等</li><li>BOM(浏览器对象模型): 操作浏览器，如页面弹窗，检测窗口宽度，存储数据到浏览器等</li></ul><h2 id="3-JS书写位置"><a href="#3-JS书写位置" class="headerlink" title="3. JS书写位置"></a>3. JS书写位置</h2><h4 id="A-内部JS"><a href="#A-内部JS" class="headerlink" title="A. 内部JS"></a>A. 内部JS</h4><p>直接写在HTML文件中，用Script标签包住；通常将JS代码放在HTML页面底部最好</p><h4 id="B-外部JS"><a href="#B-外部JS" class="headerlink" title="B. 外部JS"></a>B. 外部JS</h4><p>JS代码写在以.js结尾的文件中，然后在HTML的body中引入<br>引入方式： <code>&lt;script src=&quot;./1.js&quot;&gt;&lt;/script&gt;</code></p><h4 id="C-内联JS"><a href="#C-内联JS" class="headerlink" title="C. 内联JS"></a>C. 内联JS</h4><p>代码写在标签内部</p><h2 id="4-JS输入输出语法"><a href="#4-JS输入输出语法" class="headerlink" title="4. JS输入输出语法"></a>4. JS输入输出语法</h2><h4 id="A-输出语法"><a href="#A-输出语法" class="headerlink" title="A. 输出语法"></a>A. 输出语法</h4><ol><li>语法1</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;输出的内容&#x27;</span>)<br></code></pre></td></tr></table></figure><p>向body内输出内容</p><ol start="2"><li>语法2</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;输出的内容&#x27;</span>)<br></code></pre></td></tr></table></figure><p>页面弹出警告对话框用于输出</p><ol start="3"><li>语法3</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;输出的内容&#x27;</span>)<br></code></pre></td></tr></table></figure><p>控制台输出的语句，用于程序员调试使用</p><h4 id="B-输入语法"><a href="#B-输入语法" class="headerlink" title="B. 输入语法"></a>B. 输入语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入：&#x27;</span>)<br></code></pre></td></tr></table></figure><p>显示一个对话框用于用户输入内容</p><h2 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量"></a>5. 变量</h2><h4 id="A-变量的使用"><a href="#A-变量的使用" class="headerlink" title="A. 变量的使用"></a>A. 变量的使用</h4><h5 id="1-声明变量"><a href="#1-声明变量" class="headerlink" title="1. 声明变量"></a>1. 声明变量</h5><p>语法：  <code>let 变量名</code><br>声明变量由声明关键字和变量名组成，其中let是关键字<br>例：声明一个年龄变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age<br></code></pre></td></tr></table></figure><h5 id="2-变量赋值"><a href="#2-变量赋值" class="headerlink" title="2. 变量赋值"></a>2. 变量赋值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age<br>age = <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><h5 id="3-更新变量"><a href="#3-更新变量" class="headerlink" title="3. 更新变量"></a>3. 更新变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span><br>age = <span class="hljs-number">19</span><br></code></pre></td></tr></table></figure><h5 id="4-声明多个变量"><a href="#4-声明多个变量" class="headerlink" title="4.声明多个变量"></a>4.声明多个变量</h5><p>多个变量中间用逗号隔开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span>, uname = <span class="hljs-string">&#x27;前端&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="B-变量的本质"><a href="#B-变量的本质" class="headerlink" title="B. 变量的本质"></a>B. 变量的本质</h4><p>程序在内存中开辟的存放数据的小空间</p><h4 id="C-变量命名规则与规范"><a href="#C-变量命名规则与规范" class="headerlink" title="C. 变量命名规则与规范"></a>C. 变量命名规则与规范</h4><h5 id="1-规则"><a href="#1-规则" class="headerlink" title="1. 规则"></a>1. 规则</h5><ul><li>不能用关键字</li><li>只能用下划线、字母、数字和$组成，且数字不能开头</li><li>区分大小写</li></ul><h5 id="2-规范"><a href="#2-规范" class="headerlink" title="2. 规范"></a>2. 规范</h5><ul><li>起名要有意义</li><li>遵守小驼峰命名法，如userName</li></ul><h2 id="6-数组"><a href="#6-数组" class="headerlink" title="6. 数组"></a>6. 数组</h2><h4 id="A-声明语法"><a href="#A-声明语法" class="headerlink" title="A. 声明语法"></a>A. 声明语法</h4><p><code>let 数组名 = [数据1，数据2，...,数据n]</code><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>]<br><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-string">&#x27;小蓝&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="B-取值语法"><a href="#B-取值语法" class="headerlink" title="B. 取值语法"></a>B. 取值语法</h4><p><code>数组名[下标]</code><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">0</span>])<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">2</span>])<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>)<br></code></pre></td></tr></table></figure><p>分别输出5，3，5</p><h2 id="7-常量"><a href="#7-常量" class="headerlink" title="7. 常量"></a>7. 常量</h2><p>使用const声明的是常量，不能改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.14</span><br></code></pre></td></tr></table></figure><h2 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8. 数据类型"></a>8. 数据类型</h2><h4 id="A-分类"><a href="#A-分类" class="headerlink" title="A. 分类"></a>A. 分类</h4><h5 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1. 基本数据类型"></a>1. 基本数据类型</h5><p>包括number数字型，string字符串型，boolean布尔型，undefined未定义型和null空类型</p><h5 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2. 引用数据类型"></a>2. 引用数据类型</h5><p>object对象</p><h4 id="B-数字类型-number"><a href="#B-数字类型-number" class="headerlink" title="B. 数字类型(number)"></a>B. 数字类型(number)</h4><p>包括整数、小数、正数和负数，JS是弱数据类型的语言</p><ul><li>算术运算符： +，-，*，&#x2F;，%(取模)</li></ul><h4 id="C-字符串类型-string"><a href="#C-字符串类型-string" class="headerlink" title="C. 字符串类型(string)"></a>C. 字符串类型(string)</h4><p>通过单引号(‘’),双引号(“”),反引号(&#96;&#96;)包裹的数据都叫字符串类型，推荐使用单引号(‘’)</p><h5 id="1-字符串拼接"><a href="#1-字符串拼接" class="headerlink" title="1. 字符串拼接"></a>1. 字符串拼接</h5><p>使用’+’运算符实现字符串的拼接<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;我是&#x27;</span> + <span class="hljs-string">&#x27;JS&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出”我是JS”<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;我今年&#x27;</span> + age + <span class="hljs-string">&#x27;岁了&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出”我今年20岁了”，当age改变时，输出也会改变</p><h5 id="2-模板字符串"><a href="#2-模板字符串" class="headerlink" title="2. 模板字符串"></a>2. 模板字符串</h5><p>用于拼接字符串和变量<br>外面用&#96;&#96;(反引号)，内容拼接变量时，用${}包住变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;大家好，我叫$&#123;name&#125;,今年$&#123;age&#125;岁&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="D-布尔类型-boolean"><a href="#D-布尔类型-boolean" class="headerlink" title="D. 布尔类型(boolean)"></a>D. 布尔类型(boolean)</h4><p>仅有true和false<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> isColl = <span class="hljs-literal">true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(isCool) <span class="hljs-comment">//输出true</span><br></code></pre></td></tr></table></figure><h4 id="E-未定义类型-undefined"><a href="#E-未定义类型-undefined" class="headerlink" title="E. 未定义类型(undefined)"></a>E. 未定义类型(undefined)</h4><p>只有一个值undefined;只声明变量，不赋值的情况下<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num<br>consoole.<span class="hljs-title function_">log</span>(num)  <span class="hljs-comment">//输出undefined</span><br></code></pre></td></tr></table></figure><h4 id="F-空类型-null"><a href="#F-空类型-null" class="headerlink" title="F. 空类型(null)"></a>F. 空类型(null)</h4><p>代表空的，无<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = <span class="hljs-literal">null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)  <span class="hljs-comment">//输出null</span><br></code></pre></td></tr></table></figure><h4 id="G-检测数据类型"><a href="#G-检测数据类型" class="headerlink" title="G. 检测数据类型"></a>G. 检测数据类型</h4><p>使用typeof关键字检测数据类型<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span><br><span class="hljs-keyword">let</span> uname = <span class="hljs-string">&#x27;JS&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> age)  <span class="hljs-comment">//输出number</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> uname)  <span class="hljs-comment">//输出string</span><br></code></pre></td></tr></table></figure><h2 id="9-类型转换"><a href="#9-类型转换" class="headerlink" title="9. 类型转换"></a>9. 类型转换</h2><h4 id="A-隐式转换"><a href="#A-隐式转换" class="headerlink" title="A. 隐式转换"></a>A. 隐式转换</h4><ul><li>+号两边只要有一个是字符串，都会把另一个转成字符串</li><li>除了+以外的算术运算符，比如-*&#x2F;等都会把数据转成数字类型</li></ul><h4 id="B-显示转换"><a href="#B-显示转换" class="headerlink" title="B. 显示转换"></a>B. 显示转换</h4><p>转换成数字型(使用Number)<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(str)) <span class="hljs-comment">//输出数字123</span><br></code></pre></td></tr></table></figure><h2 id="10-运算符"><a href="#10-运算符" class="headerlink" title="10. 运算符"></a>10. 运算符</h2><h4 id="A-赋值运算符"><a href="#A-赋值运算符" class="headerlink" title="A. 赋值运算符"></a>A. 赋值运算符</h4><p>&#x3D;，+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;</p><h4 id="B-一元运算符"><a href="#B-一元运算符" class="headerlink" title="B. 一元运算符"></a>B. 一元运算符</h4><p>自增： ++<br>自减： –</p><h4 id="C-比较运算符"><a href="#C-比较运算符" class="headerlink" title="C. 比较运算符"></a>C. 比较运算符</h4><p><code>&gt;,&lt;,&gt;=,&lt;=</code><br>&#x3D;&#x3D;: 左右两边值是否相等<br>&#x3D;&#x3D;&#x3D;： 左右两边是否类型和值都相等<br><code>!==: 左右两边是否不全等</code><br>比较结果为boolean类型，true或false，开发中判断是否相等，推荐使用<code>===</code></p><h4 id="D-逻辑运算符"><a href="#D-逻辑运算符" class="headerlink" title="D. 逻辑运算符"></a>D. 逻辑运算符</h4><p>&amp;&amp;(与)，||(或)，！(非)</p><h2 id="11-分支语句"><a href="#11-分支语句" class="headerlink" title="11. 分支语句"></a>11. 分支语句</h2><h4 id="A-if分支语句"><a href="#A-if分支语句" class="headerlink" title="A. if分支语句"></a>A. if分支语句</h4><h5 id="1-单分支"><a href="#1-单分支" class="headerlink" title="1. 单分支"></a>1. 单分支</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(条件)&#123;满足条件时执行的代码&#125;<br></code></pre></td></tr></table></figure><h5 id="2-双分支"><a href="#2-双分支" class="headerlink" title="2. 双分支"></a>2. 双分支</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(条件)&#123;满足条件时执行的代码&#125;<br><span class="hljs-keyword">else</span>&#123;不满足条件时执行的代码&#125;<br></code></pre></td></tr></table></figure><h5 id="3-多分支"><a href="#3-多分支" class="headerlink" title="3. 多分支"></a>3. 多分支</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(条件<span class="hljs-number">1</span>)&#123;代码<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件<span class="hljs-number">2</span>)&#123;代码<span class="hljs-number">2</span>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件<span class="hljs-number">3</span>)&#123;代码<span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">else</span>&#123;代码n&#125;<br></code></pre></td></tr></table></figure><h4 id="B-三元运算符"><a href="#B-三元运算符" class="headerlink" title="B. 三元运算符"></a>B. 三元运算符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">条件？满足条件执行的代码:不满足条件时执行的代码<br></code></pre></td></tr></table></figure><h4 id="C-switch语句"><a href="#C-switch语句" class="headerlink" title="C. switch语句"></a>C. switch语句</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">switch</span>(数据)&#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>    代码<span class="hljs-number">1</span><br>    <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>    代码<span class="hljs-number">2</span><br>    <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">default</span>:<br>    代码n<br>    <span class="hljs-keyword">break</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-循环语句"><a href="#12-循环语句" class="headerlink" title="12. 循环语句"></a>12. 循环语句</h2><h4 id="A-while循环"><a href="#A-while循环" class="headerlink" title="A. while循环"></a>A. while循环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(循环条件)&#123;<br>    要重复执行的代码(循环体)<br>&#125;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> (i&lt;=<span class="hljs-number">3</span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;循环三次&lt;br&gt;&#x27;</span>)<br>    i++<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="B-break和continue"><a href="#B-break和continue" class="headerlink" title="B. break和continue"></a>B. break和continue</h4><ul><li>break: 退出整个循环</li><li>continue: 退出本次循环</li></ul><h4 id="C-for循环"><a href="#C-for循环" class="headerlink" title="C. for循环"></a>C. for循环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(变量起始值;终止条件;变量变化量)&#123;<br>    循环体<br>&#125;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">3</span>; i++)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;循环三次&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-打印数组"><a href="#1-打印数组" class="headerlink" title="1. 打印数组"></a>1. 打印数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>]<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">3</span>; i++)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i])<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-循环嵌套"><a href="#2-循环嵌套" class="headerlink" title="2. 循环嵌套"></a>2. 循环嵌套</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(;;)&#123;<br>    <span class="hljs-keyword">for</span>(;;)&#123;<br>        循环体<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-99乘法表"><a href="#3-99乘法表" class="headerlink" title="3. 99乘法表"></a>3. 99乘法表</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">9</span>; i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>;j &lt;= i;j++)&#123;<br>         <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;span&gt;$&#123;j&#125;X$&#123;i&#125; = $&#123;i*j&#125;&lt;/span&gt;&#x27;</span>)<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-数组"><a href="#13-数组" class="headerlink" title="13. 数组"></a>13. 数组</h2><p>数组是一种可以按顺序保存数据的数据类型</p><h4 id="A-数组的基本使用"><a href="#A-数组的基本使用" class="headerlink" title="A. 数组的基本使用"></a>A. 数组的基本使用</h4><h5 id="1-声明数组"><a href="#1-声明数组" class="headerlink" title="1. 声明数组"></a>1. 声明数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 数组名 = [数据<span class="hljs-number">1</span>,数据<span class="hljs-number">2</span>,...,数据n]<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;pink&#x27;</span>,<span class="hljs-literal">true</span>]<br></code></pre></td></tr></table></figure><h5 id="2-取值数组"><a href="#2-取值数组" class="headerlink" title="2. 取值数组"></a>2. 取值数组</h5><p><code>数组名[下标]</code></p><h4 id="B-操作数组"><a href="#B-操作数组" class="headerlink" title="B. 操作数组"></a>B. 操作数组</h4><h5 id="1-修改"><a href="#1-修改" class="headerlink" title="1. 修改"></a>1. 修改</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">lengh</span>; i++)&#123;<br>    arr[i] = arr[i] + <span class="hljs-string">&#x27;老师&#x27;</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br></code></pre></td></tr></table></figure><h5 id="2-新增"><a href="#2-新增" class="headerlink" title="2. 新增"></a>2. 新增</h5><p><code>数组.push()</code>将元素添加到数组末尾，并返回数组新长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">push</span>(元素<span class="hljs-number">1</span>,...,元素n)<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;pink&#x27;</span>,<span class="hljs-string">&#x27;hotpink&#x27;</span>]<br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;red&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)  <span class="hljs-comment">//输出[&#x27;pink&#x27;,&#x27;hotpink&#x27;,&#x27;red&#x27;]</span><br></code></pre></td></tr></table></figure><p><code>数组.unshift(新增内容)</code>将元素添加到数组开头，并返回数组新长度</p><h5 id="3-删除"><a href="#3-删除" class="headerlink" title="3. 删除"></a>3. 删除</h5><ul><li><code>数组.pop()</code>  删除最后一个元素，并返回该元素的值</li><li><code>数组.splice()</code>  删除指定元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">splice</span>(start,deleteCount)<br>arr.<span class="hljs-title function_">splice</span>(起始位置，删除几个元素)<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>]<br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)  <span class="hljs-comment">//输出[&#x27;red&#x27;,&#x27;blue&#x27;]</span><br></code></pre></td></tr></table></figure><ul><li><code>数组.shift()</code>  删除开头第一个元素，并返回该元素的值</li></ul><h2 id="14-函数"><a href="#14-函数" class="headerlink" title="14. 函数"></a>14. 函数</h2><h4 id="A-函数使用"><a href="#A-函数使用" class="headerlink" title="A. 函数使用"></a>A. 函数使用</h4><h5 id="1-函数的声明"><a href="#1-函数的声明" class="headerlink" title="1. 函数的声明"></a>1. 函数的声明</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> 函数名()&#123;<br>    函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;hello,world&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-函数的调用"><a href="#2-函数的调用" class="headerlink" title="2. 函数的调用"></a>2. 函数的调用</h5><p>语法： <code>函数名()</code></p><h4 id="B-函数传参"><a href="#B-函数传参" class="headerlink" title="B. 函数传参"></a>B. 函数传参</h4><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSum</span>(<span class="hljs-params">num1, num2</span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(num1 + num2)<br>&#125;<br><span class="hljs-title function_">getSum</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)   <span class="hljs-comment">//输出30</span><br></code></pre></td></tr></table></figure><p>调用函数时，需要传入几个数据就写几个，用逗号隔开</p><h4 id="C-函数返回值"><a href="#C-函数返回值" class="headerlink" title="C. 函数返回值"></a>C. 函数返回值</h4><p>当调用某个函数，这个函数会返回一个结果出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-keyword">let</span> red = <span class="hljs-title function_">fn</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)  <span class="hljs-comment">//输出20</span><br></code></pre></td></tr></table></figure><p>return后面代码不会再被执行，会立即结束当前函数</p><h4 id="D-作用域"><a href="#D-作用域" class="headerlink" title="D. 作用域"></a>D. 作用域</h4><p>一段程序代码中用到的名字并不总是有效和可用的，而限定这个名字的可用性代码范围就是这个名字的作用域</p><ul><li>全局作用域：作用于所有代码执行的环境</li><li>局部作用域：仅作用于函数内的代码环境</li><li>全局变量</li><li>局部变量</li></ul><h4 id="E-匿名函数"><a href="#E-匿名函数" class="headerlink" title="E. 匿名函数"></a>E. 匿名函数</h4><ul><li>具名函数：<code>function fn(){}</code>  调用：<code>fn()</code></li><li>匿名函数：<code>function(){}</code></li></ul><h5 id="1-函数表达式"><a href="#1-函数表达式" class="headerlink" title="1. 函数表达式"></a>1. 函数表达式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x + y)<br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)  <span class="hljs-comment">//输出3</span><br></code></pre></td></tr></table></figure><h5 id="2-立即执行函数"><a href="#2-立即执行函数" class="headerlink" title="2. 立即执行函数"></a>2. 立即执行函数</h5><p><code>(function(){})();</code><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x + y)<br>&#125;)(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);  <span class="hljs-comment">//输出3</span><br></code></pre></td></tr></table></figure><p>无需调用，立即执行。多个立即执行函数之间用分号隔开</p><h2 id="15-对象"><a href="#15-对象" class="headerlink" title="15. 对象"></a>15. 对象</h2><h4 id="A-对象的定义"><a href="#A-对象的定义" class="headerlink" title="A. 对象的定义"></a>A. 对象的定义</h4><p>是一种数据类型，是一只无序的数据集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;pink老师&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;女&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="B-对象使用"><a href="#B-对象使用" class="headerlink" title="B. 对象使用"></a>B. 对象使用</h4><p>对象声明：  <code>let 对象名={}</code></p><ul><li>属性：信息或特征</li><li>方法：功能或行为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 对象名=&#123;<br>    属性名: 属性值,<br>    方法名: 函数<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-对象的增删改查"><a href="#C-对象的增删改查" class="headerlink" title="C. 对象的增删改查"></a>C. 对象的增删改查</h4><h5 id="1-属性–查"><a href="#1-属性–查" class="headerlink" title="1. 属性–查"></a>1. 属性–查</h5><p>语法：<code>对象名.属性</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;小红&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">uname</span>)  <span class="hljs-comment">//输出&#x27;小红&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>)  <span class="hljs-comment">//输出18</span><br></code></pre></td></tr></table></figure><h5 id="2-属性-改"><a href="#2-属性-改" class="headerlink" title="2. 属性-改"></a>2. 属性-改</h5><p>语法： <code>对象名.属性 = 新值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;小红&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br>person.<span class="hljs-property">age</span> = <span class="hljs-number">20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>)  <span class="hljs-comment">//修改为了20</span><br></code></pre></td></tr></table></figure><h5 id="3-属性-增"><a href="#3-属性-增" class="headerlink" title="3. 属性-增"></a>3. 属性-增</h5><p>语法： <code>对象名.新属性 = 新值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;小红&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br>person.<span class="hljs-property">gender</span> = <span class="hljs-string">&#x27;女&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person)  <span class="hljs-comment">//输出&#x27;小红&#x27;,18,&#x27;女&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="4-属性-删"><a href="#4-属性-删" class="headerlink" title="4. 属性-删"></a>4. 属性-删</h5><p>语法： <code>delete 对象名.属性</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">delete</span> person.<span class="hljs-property">gender</span><br></code></pre></td></tr></table></figure><h5 id="5-属性-查的另一种写法"><a href="#5-属性-查的另一种写法" class="headerlink" title="5. 属性-查的另一种写法"></a>5. 属性-查的另一种写法</h5><p>对于多词属性或则一等属性，采用<code>对象[&#39;属性&#39;]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[<span class="hljs-string">&#x27;num&#x27;</span>])<br></code></pre></td></tr></table></figure><h4 id="D-对象的方法-函数"><a href="#D-对象的方法-函数" class="headerlink" title="D. 对象的方法(函数)"></a>D. 对象的方法(函数)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小红&#x27;</span>,<br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;hello,world&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法：    <code>方法名:函数</code></p><h4 id="E-遍历对象"><a href="#E-遍历对象" class="headerlink" title="E. 遍历对象"></a>E. 遍历对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;小红&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> obj)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(k)    <span class="hljs-comment">//输出&#x27;uname&#x27;,&#x27;age&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[k])  <span class="hljs-comment">//输出&#x27;小红&#x27;,18</span><br>&#125;<br></code></pre></td></tr></table></figure><p>k是获得对象的属性名，对象名[k]获得属性值</p><h4 id="F-内置对象"><a href="#F-内置对象" class="headerlink" title="F. 内置对象"></a>F. 内置对象</h4><p>常用的内置对象有：</p><ul><li>document.write()</li><li>console.log()</li></ul><h4 id="G-内置对象Math"><a href="#G-内置对象Math" class="headerlink" title="G. 内置对象Math"></a>G. 内置对象Math</h4><p>Math对象常用方法</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Math.random()</td><td>生成0~1之间的随机数</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.max()</td><td>找最大数</td></tr><tr><td>Math.min()</td><td>找最小数</td></tr><tr><td>Math.pow()</td><td>幂运算</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr></tbody></table><h2 id="16-声明变量用let还是const"><a href="#16-声明变量用let还是const" class="headerlink" title="16. 声明变量用let还是const"></a>16. 声明变量用let还是const</h2><p>优先使用const<br>除非变量后面是要被修改的，再改为let</p><h2 id="17-API的作用和分类"><a href="#17-API的作用和分类" class="headerlink" title="17. API的作用和分类"></a>17. API的作用和分类</h2><p>作用：使用JS去操作HTML和浏览器<br>分类：DOM(文档对象模型)，BOM(浏览器对象模型)</p><h2 id="18-DOM"><a href="#18-DOM" class="headerlink" title="18. DOM"></a>18. DOM</h2><h4 id="A-定义"><a href="#A-定义" class="headerlink" title="A. 定义"></a>A. 定义</h4><p>DOM(Document Object Model-文档对象模型)用来呈现与任意HTML或XML文档交互的API<br>DOM是浏览器提供的一套专门用于操作网页内容的功能</p><h4 id="B-DOM树"><a href="#B-DOM树" class="headerlink" title="B. DOM树"></a>B. DOM树</h4><p>将HTML文档以树状结构直观的表现出来，直观的体现了标签与标签之间的关系</p><h4 id="C-DOM对象"><a href="#C-DOM对象" class="headerlink" title="C. DOM对象"></a>C. DOM对象</h4><p>浏览器根据HTML标签生成的JS对象</p><ul><li>所有的标签属性都能在这个对象上找到</li><li>修改这个对象属性会自动映射到标签上</li></ul><h2 id="19-获取DOM元素"><a href="#19-获取DOM元素" class="headerlink" title="19. 获取DOM元素"></a>19. 获取DOM元素</h2><p>查找DOM元素就是利用JS选择页面中标签元素<br>根据CSS选择器来获取DOM元素</p><h4 id="A-选择匹配的第一个元素"><a href="#A-选择匹配的第一个元素" class="headerlink" title="A. 选择匹配的第一个元素"></a>A. 选择匹配的第一个元素</h4><p>语法： <code>document.querySelector(&#39;CSS选择器&#39;)</code><br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>abc<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>测试1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>测试2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>测试3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)  <span class="hljs-comment">//获取&#x27;123&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>)  <span class="hljs-comment">//获取&#x27;123&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> nav = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#nav&#x27;</span>)  <span class="hljs-comment">//获取&#x27;导航栏&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul li:first-child&#x27;</span>)  <span class="hljs-comment">//获取测试1</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="B-选择匹配的多个元素"><a href="#B-选择匹配的多个元素" class="headerlink" title="B. 选择匹配的多个元素"></a>B. 选择匹配的多个元素</h4><p>语法：<code>document.querySelectorAll(&#39;CSS选择器&#39;)</code><br>返回值：CSS选择器匹配的NodeList对象集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;ul li&#x27;</span>)<span class="hljs-string">`</span><br></code></pre></td></tr></table></figure><p>得到的是个伪数组，想要得到里面每个对象需要遍历(for)获得</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>测试1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>测试2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>测试3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.nav li&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; lis.<span class="hljs-property">length</span>; i++)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis[i])</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="20-操作元素内容"><a href="#20-操作元素内容" class="headerlink" title="20. 操作元素内容"></a>20. 操作元素内容</h2><h4 id="A-对象-innerText"><a href="#A-对象-innerText" class="headerlink" title="A. 对象.innerText"></a>A. 对象.innerText</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;我是一段文字&lt;/div&gt;<br><span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>)  <span class="hljs-comment">//获取元素</span><br>box.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;我是一个盒子&#x27;</span>  <span class="hljs-comment">//修改页面文字内容</span><br></code></pre></td></tr></table></figure><p>只显示纯文本的修改，不解析标签</p><h4 id="B-对象-innerHTML"><a href="#B-对象-innerHTML" class="headerlink" title="B. 对象.innerHTML"></a>B. 对象.innerHTML</h4><p>会解析标签，一同修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">box.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;strong&gt;我是一个盒子&lt;/strong&gt;&#x27;</span> <span class="hljs-comment">//此时页面显示的标签会加粗</span><br></code></pre></td></tr></table></figure><h2 id="21-操作元素属性"><a href="#21-操作元素属性" class="headerlink" title="21. 操作元素属性"></a>21. 操作元素属性</h2><h4 id="A-操作元素常用属性"><a href="#A-操作元素常用属性" class="headerlink" title="A. 操作元素常用属性"></a>A. 操作元素常用属性</h4><p>通过JS设置&#x2F;修改标签元素属性，通过src更换图片<br>语法：  <code>对象.属性 = 值</code><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pic = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br>pic.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;./images/2.jpg&#x27;</span><br>pic.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;图片的修改标题&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="B-操作元素样式属性"><a href="#B-操作元素样式属性" class="headerlink" title="B. 操作元素样式属性"></a>B. 操作元素样式属性</h4><p>通过JS设置&#x2F;修改标签元素的样式属性</p><h5 id="1-通过style属性操作CSS"><a href="#1-通过style属性操作CSS" class="headerlink" title="1. 通过style属性操作CSS"></a>1. 通过style属性操作CSS</h5><p>语法：   <code>对象.style.样式属性 = 值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-property">box</span>&#123;<br>    <span class="hljs-attr">width</span>: 200px;<br>    <span class="hljs-attr">height</span>: 200px;<br>    background-<span class="hljs-attr">color</span>: pink;<br>&#125;<br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">box.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;300px&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">box.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;hotpink&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">box.<span class="hljs-property">style</span>.<span class="hljs-property">border</span> = <span class="hljs-string">&#x27;2px solid blue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="2-通过类名修改样式"><a href="#2-通过类名修改样式" class="headerlink" title="2. 通过类名修改样式"></a>2. 通过类名修改样式</h5><p>语法： <code>元素.className = &#39;active&#39;  //active是一个CSS类名</code><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">div&#123;<br>    <span class="hljs-attr">width</span>: 200px;<br>    <span class="hljs-attr">height</span>: 200px;<br>&#125;<br>.<span class="hljs-property">box</span>&#123;<br>    <span class="hljs-attr">width</span>: 300px;<br>    <span class="hljs-attr">height</span>: 300px;<br>&#125;<br><span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>div.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;box&#x27;</span>  <span class="hljs-comment">//此时div的样式被box类替换</span><br></code></pre></td></tr></table></figure><h5 id="3-通过classList操作类控制CSS"><a href="#3-通过classList操作类控制CSS" class="headerlink" title="3. 通过classList操作类控制CSS"></a>3. 通过classList操作类控制CSS</h5><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">元素.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;类名&#x27;</span>)  <span class="hljs-comment">//追加一个类</span><br>元素.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;类名&#x27;</span>)  <span class="hljs-comment">//删除一个类</span><br>元素.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;类名&#x27;</span>)  <span class="hljs-comment">//切换一个类</span><br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-property">box</span>&#123;<br>    <span class="hljs-attr">width</span>: 200px;<br>    <span class="hljs-attr">height</span>: 200px;<br>    <span class="hljs-attr">color</span>: blue;<br>&#125;<br>.<span class="hljs-property">active</span>&#123;<br>    <span class="hljs-attr">color</span>: red;<br>    background-<span class="hljs-attr">color</span>: pink;<br>&#125;<br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;文字&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">box.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>)  <span class="hljs-comment">//追加类</span></span></span><br><span class="language-javascript"><span class="language-xml">box.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;box&#x27;</span>)  <span class="hljs-comment">//删除类</span></span></span><br><span class="language-javascript"><span class="language-xml">box.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;active&#x27;</span>)  <span class="hljs-comment">//切换类</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="C-操作表单元素属性"><a href="#C-操作表单元素属性" class="headerlink" title="C. 操作表单元素属性"></a>C. 操作表单元素属性</h4><p>表单也需要修改属性，比如点击眼睛才可以看到密码，本质是把表单类型转换为文本框</p><ul><li>获取：<code>DOM对象.属性名</code></li><li>设置：<code>DOM对象.属性名=新值</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">表单.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;用户名&#x27;</span><br>表单.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;password&#x27;</span><br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;电脑&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> uname = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(unmae.<span class="hljs-property">value</span>)  <span class="hljs-comment">//获取值，输出&quot;电脑&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">uname.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;我要买电脑&#x27;</span>  <span class="hljs-comment">//设置新值</span></span></span><br><span class="language-javascript"><span class="language-xml">uname.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;password&#x27;</span>  <span class="hljs-comment">//设置新属性</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="D-自定义属性"><a href="#D-自定义属性" class="headerlink" title="D. 自定义属性"></a>D. 自定义属性</h4><ul><li>可以由我们自己定义的属性</li><li>在标签上一律由”data-“开头</li><li>在DOM对象上一律以”dataset”对象方式获取</li></ul><h2 id="22-定时器-间歇函数"><a href="#22-定时器-间歇函数" class="headerlink" title="22. 定时器-间歇函数"></a>22. 定时器-间歇函数</h2><p>网页中的倒计时</p><h4 id="A-开启定时器"><a href="#A-开启定时器" class="headerlink" title="A. 开启定时器"></a>A. 开启定时器</h4><p>语法：  <code>setInterval(函数，间隔时间)</code><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;一秒执行一次&#x27;</span>)<br>&#125;<br><span class="hljs-built_in">setInterval</span>(fn,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><h4 id="B-关闭定时器"><a href="#B-关闭定时器" class="headerlink" title="B. 关闭定时器"></a>B. 关闭定时器</h4><p>语法：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量名 = <span class="hljs-built_in">setInterval</span>(函数，间隔时间)<br><span class="hljs-built_in">clearInterval</span>(变量名)<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;一秒执行一次&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">let</span> n = <span class="hljs-built_in">setInterval</span>(fn,<span class="hljs-number">1000</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n)<br><span class="hljs-built_in">clearInterval</span>(n)  <span class="hljs-comment">//关闭</span><br></code></pre></td></tr></table></figure><h2 id="23-事件监听"><a href="#23-事件监听" class="headerlink" title="23. 事件监听"></a>23. 事件监听</h2><p>用户在网页上单击一个按钮即为事件，让程序检测是否有事件产生，若有则做出响应，即为事件监听<br>语法： <code>元素对象.addEventListener(&#39;事件类型&#39;,要执行的函数)</code><br>例：点击按钮后，会弹出一个对话框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button&gt;点击&lt;/button&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="24-事件类型"><a href="#24-事件类型" class="headerlink" title="24. 事件类型"></a>24. 事件类型</h2><h4 id="A-鼠标事件"><a href="#A-鼠标事件" class="headerlink" title="A. 鼠标事件"></a>A. 鼠标事件</h4><table><thead><tr><th>事件</th><th>含义</th></tr></thead><tbody><tr><td>click</td><td>鼠标点击</td></tr><tr><td>mouseenter</td><td>鼠标经过</td></tr><tr><td>mouseleave</td><td>鼠标离开</td></tr></tbody></table><h4 id="B-焦点事件"><a href="#B-焦点事件" class="headerlink" title="B. 焦点事件"></a>B. 焦点事件</h4><p>表单获得光标</p><table><thead><tr><th>事件</th><th>含义</th></tr></thead><tbody><tr><td>focus</td><td>获得焦点</td></tr><tr><td>blur</td><td>失去焦点</td></tr></tbody></table><h4 id="C-键盘事件"><a href="#C-键盘事件" class="headerlink" title="C. 键盘事件"></a>C. 键盘事件</h4><table><thead><tr><th>事件</th><th>含义</th></tr></thead><tbody><tr><td>Keydown</td><td>键盘按下触发</td></tr><tr><td>Keyup</td><td>键盘抬起触发</td></tr></tbody></table><h4 id="D-文本事件"><a href="#D-文本事件" class="headerlink" title="D. 文本事件"></a>D. 文本事件</h4><p>input: 用户输入事件</p><h2 id="25-事件对象"><a href="#25-事件对象" class="headerlink" title="25. 事件对象"></a>25. 事件对象</h2><p>事件对象也是对象，存储了事件触发时的相关信息</p><h4 id="A-获取方式"><a href="#A-获取方式" class="headerlink" title="A. 获取方式"></a>A. 获取方式</h4><p>事件绑定的回调函数的第一个参数就是事件对象<br>一般命名为event,ev,e<br>语法： <code>元素.addEventListener(&#39;click&#39;,function(e){})</code><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button&gt;点击&lt;/button&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="B-事件对象属性"><a href="#B-事件对象属性" class="headerlink" title="B. 事件对象属性"></a>B. 事件对象属性</h4><table><thead><tr><th>常用属性</th><th>含义</th></tr></thead><tbody><tr><td>type</td><td>获取当前事件类型</td></tr><tr><td>clientX&#x2F;clientY</td><td>获取光标相对于浏览器可见窗口左上角的位置</td></tr><tr><td>offsetX&#x2F;offsetY</td><td>获取光标相对于当前DOM元素左上角的位置</td></tr><tr><td>key</td><td>用户按下键盘键的值</td></tr></tbody></table><h2 id="26-环境对象"><a href="#26-环境对象" class="headerlink" title="26. 环境对象"></a>26. 环境对象</h2><p>指的是函数内部特殊的变量this,代表当前函数运行时所处的环境</p><ul><li>普通函数里的this指的是window</li><li>谁调用，this就是谁</li></ul><h2 id="27-回调函数"><a href="#27-回调函数" class="headerlink" title="27. 回调函数"></a>27. 回调函数</h2><p>如果将函数A作为参数传递给函数B，称函数A为回调函数</p><h2 id="28-事件流"><a href="#28-事件流" class="headerlink" title="28. 事件流"></a>28. 事件流</h2><p>事件流指事件完整执行过程中的流动路径</p><ul><li>捕获阶段：从大到小，父到子</li><li>冒泡阶段：从小到大，子到父</li></ul><h2 id="29-事件捕获"><a href="#29-事件捕获" class="headerlink" title="29. 事件捕获"></a>29. 事件捕获</h2><p>从DOM的根元素开始执行对应事件(从外到里)<br>事件捕获需写对应代码才能看到效果<br>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">DOM</span>.<span class="hljs-title function_">addEventListener</span>(事件类型,事件处理函数,是否使用捕获机制)<br></code></pre></td></tr></table></figure><h2 id="30-事件冒泡"><a href="#30-事件冒泡" class="headerlink" title="30. 事件冒泡"></a>30. 事件冒泡</h2><ul><li>当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发</li><li>当一个元素触发事件后，会依次向上调用所有父级元素的同名事件<br>例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.father&#x27;</span>)<br><span class="hljs-keyword">const</span> son = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.son&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是1&#x27;</span>)<br>&#125;)<br>fa.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-title function_">funtion</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是2&#x27;</span>)<br>&#125;)<br>son.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-title function_">funtion</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是3&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="31-阻止冒泡"><a href="#31-阻止冒泡" class="headerlink" title="31. 阻止冒泡"></a>31. 阻止冒泡</h2><p>语法： <code>事件对象.stopPropagation()</code></p><h2 id="32-解绑事件"><a href="#32-解绑事件" class="headerlink" title="32. 解绑事件"></a>32. 解绑事件</h2><h4 id="A-on事件方式"><a href="#A-on事件方式" class="headerlink" title="A. on事件方式"></a>A. on事件方式</h4><p>直接使用null覆盖就可以实现事件的解绑</p><h4 id="B-removeEventListener"><a href="#B-removeEventListener" class="headerlink" title="B. removeEventListener()"></a>B. removeEventListener()</h4><p>若使用addEventListener方式，必须使用removeEventListener(事件类型,事件处理函数,[获取捕获或者冒泡阶段])<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button&gt;点击&lt;/button&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;点击了&#x27;</span>)<br>&#125;<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn)<br>btn.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn)<br></code></pre></td></tr></table></figure><h2 id="33-阻止默认行为"><a href="#33-阻止默认行为" class="headerlink" title="33. 阻止默认行为"></a>33. 阻止默认行为</h2><p>语法：  <code>e.preventDefault()</code><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;form action = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;免费注册&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;form&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">form.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;submit&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    e.<span class="hljs-title function_">preventDefault</span>()</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="34-页面加载事件"><a href="#34-页面加载事件" class="headerlink" title="34. 页面加载事件"></a>34. 页面加载事件</h2><p>加载外部资源，加载完毕时触发的事件</p><h4 id="A-load事件-慢"><a href="#A-load事件-慢" class="headerlink" title="A. load事件(慢)"></a>A. load事件(慢)</h4><p>监听页面所有资源加载完毕：给window添加load事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//执行的操作</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="B-DOMContentLoaded事件-快"><a href="#B-DOMContentLoaded事件-快" class="headerlink" title="B. DOMContentLoaded事件(快)"></a>B. DOMContentLoaded事件(快)</h4><p>当初始的HTML文档被完全加载和解析完成之后，事件被触发，无需等待样式表、图像等完全加载<br>监听页面DOM加载完毕:给document添加DOMContentLoaded事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//执行的操作</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="35-页面滚动事件"><a href="#35-页面滚动事件" class="headerlink" title="35. 页面滚动事件"></a>35. 页面滚动事件</h2><p>滚动条在滚动时持续触发的事件<br>事件名：<code>scroll</code><br>监听整个页面滚动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//执行的操作</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="36-页面尺寸事件"><a href="#36-页面尺寸事件" class="headerlink" title="36. 页面尺寸事件"></a>36. 页面尺寸事件</h2><p>语法： resize事件<br>在窗口尺寸改变时触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//执行的操作</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>检测屏幕宽度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> w = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(w)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="37-日期对象"><a href="#37-日期对象" class="headerlink" title="37. 日期对象"></a>37. 日期对象</h2><p>让网页显示日期，可以得到当前系统时间</p><h4 id="A-实例化"><a href="#A-实例化" class="headerlink" title="A. 实例化"></a>A. 实例化</h4><p>在代码中发现new关键字时，这种操作称为实例化<br>创建一个时间对象并获取时间：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()   <span class="hljs-comment">//获取当前时间</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2000-1-1&#x27;</span>)  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date)       <span class="hljs-comment">//获取指定时间</span><br></code></pre></td></tr></table></figure><h4 id="B-日期对象方法"><a href="#B-日期对象方法" class="headerlink" title="B. 日期对象方法"></a>B. 日期对象方法</h4><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取年份</td><td>获取四位年份</td></tr><tr><td>getMonth()</td><td>获取月份</td><td>取值为0~11</td></tr><tr><td>getDate()</td><td>获取月份每一天</td><td>不同月份取值也不相同</td></tr><tr><td>getDay()</td><td>获取星期几</td><td>取值为0~6</td></tr><tr><td>getHours()</td><td>获取小时</td><td>取值为0~23</td></tr><tr><td>getMinutes()</td><td>获取分钟</td><td>取值为0~59</td></tr><tr><td>getSeconds()</td><td>获取秒</td><td>取值为0~59</td></tr></tbody></table><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">getFullYear</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="C-时间戳"><a href="#C-时间戳" class="headerlink" title="C. 时间戳"></a>C. 时间戳</h4><p>是指1970年1月1日0时0分0秒到现在的<strong>毫秒数</strong>。常用于实现倒计时效果<br>算法：</p><ul><li>将来的时间戳 - 现在的时间戳 &#x3D; 剩余时间毫秒数</li><li>剩余时间毫秒数转换为年月日时分秒 &#x3D; 倒计时时间</li></ul><h5 id="1-getTime-方法"><a href="#1-getTime-方法" class="headerlink" title="1. getTime()方法"></a>1. getTime()方法</h5><p>需要实例化</p><h5 id="2-new-Date-推荐使用"><a href="#2-new-Date-推荐使用" class="headerlink" title="2. +new Date()(推荐使用)"></a>2. +new Date()(推荐使用)</h5><p>无需实例化</p><h5 id="3-Date-now"><a href="#3-Date-now" class="headerlink" title="3. Date.now()"></a>3. Date.now()</h5><p>无需实例化<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">getTime</span>())  <span class="hljs-comment">//getTime()</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())  <span class="hljs-comment">//+new Date</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>())   <span class="hljs-comment">//Date.now()</span><br></code></pre></td></tr></table></figure><h2 id="38-节点操作"><a href="#38-节点操作" class="headerlink" title="38. 节点操作"></a>38. 节点操作</h2><h4 id="A-DOM节点"><a href="#A-DOM节点" class="headerlink" title="A. DOM节点"></a>A. DOM节点</h4><p>DOM树中每个内容都是节点</p><ul><li>元素节点：所有的标签，比如body、div</li><li>属性节点：所有的属性，比如href</li><li>文本节点：所有的文本</li></ul><h4 id="B-查找节点"><a href="#B-查找节点" class="headerlink" title="B. 查找节点"></a>B. 查找节点</h4><p>根据节点关系查找相应的节点</p><h5 id="1-父节点查找"><a href="#1-父节点查找" class="headerlink" title="1. 父节点查找"></a>1. 父节点查找</h5><p>parentNode属性,返回最近一级的父节点，找不到返回NULL<br><code>子元素.parentNode</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;<br>我是广告<br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;X&lt;/div&gt;<br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> box1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box1&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">box1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">I</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="2-子节点查找"><a href="#2-子节点查找" class="headerlink" title="2. 子节点查找"></a>2. 子节点查找</h5><ul><li>childNodes</li><li><strong>children属性(重点)</strong><br>获得所有元素的节点，返回一个伪数组<br><code>父元素.children</code><br>例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>) </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ul.<span class="hljs-property">children</span>)   <span class="hljs-comment">//得到伪数组,全儿子选择</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h5 id="3-兄弟关系查找"><a href="#3-兄弟关系查找" class="headerlink" title="3. 兄弟关系查找"></a>3. 兄弟关系查找</h5><ul><li>下一个兄弟节点  <code>nextElementSibling</code>属性</li><li>上一个兄弟节点  <code>previousElementSibling</code>属性</li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> li2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul li:nth-child(2)&#x27;</span>) </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(li2.<span class="hljs-property">previousElementSibling</span>)   <span class="hljs-comment">//上一个兄弟</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(li2.<span class="hljs-property">nextElementSibling</span>)   <span class="hljs-comment">//下一个兄弟</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="C-增加节点"><a href="#C-增加节点" class="headerlink" title="C. 增加节点"></a>C. 增加节点</h4><h5 id="1-创建节点"><a href="#1-创建节点" class="headerlink" title="1. 创建节点"></a>1. 创建节点</h5><p><code>document.createElement(&#39;标签名&#39;)</code></p><h5 id="2-追加节点"><a href="#2-追加节点" class="headerlink" title="2. 追加节点"></a>2. 追加节点</h5><ul><li>插入到父元素的最后一个子元素<br><code>父元素.appendChild(要插入的元素)</code></li><li>插入到父元素中某个子元素的前面<br><code>父元素.insertBefore(要插入的元素,在哪个元素前面)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;ul&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)  <span class="hljs-comment">//作为最后一个子元素</span></span></span><br><span class="language-javascript"><span class="language-xml">ul.<span class="hljs-title function_">insertBefore</span>(li, ul.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>])  <span class="hljs-comment">//放在最前面一个元素</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="D-克隆节点"><a href="#D-克隆节点" class="headerlink" title="D. 克隆节点"></a>D. 克隆节点</h4><p><code>元素.cloneNode(布尔值)</code>  克隆一个已有元素节点<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;ul&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> li1 = ul.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>)  <span class="hljs-comment">//克隆</span></span></span><br><span class="language-javascript"><span class="language-xml">ul.<span class="hljs-title function_">appendChild</span>(li1)  <span class="hljs-comment">//添加</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="E-删除节点"><a href="#E-删除节点" class="headerlink" title="E. 删除节点"></a>E. 删除节点</h4><p><code>父元素.removeChild(要删除的元素)</code><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;ul&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>没用了<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">ul.<span class="hljs-title function_">removeChild</span>(ul.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>])</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="39-M端事件"><a href="#39-M端事件" class="headerlink" title="39. M端事件"></a>39. M端事件</h2><p>触屏事件touch</p><table><thead><tr><th>触屏touch事件</th><th>说明</th></tr></thead><tbody><tr><td>touchstart</td><td>手指触摸到一个DOM元素时触发</td></tr><tr><td>touchmove</td><td>手指在一个DOM元素上滑动时触发</td></tr><tr><td>touchend</td><td>手指从一个DOM元素上移开触发</td></tr></tbody></table><h2 id="40-Window对象"><a href="#40-Window对象" class="headerlink" title="40. Window对象"></a>40. Window对象</h2><h4 id="A-BOM-浏览器对象模型"><a href="#A-BOM-浏览器对象模型" class="headerlink" title="A. BOM(浏览器对象模型)"></a>A. BOM(浏览器对象模型)</h4><p>window对象是全局对象，是JS的顶级对象</p><h4 id="B-定时器-延时函数"><a href="#B-定时器-延时函数" class="headerlink" title="B. 定时器-延时函数"></a>B. 定时器-延时函数</h4><p>语法： <code>setTimeout(回调函数,等待的毫秒数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;时间到了&#x27;</span>)<br>&#125;,<span class="hljs-number">2000</span>) <span class="hljs-comment">//延时两秒输出&#x27;时间到了&#x27;</span><br></code></pre></td></tr></table></figure><p>清除延时函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setTimeout</span>(回调函数,等待的毫秒数)<br><span class="hljs-built_in">clearTimeout</span>(timer)<br></code></pre></td></tr></table></figure><h4 id="C-JS执行机制"><a href="#C-JS执行机制" class="headerlink" title="C. JS执行机制"></a>C. JS执行机制</h4><p>JS是单线程的，同一个时间只能做一件事。</p><ul><li><p>同步任务(立刻执行)<br>在主线程上依次执行，形成一个执行栈</p></li><li><p>异步任务(耗时)<br>通过回调函数实现，异步任务添加到任务队列</p><ol><li>普通事件：如click,resize等</li><li>资源加载：如load,error等</li><li>定时器：如setInterval,setTimeout等</li></ol></li><li><p>执行机制</p><ol><li>先执行执行栈中的同步任务</li><li>异步任务放在任务队列</li><li>当执行栈中所有同步任务执行完毕，系统按次序读取任务队列中的异步任务，被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol></li></ul><h4 id="D-location对象"><a href="#D-location对象" class="headerlink" title="D. location对象"></a>D. location对象</h4><p>location拆分并保存URL地址的各个组成部分</p><ul><li>href利用JS的方法跳转页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>search属性获取地址中携带的参数，符号？后面部分<br><code>console.log(location.search)</code></p></li><li><p>hash属性获取地址的哈希值，符号#后面部分<br><code>console.log(location.hash)</code></p></li><li><p>reload方法用来刷新当前页面，传入参数true时表示强制刷新</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button&gt;点击刷新&lt;/button&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    location.<span class="hljs-title function_">reload</span>(<span class="hljs-literal">true</span>)  <span class="hljs-comment">// 强制刷新</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="E-navigator对象"><a href="#E-navigator对象" class="headerlink" title="E. navigator对象"></a>E. navigator对象</h4><p>记录了浏览器自身的相关信息</p><ul><li>userAgent检测浏览器的版本及平台</li></ul><h4 id="F-history对象"><a href="#F-history对象" class="headerlink" title="F. history对象"></a>F. history对象</h4><p>管理历史记录</p><table><thead><tr><th>history对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>可以后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>前进后退功能 参数为1则前进一个页面 参数为-1则后退一个页面</td></tr></tbody></table><h2 id="41-本地存储"><a href="#41-本地存储" class="headerlink" title="41. 本地存储"></a>41. 本地存储</h2><h4 id="A-介绍"><a href="#A-介绍" class="headerlink" title="A. 介绍"></a>A. 介绍</h4><ul><li>在本地存储数据，存储在用户浏览器</li><li>设置，读取方便，页面刷新也不丢失数据</li><li>容量较大</li></ul><h4 id="B-localStorage"><a href="#B-localStorage" class="headerlink" title="B. localStorage"></a>B. localStorage</h4><p>可以将数据永久存储在本地，除非手动删除，关闭页面也存在</p><h5 id="1-存储数据"><a href="#1-存储数据" class="headerlink" title="1. 存储数据"></a>1. 存储数据</h5><p><code>localStorage.setItem(key,value)</code></p><h5 id="2-读取数据"><a href="#2-读取数据" class="headerlink" title="2. 读取数据"></a>2. 读取数据</h5><p><code>localStorage.getItem(key)</code></p><h5 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3. 删除数据"></a>3. 删除数据</h5><p><code>localStorage.removeItem(key)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;uname&#x27;</span>,<span class="hljs-string">&#x27;pink老师&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;uname&#x27;</span>))<br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;uname&#x27;</span>)  <span class="hljs-comment">//删除名字</span><br></code></pre></td></tr></table></figure><h4 id="C-sessionStorage"><a href="#C-sessionStorage" class="headerlink" title="C. sessionStorage"></a>C. sessionStorage</h4><p>关闭浏览器窗口就会消失，用法和localStorage基本相同</p><h4 id="D-存储复杂数据类型"><a href="#D-存储复杂数据类型" class="headerlink" title="D. 存储复杂数据类型"></a>D. 存储复杂数据类型</h4><p>需要将复杂数据类型转换为JSON字符串，存储到本地</p><ul><li>存储：<code>JSON.stringify(复杂数据类型)</code></li><li>取出：<code>JSON.parse(JSON字符串)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;female&#x27;</span><br>&#125;<br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;obj&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj)) <span class="hljs-comment">//存储为JSON字符串</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;obj&#x27;</span>)))<span class="hljs-comment">//把JSON字符串转换为对象取出</span><br></code></pre></td></tr></table></figure><h2 id="42-map-和join"><a href="#42-map-和join" class="headerlink" title="42. map()和join()"></a>42. map()和join()</h2><p>实现字符串拼接</p><ul><li>map可以遍历数组处理数据，并返回新的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br><span class="hljs-keyword">const</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ele)  <span class="hljs-comment">// 数组元素</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index)  <span class="hljs-comment">// 数组索引号</span><br><span class="hljs-keyword">return</span> ele + <span class="hljs-string">&#x27;颜色&#x27;</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr)  <span class="hljs-comment">//[&#x27;red颜色&#x27;,&#x27;blue颜色&#x27;,&#x27;green颜色&#x27;]</span><br></code></pre></td></tr></table></figure><ul><li>join()把数组中的所有元素转换为一个字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red颜色&#x27;</span>,<span class="hljs-string">&#x27;blue颜色&#x27;</span>,<span class="hljs-string">&#x27;green颜色&#x27;</span>] <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>))  <span class="hljs-comment">//red颜色blue颜色green颜色</span><br></code></pre></td></tr></table></figure><h2 id="43-正则表达式"><a href="#43-正则表达式" class="headerlink" title="43. 正则表达式"></a>43. 正则表达式</h2><h4 id="A-介绍-1"><a href="#A-介绍-1" class="headerlink" title="A. 介绍"></a>A. 介绍</h4><p>用于匹配字符串中字符组合的模式</p><ul><li>表单验证(匹配)</li><li>过滤敏感词(替换)</li><li>字符串中提取我们想要的部分(提取)</li></ul><h4 id="B-语法"><a href="#B-语法" class="headerlink" title="B. 语法"></a>B. 语法</h4><h5 id="1-定义正则表达式语法"><a href="#1-定义正则表达式语法" class="headerlink" title="1. 定义正则表达式语法"></a>1. 定义正则表达式语法</h5><p><code>const 变量名 = /表达式/</code></p><h5 id="2-判断是否有符合规则的字符串"><a href="#2-判断是否有符合规则的字符串" class="headerlink" title="2. 判断是否有符合规则的字符串"></a>2. 判断是否有符合规则的字符串</h5><p><code>test()</code> 用于查看正则表达式与指定字符串是否匹配,返回true or false<br>语法： <code>regObj.test(被检测的字符串)</code><br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;现在太阳下山了，太阳光要看不到了&#x27;</span><br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/太阳/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(str)) <span class="hljs-comment">//返回true</span><br></code></pre></td></tr></table></figure><h4 id="C-元字符"><a href="#C-元字符" class="headerlink" title="C. 元字符"></a>C. 元字符</h4><p>具有特殊意义的字符，例如26个英文字母abcdefg…表示为：[a-z]</p><h5 id="1-边界符-表示位置，开头结尾，必须用什么开头什么结尾"><a href="#1-边界符-表示位置，开头结尾，必须用什么开头什么结尾" class="headerlink" title="1. 边界符(表示位置，开头结尾，必须用什么开头什么结尾)"></a>1. 边界符(表示位置，开头结尾，必须用什么开头什么结尾)</h5><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结尾)</td></tr></tbody></table><h5 id="2-量词-表示重复次数"><a href="#2-量词-表示重复次数" class="headerlink" title="2. 量词(表示重复次数)"></a>2. 量词(表示重复次数)</h5><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h5 id="3-字符类-比如-d表示0-9"><a href="#3-字符类-比如-d表示0-9" class="headerlink" title="3. 字符类(比如\d表示0~9)"></a>3. 字符类(比如\d表示0~9)</h5><ul><li>[]匹配字符集合<br>只要包含[]中任何一个都返回true;如[abc]包含abc任何一个都为true</li><li>[]里面加上-连字符<br>使用连字符-表示一个范围；如[a-z]表示a到z26个字母</li><li>[]里面加上^取反符号<br>比如[^a-z]匹配除了小写字母以外的字符</li><li>.(点)匹配除换行符之外的任何单个字符</li><li>预定义：某些常见模式的简写方式</li></ul><table><thead><tr><th>预定类</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配0-9之间任一数字</td></tr><tr><td>\D</td><td>匹配所有0-9以外的字符</td></tr><tr><td>\w</td><td>匹配任意的字母、数字和下划线</td></tr><tr><td>\W</td><td>匹配除所有字母、数字和下划线以外的字符</td></tr><tr><td>\s</td><td>匹配空格</td></tr><tr><td>\S</td><td>匹配非空格的字符</td></tr></tbody></table><h4 id="D-修饰符"><a href="#D-修饰符" class="headerlink" title="D. 修饰符"></a>D. 修饰符</h4><p>约束正则执行的细节问题，如是否区分大小写，是否支持多行匹配<br>语法： <code>/表达式/修饰符</code></p><ul><li>i是ignore的缩写，正则匹配时字母不区分大小写</li><li>g是global的缩写，匹配所有满足正则表达式的结果</li><li>替换replace:  <code>字符串.replace(/正则表达式/, &#39;替换的文本&#39;)</code></li></ul><h2 id="44-作用域"><a href="#44-作用域" class="headerlink" title="44. 作用域"></a>44. 作用域</h2><h4 id="A-局部作用域"><a href="#A-局部作用域" class="headerlink" title="A. 局部作用域"></a>A. 局部作用域</h4><h5 id="1-函数作用域"><a href="#1-函数作用域" class="headerlink" title="1. 函数作用域"></a>1. 函数作用域</h5><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问</p><h5 id="2-块作用域"><a href="#2-块作用域" class="headerlink" title="2. 块作用域"></a>2. 块作用域</h5><p>在JS中使用{}包裹的代码称为代码块，代码块中声明的变量外部有可能无法被访问</p><ul><li>let和const声明的变量会产生块作用域，var不会产生块作用域</li></ul><h4 id="B-全局作用域"><a href="#B-全局作用域" class="headerlink" title="B. 全局作用域"></a>B. 全局作用域</h4><p>全局作用域声明的变量，任何其他作用域都可以被访问</p><h4 id="C-作用域链"><a href="#C-作用域链" class="headerlink" title="C. 作用域链"></a>C. 作用域链</h4><p>作用域链的本质是底层的变量查找机制</p><ul><li>函数执行时会优先查找当前函数作用域中查找变量</li><li>如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域</li></ul><h4 id="D-垃圾回收机制"><a href="#D-垃圾回收机制" class="headerlink" title="D. 垃圾回收机制"></a>D. 垃圾回收机制</h4><ul><li>内存的生命周期<ol><li>内存分配</li><li>内存使用</li><li>内存回收<br>全局变量一般不会回收，局部变量一般会被自动回收</li></ol></li><li>内存泄漏<br>程序中分配的内存由于某种原因，程序未释放或无法释放叫内存泄漏</li><li>回收算法-标记清除法<br>从根部扫描对象，能查找到的就是使用的，查找不到就要回收</li></ul><h4 id="E-闭包"><a href="#E-闭包" class="headerlink" title="E. 闭包"></a>E. 闭包</h4><p>闭包 &#x3D; 内层函数 + 外层函数的变量<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>    &#125;<br>    <span class="hljs-title function_">f</span>()<br>&#125;<br><span class="hljs-title function_">outer</span>()<br></code></pre></td></tr></table></figure><ul><li>闭包的作用： 外部也可以访问使用函数内部的变量</li></ul><h4 id="F-变量提升"><a href="#F-变量提升" class="headerlink" title="F. 变量提升"></a>F. 变量提升</h4><ul><li>仅存在于var声明变量</li><li>把所有var声明的变量提升到当前作用域的最前面</li><li>只提升声明，不提升赋值</li></ul><h2 id="45-函数进阶"><a href="#45-函数进阶" class="headerlink" title="45. 函数进阶"></a>45. 函数进阶</h2><h4 id="A-函数提升"><a href="#A-函数提升" class="headerlink" title="A. 函数提升"></a>A. 函数提升</h4><ul><li>会把所有函数声明提升到当前作用域最前面</li><li>只提升函数声明，不提升函数调用</li><li>函数先声明再调用</li></ul><h4 id="B-函数参数"><a href="#B-函数参数" class="headerlink" title="B. 函数参数"></a>B. 函数参数</h4><h5 id="1-动态参数"><a href="#1-动态参数" class="headerlink" title="1. 动态参数"></a>1. 动态参数</h5><p><code>arguments</code>是函数内部内置的伪数组变量，包含调用函数时传入的所有实参<br>例：求和函数，参数数量不限</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSum</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>        sum += <span class="hljs-variable language_">arguments</span>[i]<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum)<br>&#125;<br><span class="hljs-title function_">getSum</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-title function_">getSum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h5 id="2-剩余参数-建议"><a href="#2-剩余参数-建议" class="headerlink" title="2. 剩余参数(建议)"></a>2. 剩余参数(建议)</h5><p><code>...</code>获取的剩余实参，是个真数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSum</span>(<span class="hljs-params">a, b, ...arr</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br>&#125;<br><span class="hljs-title function_">getSum</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-title function_">getSum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h4 id="C-箭头函数"><a href="#C-箭头函数" class="headerlink" title="C. 箭头函数"></a>C. 箭头函数</h4><p>更适用于本来需要匿名函数的地方</p><h5 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h5><ul><li>语法1：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;普通函数&#x27;</span>)<br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;箭头函数&#x27;</span>)<br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><ul><li>语法2：只有一个参数可以省略小括号</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">return</span> x + x<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = x =&gt; &#123;<br>    <span class="hljs-keyword">return</span> x + x<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><ul><li>语法3：如果函数体只有一行代码，可以写在一行上，无需写return直接返回值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>)&#123;<br>    <span class="hljs-keyword">return</span> x + y<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">x, y</span>) =&gt; x + y<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><ul><li>语法4：加括号的函数体返回对象字面量表达式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn1</span> = uname =&gt; (&#123; <span class="hljs-attr">uname</span>: uname&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn1</span>(<span class="hljs-string">&#x27;fzh&#x27;</span>))<br></code></pre></td></tr></table></figure><h5 id="2-箭头函数参数"><a href="#2-箭头函数参数" class="headerlink" title="2. 箭头函数参数"></a>2. 箭头函数参数</h5><p>箭头函数没有arguments动态参数，但是有剩余函数…args<br>例：用箭头函数求和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getSum</span> = (<span class="hljs-params">...arr</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        sum += arr[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">getSum</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br></code></pre></td></tr></table></figure><h5 id="3-箭头函数this"><a href="#3-箭头函数this" class="headerlink" title="3. 箭头函数this"></a>3. 箭头函数this</h5><p>箭头函数不会创建自己的this,只会从自己的作用域链上一层沿用this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">sleep</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)  <span class="hljs-comment">//指向 user</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)  <span class="hljs-comment">//指向user 该箭头函数中的this与sleep中的this一致</span><br>        &#125;<br>        <span class="hljs-title function_">fn</span>()<br>    &#125;<br>&#125;<br>user.<span class="hljs-title function_">sleep</span>()<br></code></pre></td></tr></table></figure><h2 id="46-解构赋值"><a href="#46-解构赋值" class="headerlink" title="46. 解构赋值"></a>46. 解构赋值</h2><p>使用解构简洁的语法快速为变量赋值</p><h4 id="A-数组解构"><a href="#A-数组解构" class="headerlink" title="A. 数组解构"></a>A. 数组解构</h4><p>将数组的单元值快速批量赋值给一系列变量的语法</p><ul><li>基本语法：<ol><li>赋值运算符 &#x3D; 左侧的[]用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</li><li>变量的顺序对应数组单元值的位置依次进行赋值操作</li></ol></li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> [a, b, c] = arr<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">// 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h4 id="B-对象解构"><a href="#B-对象解构" class="headerlink" title="B. 对象解构"></a>B. 对象解构</h4><p>将对象属性和方法快速批量赋值给一系列变量的语法</p><ul><li>对象属性的值和将被赋值与属性名相同的变量</li></ul><h5 id="1-简单对象解构"><a href="#1-简单对象解构" class="headerlink" title="1. 简单对象解构"></a>1. 简单对象解构</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;;<br><span class="hljs-keyword">const</span> &#123;name, age&#125; = user<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)  <span class="hljs-comment">// 小明</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)  <span class="hljs-comment">// 18</span><br></code></pre></td></tr></table></figure><h5 id="2-数组对象解构"><a href="#2-数组对象解构" class="headerlink" title="2. 数组对象解构"></a>2. 数组对象解构</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pig = [<br>    &#123;<br>        <span class="hljs-attr">uname</span>:<span class="hljs-string">&#x27;佩奇&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">6</span><br>    &#125;<br>]<br><span class="hljs-keyword">const</span> [&#123; uname, age &#125;] = pig<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(uname)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<br></code></pre></td></tr></table></figure><h5 id="3-多级对象解构"><a href="#3-多级对象解构" class="headerlink" title="3. 多级对象解构"></a>3. 多级对象解构</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pig = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;佩奇&#x27;</span>,<br>    <span class="hljs-attr">family</span>: &#123;<br>        <span class="hljs-attr">mother</span>: <span class="hljs-string">&#x27;猪妈妈&#x27;</span>,<br>        <span class="hljs-attr">father</span>: <span class="hljs-string">&#x27;猪爸爸’,</span><br><span class="hljs-string">        sister: &#x27;</span>乔治<span class="hljs-string">&#x27;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        age: 6</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">const &#123; name, family: &#123; mother, father, sister &#125; &#125; = pig</span><br><span class="hljs-string">console.log(name)</span><br><span class="hljs-string">console.log(mother)</span><br><span class="hljs-string">console.log(father)</span><br><span class="hljs-string">console.log(sister)</span><br></code></pre></td></tr></table></figure><h2 id="47-遍历数组forEach方法"><a href="#47-遍历数组forEach方法" class="headerlink" title="47. 遍历数组forEach方法"></a>47. 遍历数组forEach方法</h2><p>用于调用数组的每个元素，并将元素传递给回调函数<br>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">被遍历的数组.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">当前数组元素, 当前元素索引号</span>)&#123;<br>    <span class="hljs-comment">//函数体</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span> ]<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`当前数组元素是: <span class="hljs-subst">$&#123;item&#125;</span>`</span>)  <span class="hljs-comment">//依次打印数组每一个元素</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`当前数组元素的索引是: <span class="hljs-subst">$&#123;index&#125;</span>`</span>)  <span class="hljs-comment">//依次打印数组每一个元素的索引</span><br></code></pre></td></tr></table></figure><h2 id="48-深入对象"><a href="#48-深入对象" class="headerlink" title="48. 深入对象"></a>48. 深入对象</h2><h4 id="A-创建对象三种方式"><a href="#A-创建对象三种方式" class="headerlink" title="A. 创建对象三种方式"></a>A. 创建对象三种方式</h4><h5 id="1-利用对象字面量创建对象"><a href="#1-利用对象字面量创建对象" class="headerlink" title="1. 利用对象字面量创建对象"></a>1. 利用对象字面量创建对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> o = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;one&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-用new-Object创建对象"><a href="#2-用new-Object创建对象" class="headerlink" title="2. 用new Object创建对象"></a>2. 用new Object创建对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br>obj.<span class="hljs-property">uname</span> = <span class="hljs-string">&#x27;one&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="3-利用构造函数创建对象"><a href="#3-利用构造函数创建对象" class="headerlink" title="3. 利用构造函数创建对象"></a>3. 利用构造函数创建对象</h5><h4 id="B-构造函数"><a href="#B-构造函数" class="headerlink" title="B. 构造函数"></a>B. 构造函数</h4><p>构造函数主要用于初始化对象</p><ul><li>命名要以大写字母开头且只能由new来创建(约定)<br>例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Pig</span>(<span class="hljs-params">name, age, gender</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">gener</span> = gender<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Peppa</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>(<span class="hljs-string">&#x27;佩奇&#x27;</span>, <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;女&#x27;</span>)<span class="hljs-comment">// 创建佩奇对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">George</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>(<span class="hljs-string">&#x27;乔治&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;男&#x27;</span>)<span class="hljs-comment">// 创建乔治对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Mum</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>(<span class="hljs-string">&#x27;猪妈妈&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;女&#x27;</span>)<span class="hljs-comment">// 创建猪妈妈对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Dad</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pig</span>(<span class="hljs-string">&#x27;猪爸爸&#x27;</span>, <span class="hljs-number">32</span>, <span class="hljs-string">&#x27;男&#x27;</span>)<span class="hljs-comment">// 创建猪爸爸对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Peppa</span>)<span class="hljs-comment">//&#123;name:&#x27;佩奇&#x27;,age:6,gener:&#x27;女&#x27;&#125;</span><br></code></pre></td></tr></table></figure><ul><li>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员(实例属性和实例方法)</li><li>构造函数中的属性和方法称为静态成员(静态属性和静态方法)</li></ul><h2 id="49-内置构造函数"><a href="#49-内置构造函数" class="headerlink" title="49. 内置构造函数"></a>49. 内置构造函数</h2><h4 id="A-Object"><a href="#A-Object" class="headerlink" title="A. Object"></a>A. Object</h4><p>是内置的构造函数，创建普通对象</p><h5 id="1-Object-keys静态方法获取对象中所有属性"><a href="#1-Object-keys静态方法获取对象中所有属性" class="headerlink" title="1. Object.keys静态方法获取对象中所有属性"></a>1. <code>Object.keys</code>静态方法获取对象中所有属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> o = &#123; <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;佩奇&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">6</span>&#125;<br><span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(o)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)   <span class="hljs-comment">// [&#x27;name&#x27;, &#x27;age&#x27;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(o))  <span class="hljs-comment">//[&#x27;佩奇&#x27;, 6]</span><br></code></pre></td></tr></table></figure><h5 id="2-Object-assign静态方法用于对象拷贝"><a href="#2-Object-assign静态方法用于对象拷贝" class="headerlink" title="2. Object.assign静态方法用于对象拷贝"></a>2. <code>Object.assign</code>静态方法用于对象拷贝</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> o = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;佩奇&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">6</span>&#125;<br><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(obj, o)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)  <span class="hljs-comment">//&#123;name:&#x27;佩奇&#x27;,age:6&#125;</span><br></code></pre></td></tr></table></figure><h4 id="B-Array"><a href="#B-Array" class="headerlink" title="B. Array"></a>B. Array</h4><h5 id="1-数组的常见实例方法"><a href="#1-数组的常见实例方法" class="headerlink" title="1. 数组的常见实例方法"></a>1. 数组的常见实例方法</h5><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>forEach</td><td>遍历数组</td><td>不返回数组，经常用于查找遍历数组元素</td></tr><tr><td>filter</td><td>过滤数组</td><td>返回新数组，返回的是筛选满足条件的数组元素</td></tr><tr><td>map</td><td>迭代数组</td><td>返回新数组，返回的是处理之后的数组元素，想要使用返回的新数组</td></tr><tr><td>reduce</td><td>累计器</td><td>返回累计处理的结果，经常用于求和等</td></tr><tr><td>join</td><td>拼接数组</td><td>将数组元素拼接为字符串，返回字符串</td></tr><tr><td>find</td><td>查找元素</td><td>查找元素，返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回undefined</td></tr><tr><td>every</td><td>检测数组</td><td>检测数组所有元素是否都符合指定条件，如果所有元素都通过检测返回true,否则返回false</td></tr></tbody></table><h5 id="2-reduce方法"><a href="#2-reduce方法" class="headerlink" title="2. reduce方法"></a>2. reduce方法</h5><p>语法：<br><code>arr.reduce(function(){}, 起始值)</code><br><code>arr.reduce(function(上一次值, 当前值){}, 初始值)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>]<br><br><span class="hljs-comment">// 1. 没有初始值</span><br><span class="hljs-keyword">const</span> total = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, current</span>) &#123;<br><span class="hljs-keyword">return</span> prev + current<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total)<br><br><span class="hljs-comment">// 2. 有初始值</span><br><span class="hljs-keyword">const</span> total = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, current</span>) &#123;<br><span class="hljs-keyword">return</span> prev + current<br>&#125;, <span class="hljs-number">10</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total)<br><br><span class="hljs-comment">// 3. 箭头函数的写法</span><br><span class="hljs-keyword">const</span> total = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, current</span>) =&gt;</span> prev + current, <span class="hljs-number">10</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total)<br></code></pre></td></tr></table></figure><h4 id="C-String"><a href="#C-String" class="headerlink" title="C. String"></a>C. String</h4><p>常见实例方法</p><table><thead><tr><th>实例方法</th><th>作用</th></tr></thead><tbody><tr><td>length</td><td>用于获取字符串的长度</td></tr><tr><td>split(‘分隔符’)</td><td>将字符串拆分成数组</td></tr><tr><td>substring(需要截取的第一个字符的索引[,结束的索引号])</td><td>用于字符串截取</td></tr><tr><td>startsWith(检测字符串[,检测位置索引号])</td><td>检测是否以某字符开头</td></tr></tbody></table><h4 id="D-Number"><a href="#D-Number" class="headerlink" title="D. Number"></a>D. Number</h4><p>用于创建数值<br>常用方法： <code>toFixed()</code>设置保留小数位的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> price = <span class="hljs-number">12.345</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(price.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>))  <span class="hljs-comment">//输出12.35</span><br></code></pre></td></tr></table></figure><h2 id="50-编程思想"><a href="#50-编程思想" class="headerlink" title="50. 编程思想"></a>50. 编程思想</h2><h4 id="A-面向过程编程"><a href="#A-面向过程编程" class="headerlink" title="A. 面向过程编程"></a>A. 面向过程编程</h4><p>分析出解决问题所需的步骤，然后用函数把这些步骤依次解决</p><h4 id="B-面向对象编程"><a href="#B-面向对象编程" class="headerlink" title="B. 面向对象编程"></a>B. 面向对象编程</h4><p>把事务分解成一个个对象，然后由对象之间分工合作</p><ul><li>面向对象的特性<ol><li>封装性</li><li>继承性</li><li>多态性</li></ol></li></ul><h2 id="51-构造函数"><a href="#51-构造函数" class="headerlink" title="51. 构造函数"></a>51. 构造函数</h2><ul><li>构造函数实现封装性，封装一个函数</li><li>构造函数方法会存在内存浪费的问题</li></ul><h2 id="52-原型"><a href="#52-原型" class="headerlink" title="52. 原型"></a>52. 原型</h2><h4 id="A-介绍和prototype属性"><a href="#A-介绍和prototype属性" class="headerlink" title="A. 介绍和prototype属性"></a>A. 介绍和prototype属性</h4><p>构造函数通过原型分配实现方法共享<br>每个构造函数都有一个<code>prototype</code>属性，指向另一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">uname, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">uname</span> = uname<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Star</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<span class="hljs-comment">//返回一个对象称为原型对象</span><br><span class="hljs-title class_">Star</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sing</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">const</span> ldh = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;刘德华&#x27;</span>,<span class="hljs-number">18</span>)<br><span class="hljs-keyword">const</span> zxy= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Star</span>(<span class="hljs-string">&#x27;张学友&#x27;</span>,<span class="hljs-number">19</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ldh.<span class="hljs-property">sing</span> === zxy.<span class="hljs-property">sing</span>)<span class="hljs-comment">// 结果是true 说明俩函数一样,共享</span><br></code></pre></td></tr></table></figure><h4 id="B-constructor属性"><a href="#B-constructor属性" class="headerlink" title="B. constructor属性"></a>B. constructor属性</h4><p>每个原型对象里面都有个constructor属性<br>该属性指向该原型对象的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Star</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-title class_">Star</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<br>    <span class="hljs-attr">constructor</span>: <span class="hljs-title class_">Star</span>,<span class="hljs-comment">//手动利用constructor指回Star构造函数</span><br>    <span class="hljs-attr">sing</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;唱&#x27;</span>) &#125;,<br>    <span class="hljs-attr">dance</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;跳&#x27;</span>) &#125;,<br>    <span class="hljs-attr">rap</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;rap&#x27;</span>) &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Star</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>) <span class="hljs-comment">//指向Star</span><br></code></pre></td></tr></table></figure><h4 id="C-对象原型"><a href="#C-对象原型" class="headerlink" title="C. 对象原型"></a>C. 对象原型</h4><p>对象都有一个属性<code>_proto_</code>指向构造函数的prototype原型对象</p><h4 id="D-原型继承"><a href="#D-原型继承" class="headerlink" title="D. 原型继承"></a>D. 原型继承</h4><p>JS大多借助原型对象实现继承的特性</p><h4 id="E-原型链"><a href="#E-原型链" class="headerlink" title="E. 原型链"></a>E. 原型链</h4><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，称为原型链</p><h2 id="53-深浅拷贝"><a href="#53-深浅拷贝" class="headerlink" title="53. 深浅拷贝"></a>53. 深浅拷贝</h2><p>浅拷贝和深拷贝只针对引用类型</p><h4 id="A-浅拷贝"><a href="#A-浅拷贝" class="headerlink" title="A. 浅拷贝"></a>A. 浅拷贝</h4><ul><li>拷贝的是地址</li><li>如果是单层对象没问题，如果有多层就有问题<br>常见方法：</li></ul><ol><li>拷贝对象：<code>Object.assgin()</code>或<code>展开运算符{...obj}</code></li><li>拷贝数组：<code>Array.prototype.concat()</code>或<code>[...arr]</code></li></ol><h4 id="B-深拷贝"><a href="#B-深拷贝" class="headerlink" title="B. 深拷贝"></a>B. 深拷贝</h4><p>拷贝的是对象，不是地址<br>常见方法：</p><ol><li>通过递归实现深拷贝</li><li>lodash&#x2F;cloneDeep</li><li>通过JSON.stringify()</li></ol><h2 id="54-异常处理"><a href="#54-异常处理" class="headerlink" title="54. 异常处理"></a>54. 异常处理</h2><p>指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行</p><h4 id="A-throw抛异常"><a href="#A-throw抛异常" class="headerlink" title="A. throw抛异常"></a>A. throw抛异常</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!x || !y) &#123;<br>        <span class="hljs-comment">// throw &#x27;参数不能为空!&#x27;;</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;参数不能为空!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> x + y<br>&#125;<br><span class="hljs-title function_">counter</span>()<br></code></pre></td></tr></table></figure><h4 id="B-try-catch捕获异常"><a href="#B-try-catch捕获异常" class="headerlink" title="B. try&#x2F;catch捕获异常"></a>B. try&#x2F;catch捕获异常</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;p&gt;<span class="hljs-number">123</span>&lt;/p&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">try</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 可能发送错误的代码 要写到 try</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.p&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        p.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125; <span class="hljs-keyword">catch</span> (err) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 拦截错误,提示浏览器提供的错误信息,但是不中断程序的执行</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;你看看,选择器错误了吧&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span>  <span class="hljs-comment">// 需要加return 中断程序</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">finally</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;弹出对话框&#x27;</span>)<span class="hljs-comment">// 不管你程序对不对,一定会执行的代码</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">fn</span>()</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="C-debugger"><a href="#C-debugger" class="headerlink" title="C. debugger"></a>C. debugger</h4><h2 id="55-处理this"><a href="#55-处理this" class="headerlink" title="55. 处理this"></a>55. 处理this</h2><h4 id="A-this指向"><a href="#A-this指向" class="headerlink" title="A. this指向"></a>A. this指向</h4><h5 id="1-普通函数this指向"><a href="#1-普通函数this指向" class="headerlink" title="1. 普通函数this指向"></a>1. 普通函数this指向</h5><p>谁调用我，我指向谁</p><h5 id="2-箭头函数this指向"><a href="#2-箭头函数this指向" class="headerlink" title="2. 箭头函数this指向"></a>2. 箭头函数this指向</h5><ul><li>箭头函数中并不存在this</li><li>箭头函数中的this引用就是最近作用域的this</li><li>向外层作用域，一层一层查找this，直到有this定义</li></ul><h4 id="B-改变this"><a href="#B-改变this" class="headerlink" title="B. 改变this"></a>B. 改变this</h4><h5 id="1-call"><a href="#1-call" class="headerlink" title="1. call()"></a>1. call()</h5><p>使用call方法调用函数，同时指定被调用函数中this的值<br>语法： <code>fun.call(thisArg,arg1,arg2,...)</code></p><h5 id="2-apply"><a href="#2-apply" class="headerlink" title="2. apply()"></a>2. apply()</h5><p>语法： <code>fun.apply(thisArg,[argsArray])</code></p><ul><li>thisArg: 在fun函数运行时指定的this值</li><li>argsArray: 传递的值，必须包含在数组里面</li></ul><h5 id="3-bind-重要"><a href="#3-bind-重要" class="headerlink" title="3. bind()(重要)"></a>3. bind()(重要)</h5><p>bind()不会调用函数，但是能改变函数内部this指向<br>语法： <code>fun.bind(thisArg,arg1,arg2,...)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-keyword">let</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><span class="hljs-keyword">let</span> sayHello = sayHi.<span class="hljs-title function_">bind</span>(user);  <span class="hljs-comment">//用 bind 指定 this 的值</span><br><span class="hljs-title function_">sayHello</span>()<span class="hljs-comment">//调用使用 bind 创建的新函数</span><br></code></pre></td></tr></table></figure><h2 id="56-性能优化"><a href="#56-性能优化" class="headerlink" title="56. 性能优化"></a>56. 性能优化</h2><ul><li>防抖：单位时间内，频繁触发事件，只执行最后一次</li><li>节流：单位时间内，频繁触发事件，只执行一次</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown简单学习笔记</title>
    <link href="/2024/12/18/FrontEnd/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/12/18/FrontEnd/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一-标题"><a href="#一-标题" class="headerlink" title="一. 标题"></a>一. 标题</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure><h1 id="二-字体"><a href="#二-字体" class="headerlink" title="二. 字体"></a>二. 字体</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">加粗：   <span class="hljs-strong">**这是加粗的文字**</span> (两个星号包起来)<br>斜体：   <span class="hljs-emphasis">*这是斜体的文字*</span>  (一个星号包起来)<br>斜体加粗：<span class="hljs-strong">**<span class="hljs-emphasis">*这是斜体加粗的文字*</span>**</span> (三个星号包起来)<br>删除线： ~~这是加删除线的文字~~ (两个波浪号包起来)<br></code></pre></td></tr></table></figure><h1 id="三-引用"><a href="#三-引用" class="headerlink" title="三. 引用"></a>三. 引用</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">这是引用的内容</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;这是引用的内容</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。</span><br></code></pre></td></tr></table></figure><h1 id="四-分割线"><a href="#四-分割线" class="headerlink" title="四. 分割线"></a>四. 分割线</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">---</span><br><span class="hljs-section">----</span><br><span class="hljs-bullet">***</span><br><span class="hljs-bullet"></span>*****<br>___<br>____<br>效果都是一样的<br></code></pre></td></tr></table></figure><h1 id="五-链接"><a href="#五-链接" class="headerlink" title="五. 链接"></a>五. 链接</h1><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">知乎(https:<span class="hljs-comment">//www.zhihu.com/)</span><br><span class="hljs-string">[百度]</span>(https:<span class="hljs-comment">//www.baidu.com/)</span><br></code></pre></td></tr></table></figure><h1 id="六-列表"><a href="#六-列表" class="headerlink" title="六. 列表"></a>六. 列表</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 有序列表<br><span class="hljs-bullet">*</span> 一级无序列表内容(敲一个TAB键)<br><span class="hljs-bullet">    1.</span> 二级有序列表内容<br><span class="hljs-bullet">    2.</span> 二级有序列表内容<br><span class="hljs-bullet">    3.</span> 二级有序列表内容<br><span class="hljs-bullet">2.</span> 无序列表<br><span class="hljs-bullet">*</span> 无序列表内容<br><span class="hljs-bullet">*</span> 一级无序列表内容(敲一个TAB键)<br><span class="hljs-bullet">    *</span> 二级无序列表内容<br><span class="hljs-bullet">    *</span> 二级无序列表内容<br><span class="hljs-bullet">    *</span> 二级无序列表内容<br></code></pre></td></tr></table></figure><h1 id="七-表格"><a href="#七-表格" class="headerlink" title="七. 表格"></a>七. 表格</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">第二行是分割线，两边加：表示居中；右边加：表示靠右<br>|<span class="hljs-string">姓名</span>|<span class="hljs-string">性别</span>|<span class="hljs-string">分数</span>|<br>|<span class="hljs-string">--</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">--:</span>|<br>|<span class="hljs-string">小明</span>|<span class="hljs-string">男</span>|<span class="hljs-string">100</span>|<br>|<span class="hljs-string">小红</span>|<span class="hljs-string">女</span>|<span class="hljs-string">89</span>|<br>|<span class="hljs-string">小飞</span>|<span class="hljs-string">男</span>|<span class="hljs-string">88</span>|<br></code></pre></td></tr></table></figure><h1 id="八-代码"><a href="#八-代码" class="headerlink" title="八. 代码"></a>八. 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span> 单行代码<br>`<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world!&quot;</span>)`<br>两边加上单引号即可<br><span class="hljs-number">2.</span> 代码块<br>~~~c++<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello CSDN!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>~~~<br>用三个波浪号包起来，可以指定对应的语言。<br>或者用```包起来<br>```c++<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello CSDN!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习笔记</title>
    <link href="/2024/10/31/FrontEnd/CSS%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/31/FrontEnd/CSS%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-CSS介绍"><a href="#1-CSS介绍" class="headerlink" title="1. CSS介绍"></a>1. CSS介绍</h2><ul><li>CSS：层叠样式表</li><li>CSS作用：给页面HTML标签设置样式</li></ul><h2 id="2-CSS引入方式"><a href="#2-CSS引入方式" class="headerlink" title="2. CSS引入方式"></a>2. CSS引入方式</h2><h4 id="A-内嵌式"><a href="#A-内嵌式" class="headerlink" title="A. 内嵌式"></a>A. 内嵌式</h4><ul><li>CSS写在style标签中</li><li>style标签通常写在head标签中</li></ul><h4 id="B-外联式-常用"><a href="#B-外联式-常用" class="headerlink" title="B. 外联式(常用)"></a>B. 外联式(常用)</h4><ul><li>CSS写在一个单独的.css文件中</li><li>通过link标签引入网页中</li></ul><h4 id="C-行内式-常配合JS使用"><a href="#C-行内式-常配合JS使用" class="headerlink" title="C. 行内式(常配合JS使用)"></a>C. 行内式(常配合JS使用)</h4><ul><li>CSS直接写在标签的style属性中</li></ul><h2 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3. 选择器"></a>3. 选择器</h2><h4 id="A-标签选择器"><a href="#A-标签选择器" class="headerlink" title="A. 标签选择器"></a>A. 标签选择器</h4><p>写法： <code>标签名{CSS属性名: 属性值;}</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">示例：   <span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></td></tr></table></figure><p>标签选择器选择一类标签中的所有，而不是单独某一个</p><h4 id="B-类选择器"><a href="#B-类选择器" class="headerlink" title="B. 类选择器"></a>B. 类选择器</h4><p>写法：<code>.类名{CSS属性名: 属性值;}</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.red</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br><span class="hljs-selector-class">.size</span>&#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">88px</span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>一段话<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red size&quot;</span>&gt;</span>红且变大<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>也变红<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>类名由数字、字母、下划线和中划线组成，但不能以数字或中划线开头。</li><li>一个标签可以同时有多个类名，类名之间以空格隔开</li></ul><h4 id="C-ID选择器"><a href="#C-ID选择器" class="headerlink" title="C. ID选择器"></a>C. ID选择器</h4><p>写法： <code> #ID属性值{CSS属性名: 属性值;}</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#blue</span>&#123;<span class="hljs-attribute">color</span>: blue;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span>我是blue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>id属性值在一个页面是唯一的，不可重复！</li><li>一个标签只能有一个id属性值，是一对一的</li></ul><h4 id="D-通配符选择器"><a href="#D-通配符选择器" class="headerlink" title="D. 通配符选择器"></a>D. 通配符选择器</h4><p>写法： <code> *{CSS属性名：属性值;}</code><br>作用：对页面中所有标签设置相应样式</p><h2 id="4-字体样式"><a href="#4-字体样式" class="headerlink" title="4. 字体样式"></a>4. 字体样式</h2><h4 id="A-属性"><a href="#A-属性" class="headerlink" title="A. 属性"></a>A. 属性</h4><table><thead><tr><th>属性名</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>font-size</td><td>数字+px</td><td>字体大小</td></tr><tr><td>font-weight</td><td>100~900整百数</td><td>字体粗细</td></tr><tr><td>font-style</td><td>normal&#x2F;italic</td><td>字体是否倾斜</td></tr><tr><td>font-family</td><td>微软雅黑&#x2F;宋体&#x2F;等等</td><td>字体系列</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>   <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">900</span>;<br>   <span class="hljs-attribute">font-style</span>: italic;<br>   <span class="hljs-attribute">font-family</span>: 宋体;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span>这是一段30像素、加粗、倾斜的宋体文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="B-样式的层叠性"><a href="#B-样式的层叠性" class="headerlink" title="B. 样式的层叠性"></a>B. 样式的层叠性</h4><p>给同一个标签设置相同属性，样式会层叠，最下面的生效</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">color</span>: red;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时blue样式生效，red样式不生效。</p><h4 id="C-font的复合属性"><a href="#C-font的复合属性" class="headerlink" title="C. font的复合属性"></a>C. font的复合属性</h4><p>写法:  <code>font: style weight size family;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">例：<br><span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">font</span>: italic <span class="hljs-number">700</span> <span class="hljs-number">50px</span> 宋体;&#125;<br><span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">font</span>: <span class="hljs-number">100px</span> 微软雅黑;&#125;<br></code></pre></td></tr></table></figure><p>**注意：**只能省略前两个(style和weight)，size和family必须存在</p><h2 id="5-文本样式"><a href="#5-文本样式" class="headerlink" title="5. 文本样式"></a>5. 文本样式</h2><table><thead><tr><th>属性名</th><th>作用</th><th>取值</th></tr></thead><tbody><tr><td>text-indent</td><td>文本缩进</td><td>数字+px;<br>数字+em(1em&#x3D;1个字的大小)</td></tr><tr><td>text-align</td><td>文本水平对齐</td><td>left, center, right(左中右)</td></tr><tr><td>text-decoration</td><td>文本修饰</td><td>underline:下划线(常用)<br>none:无装饰线(常用)<br>line-through:删除线<br>overline:上划线</td></tr><tr><td>line-height</td><td>行高</td><td>数字+px;<br>倍数(当前font-size的倍数)</td></tr></tbody></table><h2 id="6-标签水平居中"><a href="#6-标签水平居中" class="headerlink" title="6. 标签水平居中"></a>6. 标签水平居中</h2><p>让div、p、h等标签大盒子水平居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br></code></pre></td></tr></table></figure><h2 id="7-选择器进阶"><a href="#7-选择器进阶" class="headerlink" title="7. 选择器进阶"></a>7. 选择器进阶</h2><h4 id="A-复合选择器"><a href="#A-复合选择器" class="headerlink" title="A.复合选择器"></a>A.复合选择器</h4><p><strong>1. 后代选择器</strong><br>根据HTML标签的嵌套关系，选择父元素后代中满足条件的元素<br>语法：<code>选择器1 选择器2{css}</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是div的儿子p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2. 子代选择器: &gt;</strong><br>根据HTML标签的嵌套关系，选择父元素子代中满足条件的元素<br>语法： <code>选择器1&gt;选择器2{css}</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">a</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    父级<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>这是div里面的a<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>这是div中p的a<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="B-并集选择器"><a href="#B-并集选择器" class="headerlink" title="B. 并集选择器"></a>B. 并集选择器</h4><p>同时选择多组标签，设置相同的样式<br>语法： <code>选择器1,选择器2{css}</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>,<span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">span</span>,<span class="hljs-selector-tag">h1</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span>p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="C-交集选择器"><a href="#C-交集选择器" class="headerlink" title="C. 交集选择器"></a>C. 交集选择器</h4><p>选中页面中同时满足多个选择器的标签<br>语法： <code>选择器1选择器2{css}</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.box</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>这是p标签：box<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>这是div标签：box<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="D-hover伪类选择器"><a href="#D-hover伪类选择器" class="headerlink" title="D. hover伪类选择器"></a>D. hover伪类选择器</h4><p>选中鼠标悬停在元素上的状态，设置样式<br>语法：  <code>选择器:hover{css}</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">color</span>: red;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>超链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-背景相关属性"><a href="#8-背景相关属性" class="headerlink" title="8. 背景相关属性"></a>8. 背景相关属性</h2><h4 id="A-属性-1"><a href="#A-属性-1" class="headerlink" title="A. 属性"></a>A. 属性</h4><table><thead><tr><th>属性名</th><th>作用</th><th>取值</th></tr></thead><tbody><tr><td>background-color</td><td>背景颜色</td><td>关键字，rgb法，rgba法等</td></tr><tr><td>background-image</td><td>背景图片</td><td>background-image: url(‘图片路径’);</td></tr><tr><td>background-repeat</td><td>背景平铺</td><td>repeat:水平垂直都平铺(默认)<br>no-repeat:不平铺<br>repeat-x:水平方向平铺<br>repeat-y:垂直方向平铺</td></tr><tr><td>background-position</td><td>背景位置</td><td>background-position:水平方向位置 垂直方向位置;</td></tr></tbody></table><h4 id="B-背景相关属性的连写形式"><a href="#B-背景相关属性的连写形式" class="headerlink" title="B.背景相关属性的连写形式"></a>B.背景相关属性的连写形式</h4><p>写法：<code>background: color image repeat position</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: pink <span class="hljs-built_in">url</span>(<span class="hljs-string">./image/1.jpg</span>) no-repeat center bottom;<br></code></pre></td></tr></table></figure><h2 id="9-元素显示模式"><a href="#9-元素显示模式" class="headerlink" title="9. 元素显示模式"></a>9. 元素显示模式</h2><h4 id="A-块级元素"><a href="#A-块级元素" class="headerlink" title="A. 块级元素"></a>A. 块级元素</h4><ul><li>独占一行</li><li>宽度默认是父元素的宽度，高度默认由内容撑开</li><li>可以设置宽高</li></ul><p>代表标签：div、p、h、ul等</p><h4 id="B-行内元素"><a href="#B-行内元素" class="headerlink" title="B. 行内元素"></a>B. 行内元素</h4><ul><li>一行可以显示多个</li><li>宽度和高度默认由内容撑开</li><li>不可以设置宽高</li></ul><p>代表标签：a、span、b、u等</p><h4 id="C-行内块元素"><a href="#C-行内块元素" class="headerlink" title="C. 行内块元素"></a>C. 行内块元素</h4><ul><li>一行可以显示多个</li><li>可以设置宽高</li></ul><p>代表标签: input、textarea、button、select等</p><h4 id="D-元素显示模式转换"><a href="#D-元素显示模式转换" class="headerlink" title="D. 元素显示模式转换"></a>D. 元素显示模式转换</h4><ul><li>改变元素默认的显示特点，让元素符合要求</li></ul><table><thead><tr><th>属性</th><th>效果</th></tr></thead><tbody><tr><td>display:block</td><td>转为块级元素(常用)</td></tr><tr><td>display:inline-block</td><td>转为行内块元素(常用)</td></tr><tr><td>display:inline</td><td>转为行内元素</td></tr></tbody></table><h4 id="E-HTML嵌套注意"><a href="#E-HTML嵌套注意" class="headerlink" title="E. HTML嵌套注意"></a>E. HTML嵌套注意</h4><ul><li>块级元素一般作为大容器，可以嵌套其他元素<br>但：p标签不能嵌套div、p、h等块级元素</li><li>a标签内部可以嵌套任意元素<br>但：a不能套a标签</li></ul><h2 id="10-CSS特性"><a href="#10-CSS特性" class="headerlink" title="10. CSS特性"></a>10. CSS特性</h2><h4 id="A-继承性"><a href="#A-继承性" class="headerlink" title="A. 继承性"></a>A. 继承性</h4><p>子元素有默认继承父元素样式的特点；但如果自己本身有相应的属性，就不会继承父元素的属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    这是div标签中的文字<br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是div中span的字,此时span中的字也变红<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="B-层叠性"><a href="#B-层叠性" class="headerlink" title="B. 层叠性"></a>B. 层叠性</h4><ul><li>给同一个标签设置不同样式时，样式会叠加</li><li>给同一个标签设置相同样式时，样式会覆盖掉，以最后样式生效</li></ul><h4 id="C-优先级"><a href="#C-优先级" class="headerlink" title="C. 优先级"></a>C. 优先级</h4><p>下面介绍</p><h2 id="11-CSS的优先级"><a href="#11-CSS的优先级" class="headerlink" title="11. CSS的优先级"></a>11. CSS的优先级</h2><p>定义：不同选择器具有不同的优先级，优先级高的选择器样式会覆盖优先级低的选择器样式<br>优先级大小：<br>继承&lt;通配符选择器&lt;标签选择器&lt;类选择器&lt;id选择器&lt;行内样式&lt;！important</p><h2 id="12-优先级的权重叠加计算"><a href="#12-优先级的权重叠加计算" class="headerlink" title="12. 优先级的权重叠加计算"></a>12. 优先级的权重叠加计算</h2><p>如果是复合选择器，需要通过权重叠加计算方法判断最终哪个选择器优先级最高最终生效。<br>公式：(0,0,0,0)&#x3D;&#x3D;&gt;(第一级,第二级,第三级,第四级)<br>复合选择器中：(行内样式个数,id选择器个数,类选择器个数,标签选择器个数)</p><p><strong>比较规则：</strong><br>从第一级开始比较，若能比较出来，则完成；否则继续下一级的比较；以此类推<br>例如：(1,0,0,0)&gt;(0,2,0,0)&gt;(0,1,0,1)&gt;(0,0,5,0)</p><p><strong>注意：</strong></p><ul><li>记住:(行内,id,类,标签)</li><li>!important永远是最高优先级，继承最低</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-id">#one</span>&#123;<span class="hljs-attribute">color</span>: orange;&#125;<br><span class="hljs-selector-class">.father</span> <span class="hljs-selector-class">.son</span>&#123;<span class="hljs-attribute">color</span>: skyblue;&#125;<br><span class="hljs-selector-class">.father</span> <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>: purple;&#125;<br><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>: pink;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>猜我的颜色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于(0,1,0,1)&gt;(0,0,2,0)&gt;(0,0,1,1)&gt;(0,0,0,2);所以最终orange颜色生效。</p><h2 id="13-盒子模型"><a href="#13-盒子模型" class="headerlink" title="13. 盒子模型"></a>13. 盒子模型</h2><p>盒子就是标签<br>每个盒子由内容区域(content)、内边距区域(padding)、边框区域(border)和外边距区域(margin)构成</p><h4 id="A-内容区域的宽度和高度"><a href="#A-内容区域的宽度和高度" class="headerlink" title="A. 内容区域的宽度和高度"></a>A. 内容区域的宽度和高度</h4><p>使用width和height属性设置盒子内容区域的大小</p><h4 id="B-边框区域"><a href="#B-边框区域" class="headerlink" title="B. 边框区域"></a>B. 边框区域</h4><p>属性使用border;<br>语法： <code>border: 粗细 线条种类 颜色;</code><br>例子：<code>border: 10px solid #000;</code></p><h4 id="C-内边距区域"><a href="#C-内边距区域" class="headerlink" title="C. 内边距区域"></a>C. 内边距区域</h4><p>padding属性可以当作复合属性使用</p><ul><li>一值(上下左右)：    <code>padding: 50px;</code></li><li>二值(上下 左右)：   <code>padding: 10px 80px;</code></li><li>三值(上 左右 下):   <code>padding: 10px 20px 50px;</code></li><li>四值(上 右 下 左):  <code>padding: 10px 20px 40px 80px;</code></li></ul><h4 id="D-外边距区域"><a href="#D-外边距区域" class="headerlink" title="D. 外边距区域"></a>D. 外边距区域</h4><p>使用margin属性，与padding属性使用方式一样</p><h4 id="E-清除默认内外边距"><a href="#E-清除默认内外边距" class="headerlink" title="E. 清除默认内外边距"></a>E. 清除默认内外边距</h4><p>使用以下方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="F-版心居中"><a href="#F-版心居中" class="headerlink" title="F. 版心居中"></a>F. 版心居中</h4><p>网页的有效内容在网页居中<br>使用：<code>margin: 0 auto;</code></p><h2 id="14-结构伪类选择器"><a href="#14-结构伪类选择器" class="headerlink" title="14. 结构伪类选择器"></a>14. 结构伪类选择器</h2><p>根据元素在HTML中的结构关系查找元素</p><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>E:first-child{}</td><td>匹配父元素中第一个子元素，且是E元素</td></tr><tr><td>E:last-child{}</td><td>匹配父元素中最后一个子元素，且是E元素</td></tr><tr><td>E:nth-child(n){}</td><td>匹配父元素中第n个子元素，且是E元素</td></tr><tr><td>E:nth-last-child(n){}</td><td>匹配父元素中倒数第n个子元素，且是E元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第1个li元素,我会变绿吗<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第2个li元素<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第3个li元素,我会变黄吗<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第4个li元素,我会变红吗<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第5个li元素,我会变蓝吗<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first-child</span>&#123;<span class="hljs-attribute">background-color</span>: green;&#125;<br><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span>&#123;<span class="hljs-attribute">background-color</span>: blue;&#125;<br><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>)&#123;<span class="hljs-attribute">background-color</span>: red;&#125;<br><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-last-child</span>(<span class="hljs-number">3</span>)&#123;<span class="hljs-attribute">background-color</span>: yellow;&#125;<br></code></pre></td></tr></table></figure><h2 id="15-伪元素"><a href="#15-伪元素" class="headerlink" title="15. 伪元素"></a>15. 伪元素</h2><ul><li>元素：HTML设置的标签</li><li>伪元素：由CSS模拟出的标签效果</li></ul><table><thead><tr><th>伪元素</th><th>作用</th></tr></thead><tbody><tr><td>::before</td><td>在父元素内容的最前添加一个伪元素</td></tr><tr><td>::after</td><td>在父元素内容的最后添加一个伪元素</td></tr></tbody></table><p><strong>注意：</strong> content属性必须有，否则不生效</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span><span class="hljs-selector-pseudo">::before</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;我爱&#x27;</span>;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.father</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;呀&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span>喝开水<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="16-浮动-不够详细"><a href="#16-浮动-不够详细" class="headerlink" title="16. 浮动(不够详细)"></a>16. 浮动(不够详细)</h2><p>用作网页布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.content</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1226px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">460px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">234px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">460px</span>;<br>    <span class="hljs-attribute">background-color</span>: blue;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">992px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">460px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="17-清除浮动"><a href="#17-清除浮动" class="headerlink" title="17. 清除浮动"></a>17. 清除浮动</h2><p>清除浮动给其他元素带来的影响</p><h4 id="A-额外标签法"><a href="#A-额外标签法" class="headerlink" title="A. 额外标签法"></a>A. 额外标签法</h4><ol><li>在父元素内容的最后添加一个块级元素</li><li>给添加的块级元素设置： <code>clear: both;</code></li></ol><h4 id="B-单伪元素清除法-推荐"><a href="#B-单伪元素清除法-推荐" class="headerlink" title="B. 单伪元素清除法(推荐)"></a>B. 单伪元素清除法(推荐)</h4><p>用伪元素替代了额外标签<br>写法1：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><p>写法2(用于解决浏览器兼容性)：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-双伪元素清除法-推荐"><a href="#C-双伪元素清除法-推荐" class="headerlink" title="C. 双伪元素清除法(推荐)"></a>C. 双伪元素清除法(推荐)</h4><p>写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">display</span>: table;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span>&#123;<span class="hljs-attribute">clear</span>:both;&#125;<br></code></pre></td></tr></table></figure><h4 id="D-overflow法-推荐"><a href="#D-overflow法-推荐" class="headerlink" title="D. overflow法(推荐)"></a>D. overflow法(推荐)</h4><p>给父元素加上：<code>overflow:hidden;</code></p><h2 id="18-定位"><a href="#18-定位" class="headerlink" title="18. 定位"></a>18. 定位</h2><h4 id="A-定位的作用"><a href="#A-定位的作用" class="headerlink" title="A. 定位的作用"></a>A. 定位的作用</h4><p>让元素自由的摆放在网页的任意位置，一般用于盒子间的层叠情况</p><h4 id="B-定位的基本使用"><a href="#B-定位的基本使用" class="headerlink" title="B. 定位的基本使用"></a>B. 定位的基本使用</h4><p><strong>(1) 定位方法</strong><br>属性名：position</p><table><thead><tr><th>定位方式</th><th>属性值</th></tr></thead><tbody><tr><td>静态定位</td><td>static</td></tr><tr><td>相对定位</td><td>relative</td></tr><tr><td>绝对定位</td><td>absolute</td></tr><tr><td>固定定位</td><td>fixed</td></tr></tbody></table><p><strong>(2) 偏移值</strong></p><table><thead><tr><th>方向</th><th>属性名</th><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>水平</td><td>left</td><td>数字+px</td><td>距离左边的距离</td></tr><tr><td>水平</td><td>right</td><td>数字+px</td><td>距离右边的距离</td></tr><tr><td>垂直</td><td>top</td><td>数字+px</td><td>距离上边的距离</td></tr><tr><td>垂直</td><td>bottom</td><td>数字+px</td><td>距离下边的距离</td></tr></tbody></table><h2 id="19-元素层级"><a href="#19-元素层级" class="headerlink" title="19. 元素层级"></a>19. 元素层级</h2><h4 id="A-不同布局方式元素的层级关系"><a href="#A-不同布局方式元素的层级关系" class="headerlink" title="A. 不同布局方式元素的层级关系"></a>A. 不同布局方式元素的层级关系</h4><ul><li>标准流&lt;浮动&lt;定位</li></ul><h4 id="B-不同定位之间的层级关系"><a href="#B-不同定位之间的层级关系" class="headerlink" title="B. 不同定位之间的层级关系"></a>B. 不同定位之间的层级关系</h4><ul><li>相对、绝对和固定默认层级相同</li><li>HTML写在后面的元素层级更高</li></ul><h2 id="20-装饰"><a href="#20-装饰" class="headerlink" title="20. 装饰"></a>20. 装饰</h2><h4 id="A-垂直对齐方式"><a href="#A-垂直对齐方式" class="headerlink" title="A. 垂直对齐方式"></a>A. 垂直对齐方式</h4><p>属性名: <code>vertical-align</code></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>baseline</td><td>默认</td></tr><tr><td>top</td><td>顶部对齐</td></tr><tr><td>middle</td><td>中部对齐</td></tr><tr><td>bottom</td><td>底部对齐</td></tr></tbody></table><h4 id="B-光标类型"><a href="#B-光标类型" class="headerlink" title="B. 光标类型"></a>B. 光标类型</h4><p>设置鼠标移动到元素上显示的样式<br>属性名: <code>cursor</code></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>default</td><td>默认，箭头</td></tr><tr><td>pointer</td><td>小手效果，可以点击</td></tr><tr><td>text</td><td>工字型，可以选择文字</td></tr><tr><td>move</td><td>十字光标，可以移动</td></tr></tbody></table><h4 id="C-边框圆角"><a href="#C-边框圆角" class="headerlink" title="C. 边框圆角"></a>C. 边框圆角</h4><p>盒子的四个角变得圆润<br>属性名： <code>border-radius</code><br>取值： 数字+px，百分比</p><ul><li>画一个正圆<ul><li>盒子必须是正方形</li><li>设置border-radius: 50%;</li></ul></li><li>胶囊按钮<ul><li>盒子必须是长方形</li><li>设置border-radius: 盒子高度的一半</li></ul></li></ul><h4 id="D-overflow溢出显示效果"><a href="#D-overflow溢出显示效果" class="headerlink" title="D. overflow溢出显示效果"></a>D. overflow溢出显示效果</h4><p>解决溢出部分问题，溢出指盒子内容部分超过盒子的内容区域。<br>属性名： <code>overflow</code></p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>visible</td><td>默认，溢出部分可见</td></tr><tr><td>hidden</td><td>溢出部分隐藏</td></tr><tr><td>scroll</td><td>显示滚动条</td></tr><tr><td>auto</td><td>自动显示或隐藏滚动条</td></tr></tbody></table><h4 id="E-元素显示隐藏"><a href="#E-元素显示隐藏" class="headerlink" title="E. 元素显示隐藏"></a>E. 元素显示隐藏</h4><p>让某元素本身在屏幕不可见<br>属性： <code>visibility:hidden</code>或<code>display:none</code></p><h4 id="F-元素透明度"><a href="#F-元素透明度" class="headerlink" title="F. 元素透明度"></a>F. 元素透明度</h4><p>让元素整体变得更透明<br>属性名： <code>opacity</code><br>属性值： 0~1之间的数字</p><ul><li>1：完全不透明</li><li>0：完全透明</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>前端</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习笔记</title>
    <link href="/2024/10/31/FrontEnd/HTML%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/31/FrontEnd/HTML%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Web标准"><a href="#1-Web标准" class="headerlink" title="1. Web标准"></a>1. Web标准</h2><table><thead><tr><th align="center">语言</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td align="center">HTML</td><td>结构</td><td>页面元素和内容</td></tr><tr><td align="center">CSS</td><td>表现</td><td>美化用的，网页元素的外观位置颜色等</td></tr><tr><td align="center">JavaScript</td><td>行为</td><td>页面交互和动态效果</td></tr></tbody></table><h2 id="2-HTML页面固定结构"><a href="#2-HTML页面固定结构" class="headerlink" title="2. HTML页面固定结构"></a>2. HTML页面固定结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>网页的标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        网页的主体内容<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-注释"><a href="#3-注释" class="headerlink" title="3. 注释"></a>3. 注释</h2><p>VScode用<code>Ctrl+/</code>注释和取消注释<br><code>&lt;!--这是注释--&gt;</code></p><h2 id="4-标签之间的关系"><a href="#4-标签之间的关系" class="headerlink" title="4. 标签之间的关系"></a>4. 标签之间的关系</h2><ol><li>父子关系(嵌套关系)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>兄弟关系(并列关系)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-标题标签"><a href="#5-标题标签" class="headerlink" title="5. 标题标签"></a>5. 标题标签</h2><p>使用h系列标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>1级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>2级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>3级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>4级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>5级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>6级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>1~6级标题的重要程度依次递减</li><li>加粗，变大，独占一行</li></ul><h2 id="6-段落标签"><a href="#6-段落标签" class="headerlink" title="6. 段落标签"></a>6. 段落标签</h2><p>使用p标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一段文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>段落之间存在间隙</li><li>独占一行</li></ul><h2 id="7-换行标签"><a href="#7-换行标签" class="headerlink" title="7. 换行标签"></a>7. 换行标签</h2><p><code>&lt;br&gt;</code>用来强制换行</p><h2 id="8-水平分割线标签"><a href="#8-水平分割线标签" class="headerlink" title="8. 水平分割线标签"></a>8. 水平分割线标签</h2><p><code>&lt;hr&gt;</code>用来分割不同区域的水平线</p><h2 id="9-文本格式化标签"><a href="#9-文本格式化标签" class="headerlink" title="9. 文本格式化标签"></a>9. 文本格式化标签</h2><table><thead><tr><th>作用</th><th align="center">标签1</th><th align="center">标签2</th></tr></thead><tbody><tr><td>加粗</td><td align="center">b</td><td align="center">strong</td></tr><tr><td>下划线</td><td align="center">u</td><td align="center">ins</td></tr><tr><td>倾斜</td><td align="center">i</td><td align="center">em</td></tr><tr><td>删除线</td><td align="center">s</td><td align="center">del</td></tr></tbody></table><ul><li>两种标签最终实现的效果是一样的</li><li>只不过标签2更加突出强调语境</li></ul><h2 id="10-图片标签"><a href="#10-图片标签" class="headerlink" title="10. 图片标签"></a>10. 图片标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot; &quot;</span>&gt;</span> src和alt是属性<br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./1.jpg&quot;</span>&gt;</span>  显示当前文件夹的1.jpg图片<br></code></pre></td></tr></table></figure><ul><li>标签属性写在开始标签内部</li><li>标签可以有多个属性，且属性之间没有顺序之分</li><li>属性之间以空格隔开；标签与属性之间以空格隔开</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;dog.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;这是一只狗&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;鼠标悬停时显示&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;800&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>alt属性是替换文本，图片不显示的时候显示alt</li><li>title是图片的标题，鼠标悬停时显示</li><li>width和height设置一个即可，等比例缩放不变形</li></ul><h2 id="11-路径"><a href="#11-路径" class="headerlink" title="11. 路径"></a>11. 路径</h2><p>页面需要加载图片，音频或视频等，怎么找到对应的文件</p><ol><li>绝对路径(了解)<br>目录下的绝对位置，可直接到达目标位置，从盘符开始<br>例：<code>D:\study\html\image\1.jpg</code> (盘符开头)<br><code>https://www.abc.cn/1234/1.jpg</code> (完整网址)</li><li>相对路径(常用)<br>从当前文件出发找目标文件的过程</li></ol><ul><li>同级目录<br>使用<code>&lt;img src=&quot;目标图片.jpg&quot;&gt;</code>或者<code>&lt;img src=&quot;./目标图片.jpg&quot;&gt;</code></li><li>下级目录<br>使用<code>&lt;img src=&quot;目标文件夹/目标图片.jpg&quot;&gt;</code></li><li>上级目录<br>到上一级目录用<code>../</code>;返回上两级就是<code>../../</code></li></ul><h2 id="12-音频标签"><a href="#12-音频标签" class="headerlink" title="12.音频标签"></a>12.音频标签</h2><p>在页面插入音频</p><table><thead><tr><th align="center">属性</th><th>功能</th></tr></thead><tbody><tr><td align="center">src</td><td>音频的路径</td></tr><tr><td align="center">controls</td><td>显示播放的控件</td></tr><tr><td align="center">autoplay</td><td>自动播放</td></tr><tr><td align="center">loop</td><td>循环播放</td></tr></tbody></table><p>例: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./music.mp3&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">loop</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="13-视频标签"><a href="#13-视频标签" class="headerlink" title="13. 视频标签"></a>13. 视频标签</h2><p>属性类型与音频相同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./video.mp4&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">muted</span> <span class="hljs-attr">loop</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><p>属性muted用来静音播放</p><h2 id="14-超链接"><a href="#14-超链接" class="headerlink" title="14. 超链接"></a>14. 超链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>&gt;</span>跳转到百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;目标地址.html&quot;</span>&gt;</span>跳转到目标地址<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>空链接用#<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><table border="1">    <tr>        <th>属性</th>         <th>取值</th>         <th>效果</th>      </tr>    <tr>        <td rowspan="2">target</td>        <td>_self</td>        <td>默认，在当前窗口中跳转(覆盖原网页)</td>    </tr>    <tr>        <td>_blank</td>        <td>在新窗口中跳转(保留原网页)</td>    </tr></table>在新窗口跳转：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>跳转到百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="15-列表标签"><a href="#15-列表标签" class="headerlink" title="15. 列表标签"></a>15. 列表标签</h2><h4 id="1-无序标签"><a href="#1-无序标签" class="headerlink" title="1. 无序标签"></a>1. 无序标签</h4><table><thead><tr><th align="center">标签</th><th>说明</th></tr></thead><tbody><tr><td align="center">ul</td><td>无序标签的整体</td></tr><tr><td align="center">li</td><td>无序列表的每一项</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>华为<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小米<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>ul只允许包含li标签</li><li>li标签可包含任意内容</li></ul><h4 id="2-有序标签"><a href="#2-有序标签" class="headerlink" title="2. 有序标签"></a>2. 有序标签</h4><p>与无序列表类似；用ol和li</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-自定义标签"><a href="#3-自定义标签" class="headerlink" title="3. 自定义标签"></a>3. 自定义标签</h4><table><thead><tr><th align="center">标签</th><th>说明</th></tr></thead><tbody><tr><td align="center">dl</td><td>自定义列表的整体</td></tr><tr><td align="center">dt</td><td>自定义列表的主题</td></tr><tr><td align="center">dd</td><td>自定义列表中主题下的每一项</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>985大学<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>清华大学<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>北京大学<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong> dl中只允许包含dt和dd标签</p><h2 id="16-表格标签"><a href="#16-表格标签" class="headerlink" title="16. 表格标签"></a>16. 表格标签</h2><h4 id="A-标签"><a href="#A-标签" class="headerlink" title="A. 标签"></a>A. 标签</h4><table><thead><tr><th align="center">标签名</th><th>作用</th></tr></thead><tbody><tr><td align="center">table</td><td>表格整体</td></tr><tr><td align="center">tr</td><td>表格每行</td></tr><tr><td align="center">td</td><td>表格单元格</td></tr><tr><td align="center">caption</td><td>表格大标题</td></tr><tr><td align="center">th</td><td>表头单元格</td></tr></tbody></table><h4 id="B-属性"><a href="#B-属性" class="headerlink" title="B. 属性"></a>B. 属性</h4><table><thead><tr><th align="center">属性名</th><th>作用</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">border</td><td>边框宽度</td><td align="center">数字</td></tr><tr><td align="center">width</td><td>表格宽度</td><td align="center">数字</td></tr><tr><td align="center">height</td><td>表格高度</td><td align="center">数字</td></tr><tr><td align="center">rowspan</td><td>跨行合并</td><td align="center">合并单元格的个数</td></tr><tr><td align="center">colspan</td><td>跨列合并</td><td align="center">合并单元格的个数</td></tr></tbody></table><h4 id="C-示例"><a href="#C-示例" class="headerlink" title="C. 示例"></a>C. 示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>高校简介<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>高校<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>人数<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>面积<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>清华<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>北大<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>安大<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>1000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="17-表单标签"><a href="#17-表单标签" class="headerlink" title="17. 表单标签"></a>17. 表单标签</h2><h4 id="A-input标签"><a href="#A-input标签" class="headerlink" title="A. input标签"></a>A. input标签</h4><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>type</td><td>指明类型</td></tr><tr><td>placeholder</td><td>输入框中的提示字</td></tr><tr><td>name</td><td>分组，有相同Name值的是同一组</td></tr><tr><td>checked</td><td>默认选中</td></tr><tr><td>multiple</td><td>多文件选择</td></tr><tr><td>form</td><td>按钮的父标签</td></tr><tr><td>value</td><td>按钮名字</td></tr></tbody></table><table><thead><tr><th>type属性值</th><th>说明</th></tr></thead><tbody><tr><td>text</td><td>文本框，输入单行文本</td></tr><tr><td>password</td><td>密码框，输入密码</td></tr><tr><td>radio</td><td>单选框</td></tr><tr><td>checkbox</td><td>多选框</td></tr><tr><td>file</td><td>文件选择，上传文件</td></tr><tr><td>submit</td><td>提交按钮</td></tr><tr><td>reset</td><td>重置按钮</td></tr><tr><td>button</td><td>普通按钮，默认无功能</td></tr></tbody></table><ul><li>placeholder属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>name和checked属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>男<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>女<br></code></pre></td></tr></table></figure><ul><li>multiple属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>form和value属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;提交的地址&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;普通按钮&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="B-button按钮标签"><a href="#B-button按钮标签" class="headerlink" title="B. button按钮标签"></a>B. button按钮标签</h4><table><thead><tr><th>type属性值</th><th>说明</th></tr></thead><tbody><tr><td>submit</td><td>提交按钮</td></tr><tr><td>reset</td><td>重置按钮</td></tr><tr><td>button</td><td>普通按钮，默认无功能</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>普通按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="C-select下拉菜单按钮"><a href="#C-select下拉菜单按钮" class="headerlink" title="C. select下拉菜单按钮"></a>C. select下拉菜单按钮</h4><table><thead><tr><th>标签名</th><th>作用</th></tr></thead><tbody><tr><td>select</td><td>下拉菜单的整体</td></tr><tr><td>option</td><td>下拉菜单的每一项</td></tr></tbody></table><ul><li>selected属性：默认选中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="D-textarea文本域标签"><a href="#D-textarea文本域标签" class="headerlink" title="D. textarea文本域标签"></a>D. textarea文本域标签</h4><p>提供可输入多行文本的控件</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>cols</td><td>宽度</td></tr><tr><td>rows</td><td>行数</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;60&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="E-label标签"><a href="#E-label标签" class="headerlink" title="E. label标签"></a>E. label标签</h4><p>使用label标签把内容和表单标签一起包裹起来；把label中的for属性删除。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="18-语义化标签"><a href="#18-语义化标签" class="headerlink" title="18. 语义化标签"></a>18. 语义化标签</h2><p>无语义的布局标签</p><ul><li>div:一行只显示一个</li><li>span:一行可显示多个</li></ul><h2 id="19-字符实体"><a href="#19-字符实体" class="headerlink" title="19. 字符实体"></a>19. 字符实体</h2><p>例如空格用<code>&amp;nbsp;</code><br>其他的不用记，用到的时候上网查。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>前端</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在VS2019安装crypto包</title>
    <link href="/2024/06/15/CyberSec/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E5%AE%89%E8%A3%85crypto%E5%8C%85/"/>
    <url>/2024/06/15/CyberSec/%E5%A6%82%E4%BD%95%E5%9C%A8VS2019%E5%AE%89%E8%A3%85crypto%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>首先点开python环境。</p><p><img src="/img/blogs/VS2019-crypto/1.png"></p><p>在搜索框下载这两个包：crypto和pycryptodome</p><p><img src="/img/blogs/VS2019-crypto/2.png"></p><p>此时如果运行会发现还是不能运行，显示报错包未存在。</p><p>crypto包最坑的地方就在于大小写要自己修改：</p><p>根据路径C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python37_64\Lib\site-packages找到crypto文件夹，把crypto首字母c改成大写C即可，也就是Crypto。</p><p><img src="/img/blogs/VS2019-crypto/3.png"></p><p>这样就可以运行，正常使用crypto啦。</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于深度强化学习的 IRS 辅助节能安全 WBAN 传输</title>
    <link href="/2024/06/08/Paper/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%9A%84%20IRS%20%E8%BE%85%E5%8A%A9%E8%8A%82%E8%83%BD%E5%AE%89%E5%85%A8%20WBAN%20%E4%BC%A0%E8%BE%93/"/>
    <url>/2024/06/08/Paper/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%9A%84%20IRS%20%E8%BE%85%E5%8A%A9%E8%8A%82%E8%83%BD%E5%AE%89%E5%85%A8%20WBAN%20%E4%BC%A0%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://ieeexplore.ieee.org/abstract/document/9762319">IRS-Aided Energy-Efficient Secure WBAN Transmission Based on Deep Reinforcement Learning</a></p><h3 id="〇-简要综述"><a href="#〇-简要综述" class="headerlink" title="〇 简要综述"></a>〇 简要综述</h3><p>本文分别使用强化学习和深度强化学习的方法通过改变系统模型的参数(传感器的密钥、传输功率和IRS的相位偏移)防御窃听者的窃听攻击从而保证WBAN的安全传输，同时提高传输性能(降低能耗，提高传输效率)。</p><h3 id="Ⅰ-引言和相关工作"><a href="#Ⅰ-引言和相关工作" class="headerlink" title="Ⅰ 引言和相关工作"></a>Ⅰ 引言和相关工作</h3><ol><li>无线体域网(WBAN)</li></ol><p>WBAN是一种专门用于在人体周围进行无线通信的网络技术。主要用于医疗健康领域，通过在人体内或体表放置的多个传感器来采集和传输生理数据，以便进行实时监测、诊断和治疗。</p><ol start="2"><li>智能反射面(IRS)</li></ol><p>智能反射面由智能反射单元阵列组成，每个智能反射单元能够独立地对入射信号进行某些改变。大量的研究基本考虑到入射信号的相位偏移，所以IRS不消耗传输功率。IRS的主要作用是通过反射信号传输的角度和方向，增强特定区域的信号强度。</p><ol start="3"><li><p>强化学习(RL)</p></li><li><p>状态（State）：状态就是在某个时刻环境的具体描述，系统所处情景的完整表述，包含所有观测到的信息。</p></li><li><p>动作（Action）：动作是在特定状态下可以采取的行为或选择。每个动作会使智能体从一个状态转移到另一个状态。在本文中动作是改变加密密钥、传感器的发射功率级别以及IRS的相移。</p></li><li><p>策略（Policy）：策略是在当前状态下应该采取的动作是什么，通过制定策略长期内获得最大化累计奖励。</p></li><li><p>奖励（Reward）：就是执行动作后得到的反馈信号,用于评估该动作的好坏,它指导如何调整策略以实现目标。</p></li></ol><p>本文通过强化学习要改变的有以下这三个动作：</p><ul><li>密钥长度：由于WBAN主要用AES加密，如果密钥过长虽然安全性有所保障，但容易消耗过多的通信带宽，传输延迟过高。</li><li>传感器的发射功率：功率分配方案应用了值迭代动态规划，可以根据窃听者的干扰策略做出相应调整。</li><li>IRS的相位偏移：IRS反射信号通过增加协调器接收到的信号功率，减少窃听者接收到的信号功率，从而对抗窃听。</li></ul><h3 id="Ⅱ-系统模型和问题表述"><a href="#Ⅱ-系统模型和问题表述" class="headerlink" title="Ⅱ 系统模型和问题表述"></a>Ⅱ 系统模型和问题表述</h3><h5 id="A．无线体域网模型的工作原理"><a href="#A．无线体域网模型的工作原理" class="headerlink" title="A．无线体域网模型的工作原理"></a>A．无线体域网模型的工作原理</h5><ol><li>首先传感器从人体采集健康数据，通过A&#x2F;D转化器以速率R进行采样。</li><li>采集的数据用AES加密，密钥是由椭圆曲线DH算法生成的。</li><li>加密后的数据再进行信道编码(channel coding)（例如BCH编码）</li><li>编码后的数据使用例如DBPSK进行调制，用于无线信道的传输</li><li>传感器根据协调器的指令调整发送功率，然后将调制后的数据发送到协调器。</li><li>协调器接收到传感器的数据后，进行解调和信道解码。</li><li>解码后的数据经过AES解密恢复原始数据。</li><li>IRS由M个反射元件组成，协调器的指令通过设置PIN二极管的偏置电压可以调整IRS的相位偏移。</li><li>控制信道(control channel)：协调器通过控制信道向传感器和IRS发送加密密钥、相位偏移和发射功率等控制信息</li></ol><h5 id="B-WBAN-信道模型"><a href="#B-WBAN-信道模型" class="headerlink" title="B. WBAN 信道模型"></a>B. WBAN 信道模型</h5><p>主要介绍了信道估计的过程，信道估计的主要作用是得到信道当前状态信息</p><ol><li>协调器评估接收到的传感器导频信号从而获得传感器与协调器之间的信道状态信息（CSI）</li><li>IRS使用半被动元件辅助的信道估计方法来估计传感器-IRS和IRS-协调器的信道状态信息</li></ol><h5 id="C-攻击模型"><a href="#C-攻击模型" class="headerlink" title="C. 攻击模型"></a>C. 攻击模型</h5><p>主动窃听者选择合适的干扰功率发送干扰信号，诱导传感器提高发射功率，从而获取更多的数据。获得数据之后再解密数据。</p><p>主要展示了从传感器到协调器的传输过程，以及如何应对主动窃听者的窃听攻击。在每个时间段中动态调整传感器和IRS的操作参数，从而实现数据传输的安全性以及防御窃听攻击。</p><ol><li>信道估计和干扰测量：a窃听者发送干扰信号；b进行信道估计测量接收到的干扰功率(power)</li><li>协调器向IRS和传感器发送信标，通知其开始传输过程</li><li>传感器发送RTS(数据的优先级)，IRS发送RTS(IRS信道状态)。</li><li>安全传输策略选择：协调器基于接收的(数据优先级、IRS信道状态、前一个time slot的SINR)选择传感器的CTR_S(加密密钥、发射功率)和IRS的CTR_R(相位偏移)。</li><li>调整IRS反射元件的相位偏移从而优化信号传输。</li><li>传感器对数据进行加密和channel coding并且发送消息(MSG)</li><li>协调器对数据解码和解密，并且协调器估计信噪比（SINR），发送确认消息（ACK）给传感器和IRS，表示数据已成功接收。</li></ol><h3 id="Ⅲ-基于-IRS-辅助-RL-的节能安全-WBAN-传输"><a href="#Ⅲ-基于-IRS-辅助-RL-的节能安全-WBAN-传输" class="headerlink" title="Ⅲ 基于 IRS 辅助 RL 的节能安全 WBAN 传输"></a>Ⅲ 基于 IRS 辅助 RL 的节能安全 WBAN 传输</h3><p>因为协调器很难知道窃听信道状态和窃听策略，所以很难保证WBAN传输的安全，提出了强化学习的WBAN传输方案实现最优策略，包括选择传感器加密密钥、发射功率以及IRS相位调整。同时使用传感器信号的信噪比（SINR）作为安全性标准。</p><h5 id="A．state"><a href="#A．state" class="headerlink" title="A．state"></a>A．state</h5><p>某个时刻环境的具体描述：</p><p>输入的信息有干扰功率(jamming power)、基于导频的信道估计(pilot-based channel estimation)、数据优先级(data priority)、IRS信道状态(IRS channel states)、前一个时间段的传感器能耗和传输延迟(previous sensor energy consumption &amp; transmission latency)、传感器到IRS的信道状态和IRS到协调器的信道状态。</p><p>总之，传感器的状态向量。包含数据优先级、接收到的干扰功率、传感器和IRS的信道状态、传感器能量消耗和传输延迟。</p><h5 id="B-Action"><a href="#B-Action" class="headerlink" title="B. Action"></a>B. Action</h5><p>当下可以做出的改变，动作集(所有的传输策略的集合)：组成要素包括加密密钥、传感器的发射功率级别以及IRS的相移。</p><p>动作集是一个具有三维的有限集合，包含以下部分：</p><ol><li>传感器加密密钥的取值（1到Z）。</li><li>传感器发射功率级别的取值（1到D）。</li><li>IRS相移的取值（每个相移从0到N-1）</li></ol><h5 id="C-Policy"><a href="#C-Policy" class="headerlink" title="C. Policy"></a>C. Policy</h5><p>通过计算和评估策略分布以选择合适的传输策略。</p><p>协调器根据传感器信号的SINR 设置一个安全标准。如果在状态-动作对下的SINR低于安全标准，则认为该状态-动作对的风险水平为1，否则为0。</p><h5 id="D-Reward"><a href="#D-Reward" class="headerlink" title="D. Reward"></a>D. Reward</h5><p>1.效用函数u的计算</p><p>效用函数 u 结合了数据保护等级、窃听率、SINR、传感器能耗和传输延迟</p><p>协调器的目标是最大化期望的长期效用</p><p>其中γ是折扣因子，表示未来效用的重要性。</p><p>2.强化学习和经验回放：</p><p>状态转移概率由状态-动作对和下一状态计数器和出现次数向量得到</p><p>建模效用 ω 定义为所有真实反窃听传输经验的平均效用</p><p>生成 J 个模拟经验，根据这些经验更新长期风险水平和预期长期效用，最终通过迭代Bellman方程进行优化。</p><h3 id="IV-基于DRL的安全WBAN传输"><a href="#IV-基于DRL的安全WBAN传输" class="headerlink" title="IV 基于DRL的安全WBAN传输"></a>IV 基于DRL的安全WBAN传输</h3><p>主要是为了提高WBAN的传输性能，使用了深度RL。</p><ol><li>actor-critic模型：</li></ol><p>Critic 是评判网络：当输入为环境状态时，它可以评估当前状态的价值；当输入为环境状态和采取的动作时，它可以评估当前状态下采取该动作的价值。</p><p>Critic 网络的输入一般有两种形式：（1）如果输入为状态，则该评价网络的作用为评价当前状态价值；（2）如果输入为状态和动作，则该评价网络的作用为评价当前状态的动作价值。</p><p>Actor 为策略网络，以当前的状态作为输入，输出为动作的概率分布或者连续动作值，再由 Critic 网络来评价该动作的好坏从而调整策略。</p><ol start="2"><li>本文中的深度强化学习模型</li></ol><p>actor网络根据当前状态生成传输策略，critic网络评估状态值。</p><p>Actor：用于生成策略，即决定在当前状态下采取哪种动作（如选择传感器的加密密钥、传感器发射功率和IRS相移）。</p><p>Critic：用于评估当前策略的表现，即计算在当前状态和动作下的价值函数（Q值）。</p><h3 id="Ⅴ-性能分析和仿真结果"><a href="#Ⅴ-性能分析和仿真结果" class="headerlink" title="Ⅴ 性能分析和仿真结果"></a>Ⅴ 性能分析和仿真结果</h3><p>在模型中协调器选择传输策略（包括加密密钥长度、传输功率和IRS相位移），而窃听者选择干扰功率。</p><p>随着时间的推移，窃听率ITDL比ITRL收敛的更快，ITDL的窃听率始终比ITRL低。</p><p>同样的：在能耗方面、传输延迟方面，ITDL也始终比ITRL低</p><p>在传输的安全容量上，ITDL也始终比ITRL传输的安全容量更高。</p><p>ITDL的效用(综合指标)也一直比ITRL更高，更快的逼近理想状态。</p><p>结论：</p><ol><li>随着时间的推移，ITDL和ITRL的效用(utility)相比于BDL(基线策略)都提高了很多。</li><li>窃听者距离传感器从6米增加到10米，而ITRL的效用提高了38.6%。主要因为窃听者信道条件的恶化。</li><li>增加IRS的反射元件的数量可以提高效用。</li></ol><p>总之，通过强化学习改变协调器的选择(传感器的密钥、传输功率和IRS的相位偏移)降低窃听者的窃听率和拦截概率。</p>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>信息与通信</tag>
      
      <tag>强化学习</tag>
      
      <tag>论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2020-13821漏洞复现</title>
    <link href="/2024/04/28/CyberSec/CVE-2020-13821%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/04/28/CyberSec/CVE-2020-13821%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>​</p><h3 id="Ⅰ-漏洞介绍"><a href="#Ⅰ-漏洞介绍" class="headerlink" title="Ⅰ 漏洞介绍"></a>Ⅰ 漏洞介绍</h3><p>官网：<a href="https://www.cve.org/CVERecord?id=CVE-2020-13821">CVE - CVE-2020-13821 (mitre.org)</a></p><p>下载地址：<a href="https://www.hivemq.com/changelog/hivemq-4-3-2-released/">HiveMQ 4.3.2 Maintenance Release</a></p><p>Description: An issue was discovered in HiveMQ Broker Control Center 4.3.2. A crafted clientid parameter in an MQTT packet (sent to the Broker) is reflected in the client section of the management console. The attacker’s JavaScript is loaded in a browser, which can lead to theft of the session and cookie of the administrator’s account of the Broker.</p><p>描述: 在HiveMQ Broker Control Center 4.3.2中发现了一个问题。在发送给Broker的MQTT数据包中的一个精心构造的clientid参数在管理控制台的客户端部分中被反射。攻击者的JavaScript会加载在浏览器中，这可能导致管理员账户的会话和Cookie被盗取。</p><p>其他信息</p><p>CVE-ID：CVE-2020-13821</p><p>披露时间：2020.5.18</p><h3 id="Ⅱ-漏洞原理"><a href="#Ⅱ-漏洞原理" class="headerlink" title="Ⅱ 漏洞原理"></a>Ⅱ 漏洞原理</h3><ol><li>XSS漏洞</li></ol><p>跨站脚本攻击（Cross-Site Scripting，XSS）是一种常见的Web漏洞，它允许攻击者向网页中注入恶意脚本代码（通常是JavaScript代码）。当其他用户访问受到XSS攻击的网页时，这些恶意脚本代码将在他们的浏览器上执行，从而导致攻击者能够窃取用户的会话信息、篡改网页内容、重定向用户到恶意网站等恶意行为。</p><p>XSS漏洞通常存在于网站的输入验证不足或输出过滤不当的情况下。攻击者可以利用用户输入的地方（比如搜索框、评论框等）来注入恶意脚本代码，然后这些代码被存储在服务器上，并在其他用户访问该页面时被服务器发送给他们的浏览器执行。</p><p>XSS攻击可以分为三种类型：</p><ol><li>存储型XSS：恶意脚本被存储在服务器上，当其他用户访问包含该恶意脚本的页面时，恶意脚本会被执行。</li><li>反射型XSS：恶意脚本作为URL参数或表单提交数据的一部分，被发送到服务器。服务器在响应中返回并执行这些恶意脚本，从而使攻击者能够攻击访问者。</li><li>DOM型XSS：攻击者通过修改页面的DOM环境，使恶意脚本被执行。这种XSS攻击不涉及服务器端的存储和响应，而是完全在客户端执行。</li></ol><p><strong>在 HiveMQ MQTT Broker 上发现的问题：管理控制台中未针对 XSS 清理任何已连接设备的客户端 ID，从而导致存储 XSS。</strong></p><ol start="2"><li>MQTT协议</li></ol><p>MQTT（Message Queuing Telemetry Transport,消息队列遥测传输）是一个ISO 标准（ISO&#x2F;IEC PRF 20922）下基于发布 (Publish)&#x2F;订阅 (Subscribe)范式的消息协议，它工作在TCP&#x2F;IP协议族上，是为硬件性能低下的远程设备以及网络状况不好的情况下而设计的发布&#x2F;订阅型消息协议。MQTT最大优点在于可以以极少的代码和有限的带宽，为远程连接设备提过实时可靠的消息服务，作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><p><img src="/img/blogs/CVE-2020-13821/1.png"></p><p>​</p><h3 id="Ⅲ-漏洞复现"><a href="#Ⅲ-漏洞复现" class="headerlink" title="Ⅲ 漏洞复现"></a>Ⅲ 漏洞复现</h3><ol><li>环境搭建</li></ol><p>在以下官网下载有漏洞未修复的4.3.2版本：</p><p><a href="https://www.hivemq.com/changelog/hivemq-4-3-2-released/">HiveMQ 4.3.2 Maintenance Release</a></p><p>下载完成后，通过这个目录路径”D:\hivemq-4.3.2\bin\run.bat”找到run.bat文件，以管理员运行即可启动hivemq，如下图所示：</p><p><img src="/img/blogs/CVE-2020-13821/2.png"></p><p>​<br>这里显示运行HiveMQ至少需要Java 11的版本，以下是下载Java 11的文章：</p><p><a href="https://blog.csdn.net/aixinxin1314myl/article/details/128163668">jdk11 下载与安装（非常详细，一步不落！！！）-CSDN博客</a></p><p>下载安装至少JDK11之后，再次点击run.bat文件，如下图所示，说明hivemq成功运行：</p><p><img src="/img/blogs/CVE-2020-13821/3.png"></p><p>如上图所示，我们看到页面对应的IP和端口分别是：127.0.0.1和8080</p><ol start="2"><li>访问网站</li></ol><p>我们在浏览器键入：127.0.0.1:8080</p><p>成功打开hivemq的网址页面如下：</p><p><img src="/img/blogs/CVE-2020-13821/4.png"></p><p>我们输入账号和密码分别是：admin和hivemq，登录进入如下图所示：</p><p><img src="/img/blogs/CVE-2020-13821/5.png"></p><p><img src="/img/blogs/CVE-2020-13821/6.png"></p><p>如上图所示，点击左侧的Clients,查看连接的客户端，点击Refresh Snapshot更新系统的快照。</p><ol start="3"><li>攻击脚本</li></ol><p>编写脚本代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#attack.py</span><br><span class="hljs-keyword">import</span> paho.mqtt.client <span class="hljs-keyword">as</span> mqtt<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange, uniform<br><span class="hljs-keyword">import</span> time<br> <br>mqttBroker = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br> <br>client = mqtt.Client(<span class="hljs-string">&quot;UU&lt;img src=x onerror=alert(/HelloWorld/)&gt;ZZ&quot;</span>)<br>client.connect(mqttBroker)<br> <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    randNumber = uniform(<span class="hljs-number">10000.0</span>, <span class="hljs-number">1000000.0</span>)<br>    client.publish(<span class="hljs-string">&quot;随机数：&quot;</span>,randNumber)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is  &quot;</span> + <span class="hljs-built_in">str</span>(randNumber)+<span class="hljs-string">&quot;  in this program&quot;</span>)<br>    time.sleep(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>(1) mqttBroker &#x3D; “127.0.0.1”</p><p>设置MQTT Broker的地址，我们使用的本地地址127.0.0.1</p><p>(2)<code>client = mqtt.Client(&quot;UU&lt;img src=x onerror=alert(/HelloWorld/)&gt;ZZ&quot;)</code></p><p>创建一个MQTT客户端，设置了客户端ID(即clientid)为 <code>&quot;UU&lt;img src=x onerror=alert(/HelloWorld/)&gt;ZZ&quot;</code>。clientid中包含了恶意的HTML代码 <code>&lt;img src=x onerror=alert(/HelloWorld/)&gt;</code>，这段代码将在管理控制台的客户端部分中被反射执行，从而触发XSS漏洞。</p><p>(3) while True:…………</p><p>设置一个无限循环用来发布恶意信息。这里的关键是主题部分可能会被用于反射恶意的clientid参数。</p><ol start="4"><li>攻击结果</li></ol><p>在以上attack.py中导入Paho MQTT 版本请使用如下命令：pip install paho-mqtt&#x3D;&#x3D;1.5.1。较高的版本不支持我们使用的回调 API 版本</p><p>我们直接编译运行：</p><p><img src="/img/blogs/CVE-2020-13821/7.png"></p><p>在Web页面，点击“Refresh Snapshot”刷新一下客户端：</p><p><img src="/img/blogs/CVE-2020-13821/8.png"></p><p>看到弹窗显示我们的恶意XSS。漏洞攻击成功！</p><p>​</p><h3 id="Ⅳ-漏洞修复"><a href="#Ⅳ-漏洞修复" class="headerlink" title="Ⅳ 漏洞修复"></a>Ⅳ 漏洞修复</h3><p>HiveMQ团队在2020.5.27发布4-3-3版本，修复了该漏洞,请使用更高版本的hivemq-4-3-3：</p><p><a href="https://www.hivemq.com/changelog/hivemq-4-3-3-released/">CONFIRM:https://www.hivemq.com/blog/hivemq-4-3-3-released/</a></p><p>This maintenance release for the 4.3 series includes the following improvements:</p><p>Security: Fixed the vulnerability of CVE-2020-13821</p><p>​​</p><h3 id="Ⅴ-参考资料"><a href="#Ⅴ-参考资料" class="headerlink" title="Ⅴ 参考资料"></a>Ⅴ 参考资料</h3><p><a href="https://kafroc.github.io/2021/03/28/CVE%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0.html">CVE漏洞环境搭建笔记 | kafroc</a></p><p><a href="https://blog.csdn.net/jackwmj12/article/details/129163012">MQTT协议详解(完整版)-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/397940947">Web漏洞之XSS(跨站脚本攻击)详解 - 知乎 (zhihu.com)</a></p><p><a href="https://www.anquanke.com/post/id/216074#h2-0">物联网安全之MQTT渗透实战-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="https://avd.aliyun.com/detail?id=AVD-2020-13821&timestamp__1384=eq0x0iG=GQdCqY5YGNuCBbK0Qki=dK8bH4D">阿里云漏洞库 (aliyun.com)</a></p><p><a href="https://github.com/advisories/GHSA-9qcc-v828-vgx7">An issue was discovered in HiveMQ Broker Control Center 4… · CVE-2020-13821 · GitHub Advisory Database · GitHub</a></p><p><a href="https://www.hivemq.com/changelog/hivemq-4-3-3-released/">HiveMQ 4.3.3 Maintenance Release</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>漏洞分析</tag>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>reversing.kr网站的Flash Encrypt</title>
    <link href="/2024/04/27/CyberSec/reversing.kr%E7%BD%91%E7%AB%99%E7%9A%84Flash%20Encrypt/"/>
    <url>/2024/04/27/CyberSec/reversing.kr%E7%BD%91%E7%AB%99%E7%9A%84Flash%20Encrypt/</url>
    
    <content type="html"><![CDATA[<p>​<br>韩国人的逆向题目网站：<a href="http://reversing.kr/challenge.php?ckattempt=1">Reversing.Kr</a></p><p>浏览器点击Flash Encrypt自动下载flashenc.swf文件。</p><p>这题我们使用前辈们推荐的ffdec软件进行反编译。(以下给出github链接，也可以浏览器搜索下载)</p><p><a href="https://github.com/jindrapetrik/jpexs-decompiler">GitHub - jindrapetrik&#x2F;jpexs-decompiler: JPEXS Free Flash Decompiler</a></p><p>​<br><img src="/img/blogs/FlashEncrypt/1.png"></p><p>如上图所示，打开flashenc.swf之后，可以看到这个视频一共有七个帧。每个帧里面只有一个文本框和一个按钮。</p><p>我们可以发现七个帧中只有第一个帧的文本框中输入了字符1234567890，其他都没有，而如下图所示：最后一个帧显示Key is。很明显我们如果掌握了这个帧的信息，那么密钥就获得了。</p><p><img src="/img/blogs/FlashEncrypt/2.png"></p><p>我们首先查看第一个帧：鼠标移动到按钮位置，可以看到按钮响应函数是DefineButton2(4)。</p><p><img src="/img/blogs/FlashEncrypt/3.png"></p><p>打开脚本之前，要先在设置一栏勾选自动反混淆，这样看到的代码能看懂</p><p><img src="/img/blogs/FlashEncrypt/4.png"></p><p>于是我们在脚本中找到这个DefineButton2(4)函数，如下图所示：看到函数内部代码逻辑</p><p><img src="/img/blogs/FlashEncrypt/5.png"></p><p>如下图所示，让我们看的更清晰。很明显，spw是我们文本框输入的字符串，这段代码逻辑就是当spw&#x3D;&#x3D;1456的时候，跳转播放到第三个帧。</p><p><img src="/img/blogs/FlashEncrypt/6.png"></p><p>好的，那我们接下来查看第三个帧，如下图所示。</p><p><img src="/img/blogs/FlashEncrypt/7.png"></p><p>同理，第三个帧的按钮响应函数是DefineButton2(9),我们找到该函数，如下图所示：</p><p><img src="/img/blogs/FlashEncrypt/8.png"></p><p>如上图所示，看到同样的代码逻辑：当spwd&#x3D;&#x3D;25时，执行运算、清空，然后跳转播放第四帧。</p><p>……后续的推理过程同理，最终的就是跳转到第七帧，然后输出Key，就成功了！</p><p>在文件一栏另存为exe文件，打开。如果没有下载Adobe Flash Player是打不开这个.exe文件的，下载地址：<a href="https://www.flash.cn/">https://www.flash.cn/</a></p><p>依次在弹出的文本框中输入：</p><ol><li>1456</li><li>25</li><li>44</li><li>8</li><li>88</li><li>20546</li></ol><p>最后输出结果如下：Key is 16876</p><p><img src="/img/blogs/FlashEncrypt/9.png"></p><p><img src="/img/blogs/FlashEncrypt/10.png"></p><p>成功获得240分。</p><p><strong>参考资料</strong><br><a href="https://blog.csdn.net/whklhhhh/article/details/78279512">171018 逆向-Reversing.kr（Flash Encrypt）_ffdec 怎么运行脚本-CSDN博客</a></p><p><a href="https://github.com/L1B0/CTF/blob/master/Reversing-Kr/FlashEncrypt/Reversing-Kr%20Flash-Encrypt%20Writeup.md">CTF&#x2F;Reversing-Kr&#x2F;FlashEncrypt&#x2F;Reversing-Kr Flash-Encrypt Writeup.md at master · L1B0&#x2F;CTF · GitHub</a></p><p><a href="https://github.com/DoubleLabyrinth/reversing.kr/blob/master/Flash%20Encrypt/README.md">reversing.kr&#x2F;Flash Encrypt&#x2F;README.md at master · DoubleLabyrinth&#x2F;reversing.kr · GitHub</a></p><p><a href="https://chatgpt.com/">ChatGPT (openai.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>逆向工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矢量图：PNG格式转换为SVG格式</title>
    <link href="/2024/03/26/Paper/%E7%9F%A2%E9%87%8F%E5%9B%BE%EF%BC%9APNG%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E4%B8%BASVG%E6%A0%BC%E5%BC%8F/"/>
    <url>/2024/03/26/Paper/%E7%9F%A2%E9%87%8F%E5%9B%BE%EF%BC%9APNG%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E4%B8%BASVG%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>图片的格式有很多种，最常见的是位图和矢量图。在论文写作时，尤其对于理工科的论文，当一个图片是流程图、数据统计的柱形图、折线图等等，图片大部分内容是公式和文字以及一些基本的形状，那么这个时候最好使用矢量图格式。如果要插入的图片是拍照得到的照片和一些像素点很多很复杂的图片时，最好使用位图格式。矢量图最大的优点就是放大不模糊。很多期刊要求最好使用矢量图（svg,eps）。</p><ol><li>矢量图格式： 矢量图是使用数学公式来描述图像的，因此它们可以无限放大而不失真。矢量图形文件通常存储为文本文件，其中包含了用于绘制图像的几何形状、线条、颜色和文本信息。</li><li>位图格式： 位图图像是由像素阵列组成的图像，每个像素都有自己的颜色信息。当放大位图图像时，像素会变得更加明显，导致图像失真。</li></ol><p>常见的矢量图格式包括：</p><ol><li>SVG（Scalable Vector Graphics）：一种基于 XML 格式的矢量图形格式，支持动画和互动性。</li><li>AI（Adobe Illustrator Artwork）：Adobe Illustrator 的原生文件格式，用于存储矢量图形。</li><li>EPS（Encapsulated PostScript）：一种支持矢量图形和位图图像的文件格式，常用于印刷和桌面出版领域。</li></ol><p>常见的位图格式包括：</p><ol><li>JPEG（Joint Photographic Experts Group）：一种广泛用于存储照片和复杂图像的有损压缩格式，支持不同的压缩质量。</li><li>PNG（Portable Network Graphics）：一种支持透明度和损失less压缩的位图图像格式，常用于网络图像和图标。</li><li>GIF（Graphics Interchange Format）：一种支持动画和透明度的位图图像格式，适合简单图形和动画。</li><li>BMP（Bitmap）：Windows 系统中常用的无损位图图像格式，不支持压缩。</li><li>TIFF（Tagged Image File Format）：一种支持多页和多种图像数据格式（如矢量和位图）的高质量图像格式，常用于印刷和出版领域。</li></ol><p>新手在写论文的时候，可能不太了解要使用矢量图，很多时候会导出JPEG或PNG格式，如果使用word写论文再导出PDF格式的时候，很容易把图片压缩的很模糊。这里推荐一个免费的好用的网站，可以很好的把PNG格式转成SVG格式：</p><p><a href="https://png2svg.com/">png2svg</a></p><p><img src="/img/blogs/paper/pngtosvg.png"></p><p>这个网站也可以把JPEG转成SVG格式等等。挺好用的，不打广告。</p>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归--鸡哥的魔法石</title>
    <link href="/2024/03/19/Algorithm/%E9%80%92%E5%BD%92-%E9%B8%A1%E5%93%A5%E7%9A%84%E9%AD%94%E6%B3%95%E7%9F%B3/"/>
    <url>/2024/03/19/Algorithm/%E9%80%92%E5%BD%92-%E9%B8%A1%E5%93%A5%E7%9A%84%E9%AD%94%E6%B3%95%E7%9F%B3/</url>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong>:</p><p>在鸡哥的家乡，有一个传说，说是有一块神奇的魔法石，这块石头有个奇特的属性，它可以吸收一个整数X的能量。每次吸收时，它会将这个数字的所有数位上的数字之和从X中减去，并继续吸收新的能量，直到吸收的能量为0。鸡哥被这个奇怪的现象所吸引，它想知道，如果它有一个整数X，魔法石需要吸收几次能量才能将这个数字消耗为0。</p><p><strong>输入：</strong></p><p>第一行输入整数X</p><p><strong>输出：</strong></p><p>第一行包含一个整数，代表魔法石需要吸收的次数。</p><p><strong>代码如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> sumN)</span>  <span class="hljs-comment">//求一个整数的数位之和</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">10</span>)<br><span class="hljs-keyword">return</span> sumN += N;  <span class="hljs-comment">//递归终止条件</span><br>sumN += N % <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(N / <span class="hljs-number">10</span>, sumN); <span class="hljs-comment">//递归表达式</span><br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> num)</span> <span class="hljs-comment">//递归相减，鸡哥吸收能量</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (N == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> num;   <span class="hljs-comment">//递归终止条件</span><br><span class="hljs-type">int</span> sumN = <span class="hljs-number">0</span>;<br>sumN = <span class="hljs-built_in">sum</span>(N, <span class="hljs-number">0</span>);<br>N -= sumN;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">fun1</span>(N, num += <span class="hljs-number">1</span>);  <span class="hljs-comment">//递归表达式</span><br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> N, num = <span class="hljs-number">0</span>;<br>cin &gt;&gt; N;<br>cout &lt;&lt; <span class="hljs-built_in">fun1</span>(N, num);<span class="hljs-comment">//原题目有问题，这里最后要加1才对？我不理解</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>CPP</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于加法同态加密和多MSB预测的三维网格密文域可逆信息隐藏</title>
    <link href="/2024/02/24/CyberSec/%E5%9F%BA%E4%BA%8E%E5%8A%A0%E6%B3%95%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86%E5%92%8C%E5%A4%9AMSB%E9%A2%84%E6%B5%8B%E7%9A%84%E4%B8%89%E7%BB%B4%E7%BD%91%E6%A0%BC%E5%AF%86%E6%96%87%E5%9F%9F%E5%8F%AF%E9%80%86%E4%BF%A1%E6%81%AF%E9%9A%90%E8%97%8F/"/>
    <url>/2024/02/24/CyberSec/%E5%9F%BA%E4%BA%8E%E5%8A%A0%E6%B3%95%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86%E5%92%8C%E5%A4%9AMSB%E9%A2%84%E6%B5%8B%E7%9A%84%E4%B8%89%E7%BB%B4%E7%BD%91%E6%A0%BC%E5%AF%86%E6%96%87%E5%9F%9F%E5%8F%AF%E9%80%86%E4%BF%A1%E6%81%AF%E9%9A%90%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<p>原文：Reversible Data Hiding for 3D Mesh Model Based on Block Modulus Encryption and Multi-MSB Prediction</p><p>链接：<a href="https://link.springer.com/chapter/10.1007/978-981-97-8746-3_7">Reversible Data Hiding for 3D Mesh Model Based on Block Modulus Encryption and Multi-MSB Prediction</a></p><p><strong>主要算法思想</strong>：</p><ol><li>预处理：将顶点信息进行整数映射以及坐标转换</li><li>网格划分，同态加密和子块置乱：将三维网格划分为大小相等的子块，大小为N×N×N。对子块内的顶点信息使用相同的密钥进行加法同态加密，使其保留空间相关性。然后对加密后的子块进行置乱操作，只对子块间进行置乱，而非子块内顶点的置乱，提高其密文域的安全性。</li><li>多MSB预测：得到密文域顶点信息，在每个子块内进行多MSB预测得到嵌入位置。</li><li>信息隐藏：将秘密信息嵌入到密文域中</li><li>信息恢复：提取秘密信息，将子块逆置乱，逆加法同态加密操作得到原始网格信息。</li></ol>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>信息隐藏</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
